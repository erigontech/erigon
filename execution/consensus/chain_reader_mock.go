// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erigontech/erigon/execution/consensus (interfaces: ChainReader)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./chain_reader_mock.go -package=consensus . ChainReader
//

// Package consensus is a generated GoMock package.
package consensus

import (
	big "math/big"
	reflect "reflect"

	chain "github.com/erigontech/erigon-lib/chain"
	common "github.com/erigontech/erigon-lib/common"
	rlp "github.com/erigontech/erigon-lib/rlp"
	types "github.com/erigontech/erigon/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockChainReader is a mock of ChainReader interface.
type MockChainReader struct {
	ctrl     *gomock.Controller
	recorder *MockChainReaderMockRecorder
	isgomock struct{}
}

// MockChainReaderMockRecorder is the mock recorder for MockChainReader.
type MockChainReaderMockRecorder struct {
	mock *MockChainReader
}

// NewMockChainReader creates a new mock instance.
func NewMockChainReader(ctrl *gomock.Controller) *MockChainReader {
	mock := &MockChainReader{ctrl: ctrl}
	mock.recorder = &MockChainReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainReader) EXPECT() *MockChainReaderMockRecorder {
	return m.recorder
}

// BorEventsByBlock mocks base method.
func (m *MockChainReader) BorEventsByBlock(hash common.Hash, number uint64) []rlp.RawValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BorEventsByBlock", hash, number)
	ret0, _ := ret[0].([]rlp.RawValue)
	return ret0
}

// BorEventsByBlock indicates an expected call of BorEventsByBlock.
func (mr *MockChainReaderMockRecorder) BorEventsByBlock(hash, number any) *MockChainReaderBorEventsByBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BorEventsByBlock", reflect.TypeOf((*MockChainReader)(nil).BorEventsByBlock), hash, number)
	return &MockChainReaderBorEventsByBlockCall{Call: call}
}

// MockChainReaderBorEventsByBlockCall wrap *gomock.Call
type MockChainReaderBorEventsByBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainReaderBorEventsByBlockCall) Return(arg0 []rlp.RawValue) *MockChainReaderBorEventsByBlockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainReaderBorEventsByBlockCall) Do(f func(common.Hash, uint64) []rlp.RawValue) *MockChainReaderBorEventsByBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainReaderBorEventsByBlockCall) DoAndReturn(f func(common.Hash, uint64) []rlp.RawValue) *MockChainReaderBorEventsByBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BorStartEventId mocks base method.
func (m *MockChainReader) BorStartEventId(hash common.Hash, number uint64) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BorStartEventId", hash, number)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// BorStartEventId indicates an expected call of BorStartEventId.
func (mr *MockChainReaderMockRecorder) BorStartEventId(hash, number any) *MockChainReaderBorStartEventIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BorStartEventId", reflect.TypeOf((*MockChainReader)(nil).BorStartEventId), hash, number)
	return &MockChainReaderBorStartEventIdCall{Call: call}
}

// MockChainReaderBorStartEventIdCall wrap *gomock.Call
type MockChainReaderBorStartEventIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainReaderBorStartEventIdCall) Return(arg0 uint64) *MockChainReaderBorStartEventIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainReaderBorStartEventIdCall) Do(f func(common.Hash, uint64) uint64) *MockChainReaderBorStartEventIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainReaderBorStartEventIdCall) DoAndReturn(f func(common.Hash, uint64) uint64) *MockChainReaderBorStartEventIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockChainReader) Config() *chain.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*chain.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockChainReaderMockRecorder) Config() *MockChainReaderConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockChainReader)(nil).Config))
	return &MockChainReaderConfigCall{Call: call}
}

// MockChainReaderConfigCall wrap *gomock.Call
type MockChainReaderConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainReaderConfigCall) Return(arg0 *chain.Config) *MockChainReaderConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainReaderConfigCall) Do(f func() *chain.Config) *MockChainReaderConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainReaderConfigCall) DoAndReturn(f func() *chain.Config) *MockChainReaderConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CurrentFinalizedHeader mocks base method.
func (m *MockChainReader) CurrentFinalizedHeader() *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentFinalizedHeader")
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// CurrentFinalizedHeader indicates an expected call of CurrentFinalizedHeader.
func (mr *MockChainReaderMockRecorder) CurrentFinalizedHeader() *MockChainReaderCurrentFinalizedHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentFinalizedHeader", reflect.TypeOf((*MockChainReader)(nil).CurrentFinalizedHeader))
	return &MockChainReaderCurrentFinalizedHeaderCall{Call: call}
}

// MockChainReaderCurrentFinalizedHeaderCall wrap *gomock.Call
type MockChainReaderCurrentFinalizedHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainReaderCurrentFinalizedHeaderCall) Return(arg0 *types.Header) *MockChainReaderCurrentFinalizedHeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainReaderCurrentFinalizedHeaderCall) Do(f func() *types.Header) *MockChainReaderCurrentFinalizedHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainReaderCurrentFinalizedHeaderCall) DoAndReturn(f func() *types.Header) *MockChainReaderCurrentFinalizedHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CurrentHeader mocks base method.
func (m *MockChainReader) CurrentHeader() *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentHeader")
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// CurrentHeader indicates an expected call of CurrentHeader.
func (mr *MockChainReaderMockRecorder) CurrentHeader() *MockChainReaderCurrentHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentHeader", reflect.TypeOf((*MockChainReader)(nil).CurrentHeader))
	return &MockChainReaderCurrentHeaderCall{Call: call}
}

// MockChainReaderCurrentHeaderCall wrap *gomock.Call
type MockChainReaderCurrentHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainReaderCurrentHeaderCall) Return(arg0 *types.Header) *MockChainReaderCurrentHeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainReaderCurrentHeaderCall) Do(f func() *types.Header) *MockChainReaderCurrentHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainReaderCurrentHeaderCall) DoAndReturn(f func() *types.Header) *MockChainReaderCurrentHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CurrentSafeHeader mocks base method.
func (m *MockChainReader) CurrentSafeHeader() *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentSafeHeader")
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// CurrentSafeHeader indicates an expected call of CurrentSafeHeader.
func (mr *MockChainReaderMockRecorder) CurrentSafeHeader() *MockChainReaderCurrentSafeHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentSafeHeader", reflect.TypeOf((*MockChainReader)(nil).CurrentSafeHeader))
	return &MockChainReaderCurrentSafeHeaderCall{Call: call}
}

// MockChainReaderCurrentSafeHeaderCall wrap *gomock.Call
type MockChainReaderCurrentSafeHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainReaderCurrentSafeHeaderCall) Return(arg0 *types.Header) *MockChainReaderCurrentSafeHeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainReaderCurrentSafeHeaderCall) Do(f func() *types.Header) *MockChainReaderCurrentSafeHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainReaderCurrentSafeHeaderCall) DoAndReturn(f func() *types.Header) *MockChainReaderCurrentSafeHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FrozenBlocks mocks base method.
func (m *MockChainReader) FrozenBlocks() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FrozenBlocks")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// FrozenBlocks indicates an expected call of FrozenBlocks.
func (mr *MockChainReaderMockRecorder) FrozenBlocks() *MockChainReaderFrozenBlocksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FrozenBlocks", reflect.TypeOf((*MockChainReader)(nil).FrozenBlocks))
	return &MockChainReaderFrozenBlocksCall{Call: call}
}

// MockChainReaderFrozenBlocksCall wrap *gomock.Call
type MockChainReaderFrozenBlocksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainReaderFrozenBlocksCall) Return(arg0 uint64) *MockChainReaderFrozenBlocksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainReaderFrozenBlocksCall) Do(f func() uint64) *MockChainReaderFrozenBlocksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainReaderFrozenBlocksCall) DoAndReturn(f func() uint64) *MockChainReaderFrozenBlocksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FrozenBorBlocks mocks base method.
func (m *MockChainReader) FrozenBorBlocks() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FrozenBorBlocks")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// FrozenBorBlocks indicates an expected call of FrozenBorBlocks.
func (mr *MockChainReaderMockRecorder) FrozenBorBlocks() *MockChainReaderFrozenBorBlocksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FrozenBorBlocks", reflect.TypeOf((*MockChainReader)(nil).FrozenBorBlocks))
	return &MockChainReaderFrozenBorBlocksCall{Call: call}
}

// MockChainReaderFrozenBorBlocksCall wrap *gomock.Call
type MockChainReaderFrozenBorBlocksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainReaderFrozenBorBlocksCall) Return(arg0 uint64) *MockChainReaderFrozenBorBlocksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainReaderFrozenBorBlocksCall) Do(f func() uint64) *MockChainReaderFrozenBorBlocksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainReaderFrozenBorBlocksCall) DoAndReturn(f func() uint64) *MockChainReaderFrozenBorBlocksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlock mocks base method.
func (m *MockChainReader) GetBlock(hash common.Hash, number uint64) *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", hash, number)
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockChainReaderMockRecorder) GetBlock(hash, number any) *MockChainReaderGetBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockChainReader)(nil).GetBlock), hash, number)
	return &MockChainReaderGetBlockCall{Call: call}
}

// MockChainReaderGetBlockCall wrap *gomock.Call
type MockChainReaderGetBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainReaderGetBlockCall) Return(arg0 *types.Block) *MockChainReaderGetBlockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainReaderGetBlockCall) Do(f func(common.Hash, uint64) *types.Block) *MockChainReaderGetBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainReaderGetBlockCall) DoAndReturn(f func(common.Hash, uint64) *types.Block) *MockChainReaderGetBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHeader mocks base method.
func (m *MockChainReader) GetHeader(hash common.Hash, number uint64) *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", hash, number)
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockChainReaderMockRecorder) GetHeader(hash, number any) *MockChainReaderGetHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockChainReader)(nil).GetHeader), hash, number)
	return &MockChainReaderGetHeaderCall{Call: call}
}

// MockChainReaderGetHeaderCall wrap *gomock.Call
type MockChainReaderGetHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainReaderGetHeaderCall) Return(arg0 *types.Header) *MockChainReaderGetHeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainReaderGetHeaderCall) Do(f func(common.Hash, uint64) *types.Header) *MockChainReaderGetHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainReaderGetHeaderCall) DoAndReturn(f func(common.Hash, uint64) *types.Header) *MockChainReaderGetHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHeaderByHash mocks base method.
func (m *MockChainReader) GetHeaderByHash(hash common.Hash) *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByHash", hash)
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// GetHeaderByHash indicates an expected call of GetHeaderByHash.
func (mr *MockChainReaderMockRecorder) GetHeaderByHash(hash any) *MockChainReaderGetHeaderByHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByHash", reflect.TypeOf((*MockChainReader)(nil).GetHeaderByHash), hash)
	return &MockChainReaderGetHeaderByHashCall{Call: call}
}

// MockChainReaderGetHeaderByHashCall wrap *gomock.Call
type MockChainReaderGetHeaderByHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainReaderGetHeaderByHashCall) Return(arg0 *types.Header) *MockChainReaderGetHeaderByHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainReaderGetHeaderByHashCall) Do(f func(common.Hash) *types.Header) *MockChainReaderGetHeaderByHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainReaderGetHeaderByHashCall) DoAndReturn(f func(common.Hash) *types.Header) *MockChainReaderGetHeaderByHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHeaderByNumber mocks base method.
func (m *MockChainReader) GetHeaderByNumber(number uint64) *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByNumber", number)
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// GetHeaderByNumber indicates an expected call of GetHeaderByNumber.
func (mr *MockChainReaderMockRecorder) GetHeaderByNumber(number any) *MockChainReaderGetHeaderByNumberCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByNumber", reflect.TypeOf((*MockChainReader)(nil).GetHeaderByNumber), number)
	return &MockChainReaderGetHeaderByNumberCall{Call: call}
}

// MockChainReaderGetHeaderByNumberCall wrap *gomock.Call
type MockChainReaderGetHeaderByNumberCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainReaderGetHeaderByNumberCall) Return(arg0 *types.Header) *MockChainReaderGetHeaderByNumberCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainReaderGetHeaderByNumberCall) Do(f func(uint64) *types.Header) *MockChainReaderGetHeaderByNumberCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainReaderGetHeaderByNumberCall) DoAndReturn(f func(uint64) *types.Header) *MockChainReaderGetHeaderByNumberCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTd mocks base method.
func (m *MockChainReader) GetTd(hash common.Hash, number uint64) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTd", hash, number)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetTd indicates an expected call of GetTd.
func (mr *MockChainReaderMockRecorder) GetTd(hash, number any) *MockChainReaderGetTdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTd", reflect.TypeOf((*MockChainReader)(nil).GetTd), hash, number)
	return &MockChainReaderGetTdCall{Call: call}
}

// MockChainReaderGetTdCall wrap *gomock.Call
type MockChainReaderGetTdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainReaderGetTdCall) Return(arg0 *big.Int) *MockChainReaderGetTdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainReaderGetTdCall) Do(f func(common.Hash, uint64) *big.Int) *MockChainReaderGetTdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainReaderGetTdCall) DoAndReturn(f func(common.Hash, uint64) *big.Int) *MockChainReaderGetTdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasBlock mocks base method.
func (m *MockChainReader) HasBlock(hash common.Hash, number uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBlock", hash, number)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBlock indicates an expected call of HasBlock.
func (mr *MockChainReaderMockRecorder) HasBlock(hash, number any) *MockChainReaderHasBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBlock", reflect.TypeOf((*MockChainReader)(nil).HasBlock), hash, number)
	return &MockChainReaderHasBlockCall{Call: call}
}

// MockChainReaderHasBlockCall wrap *gomock.Call
type MockChainReaderHasBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChainReaderHasBlockCall) Return(arg0 bool) *MockChainReaderHasBlockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChainReaderHasBlockCall) Do(f func(common.Hash, uint64) bool) *MockChainReaderHasBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChainReaderHasBlockCall) DoAndReturn(f func(common.Hash, uint64) bool) *MockChainReaderHasBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
