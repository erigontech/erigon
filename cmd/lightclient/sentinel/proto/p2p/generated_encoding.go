// Code generated by fastssz. DO NOT EDIT.
// Hash: e94e5bf98f6a39fabdbe30f1e1e40c51c46921833a0f600cf8cd527e587ca2ad
// Version: 0.1.2
package p2p

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the BeaconBlockHeader object
func (b *BeaconBlockHeader) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconBlockHeader object to a target array
func (b *BeaconBlockHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(b.Slot))

	// Field (1) 'ProposerIndex'
	dst = append(dst, b.ProposerIndex[:]...)

	// Field (2) 'ParentRoot'
	dst = append(dst, b.ParentRoot[:]...)

	// Field (3) 'StateRoot'
	dst = append(dst, b.StateRoot[:]...)

	// Field (4) 'BodyRoot'
	dst = append(dst, b.BodyRoot[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconBlockHeader object
func (b *BeaconBlockHeader) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 136 {
		return ssz.ErrSize
	}

	// Field (0) 'Slot'
	b.Slot = Slot(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'ProposerIndex'
	copy(b.ProposerIndex[:], buf[8:40])

	// Field (2) 'ParentRoot'
	copy(b.ParentRoot[:], buf[40:72])

	// Field (3) 'StateRoot'
	copy(b.StateRoot[:], buf[72:104])

	// Field (4) 'BodyRoot'
	copy(b.BodyRoot[:], buf[104:136])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconBlockHeader object
func (b *BeaconBlockHeader) SizeSSZ() (size int) {
	size = 136
	return
}

// HashTreeRoot ssz hashes the BeaconBlockHeader object
func (b *BeaconBlockHeader) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconBlockHeader object with a hasher
func (b *BeaconBlockHeader) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(uint64(b.Slot))

	// Field (1) 'ProposerIndex'
	hh.PutBytes(b.ProposerIndex[:])

	// Field (2) 'ParentRoot'
	hh.PutBytes(b.ParentRoot[:])

	// Field (3) 'StateRoot'
	hh.PutBytes(b.StateRoot[:])

	// Field (4) 'BodyRoot'
	hh.PutBytes(b.BodyRoot[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BeaconBlockHeader object
func (b *BeaconBlockHeader) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}

// MarshalSSZ ssz marshals the ENRForkID object
func (e *ENRForkID) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ENRForkID object to a target array
func (e *ENRForkID) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'CurrentForkDigest'
	if size := len(e.CurrentForkDigest); size != 4 {
		err = ssz.ErrBytesLengthFn("ENRForkID.CurrentForkDigest", size, 4)
		return
	}
	dst = append(dst, e.CurrentForkDigest...)

	// Field (1) 'NextForkVersion'
	if size := len(e.NextForkVersion); size != 4 {
		err = ssz.ErrBytesLengthFn("ENRForkID.NextForkVersion", size, 4)
		return
	}
	dst = append(dst, e.NextForkVersion...)

	// Field (2) 'NextForkEpoch'
	dst = ssz.MarshalUint64(dst, uint64(e.NextForkEpoch))

	return
}

// UnmarshalSSZ ssz unmarshals the ENRForkID object
func (e *ENRForkID) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 16 {
		return ssz.ErrSize
	}

	// Field (0) 'CurrentForkDigest'
	if cap(e.CurrentForkDigest) == 0 {
		e.CurrentForkDigest = make([]byte, 0, len(buf[0:4]))
	}
	e.CurrentForkDigest = append(e.CurrentForkDigest, buf[0:4]...)

	// Field (1) 'NextForkVersion'
	if cap(e.NextForkVersion) == 0 {
		e.NextForkVersion = make([]byte, 0, len(buf[4:8]))
	}
	e.NextForkVersion = append(e.NextForkVersion, buf[4:8]...)

	// Field (2) 'NextForkEpoch'
	e.NextForkEpoch = Epoch(ssz.UnmarshallUint64(buf[8:16]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ENRForkID object
func (e *ENRForkID) SizeSSZ() (size int) {
	size = 16
	return
}

// HashTreeRoot ssz hashes the ENRForkID object
func (e *ENRForkID) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ENRForkID object with a hasher
func (e *ENRForkID) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'CurrentForkDigest'
	if size := len(e.CurrentForkDigest); size != 4 {
		err = ssz.ErrBytesLengthFn("ENRForkID.CurrentForkDigest", size, 4)
		return
	}
	hh.PutBytes(e.CurrentForkDigest)

	// Field (1) 'NextForkVersion'
	if size := len(e.NextForkVersion); size != 4 {
		err = ssz.ErrBytesLengthFn("ENRForkID.NextForkVersion", size, 4)
		return
	}
	hh.PutBytes(e.NextForkVersion)

	// Field (2) 'NextForkEpoch'
	hh.PutUint64(uint64(e.NextForkEpoch))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ENRForkID object
func (e *ENRForkID) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the Goodbye object
func (g *Goodbye) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(g)
}

// MarshalSSZTo ssz marshals the Goodbye object to a target array
func (g *Goodbye) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Reason'
	dst = ssz.MarshalUint64(dst, g.Reason)

	return
}

// UnmarshalSSZ ssz unmarshals the Goodbye object
func (g *Goodbye) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 8 {
		return ssz.ErrSize
	}

	// Field (0) 'Reason'
	g.Reason = ssz.UnmarshallUint64(buf[0:8])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Goodbye object
func (g *Goodbye) SizeSSZ() (size int) {
	size = 8
	return
}

// HashTreeRoot ssz hashes the Goodbye object
func (g *Goodbye) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(g)
}

// HashTreeRootWith ssz hashes the Goodbye object with a hasher
func (g *Goodbye) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Reason'
	hh.PutUint64(g.Reason)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Goodbye object
func (g *Goodbye) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(g)
}

// MarshalSSZ ssz marshals the LightClientBootstrap object
func (l *LightClientBootstrap) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the LightClientBootstrap object to a target array
func (l *LightClientBootstrap) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(24764)

	// Field (0) 'Header'
	if dst, err = l.Header.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'CurrentSyncCommittee'
	if dst, err = l.CurrentSyncCommittee.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (2) 'CurrentSyncCommitteeBranch'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(l.CurrentSyncCommitteeBranch) * 32

	// Field (2) 'CurrentSyncCommitteeBranch'
	if size := len(l.CurrentSyncCommitteeBranch); size > 5 {
		err = ssz.ErrListTooBigFn("LightClientBootstrap.CurrentSyncCommitteeBranch", size, 5)
		return
	}
	for ii := 0; ii < len(l.CurrentSyncCommitteeBranch); ii++ {
		dst = append(dst, l.CurrentSyncCommitteeBranch[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the LightClientBootstrap object
func (l *LightClientBootstrap) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 24764 {
		return ssz.ErrSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'Header'
	if err = l.Header.UnmarshalSSZ(buf[0:136]); err != nil {
		return err
	}

	// Field (1) 'CurrentSyncCommittee'
	if err = l.CurrentSyncCommittee.UnmarshalSSZ(buf[136:24760]); err != nil {
		return err
	}

	// Offset (2) 'CurrentSyncCommitteeBranch'
	if o2 = ssz.ReadOffset(buf[24760:24764]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 < 24764 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'CurrentSyncCommitteeBranch'
	{
		buf = tail[o2:]
		num, err := ssz.DivideInt2(len(buf), 32, 5)
		if err != nil {
			return err
		}
		l.CurrentSyncCommitteeBranch = make([][32]byte, num)
		for ii := 0; ii < num; ii++ {
			copy(l.CurrentSyncCommitteeBranch[ii][:], buf[ii*32:(ii+1)*32])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the LightClientBootstrap object
func (l *LightClientBootstrap) SizeSSZ() (size int) {
	size = 24764

	// Field (2) 'CurrentSyncCommitteeBranch'
	size += len(l.CurrentSyncCommitteeBranch) * 32

	return
}

// HashTreeRoot ssz hashes the LightClientBootstrap object
func (l *LightClientBootstrap) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the LightClientBootstrap object with a hasher
func (l *LightClientBootstrap) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Header'
	if err = l.Header.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'CurrentSyncCommittee'
	if err = l.CurrentSyncCommittee.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'CurrentSyncCommitteeBranch'
	{
		if size := len(l.CurrentSyncCommitteeBranch); size > 5 {
			err = ssz.ErrListTooBigFn("LightClientBootstrap.CurrentSyncCommitteeBranch", size, 5)
			return
		}
		subIndx := hh.Index()
		for _, i := range l.CurrentSyncCommitteeBranch {
			hh.Append(i[:])
		}
		numItems := uint64(len(l.CurrentSyncCommitteeBranch))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(5, numItems, 32))
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the LightClientBootstrap object
func (l *LightClientBootstrap) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}

// MarshalSSZ ssz marshals the LightClientFinalityUpdate object
func (l *LightClientFinalityUpdate) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the LightClientFinalityUpdate object to a target array
func (l *LightClientFinalityUpdate) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(444)

	// Field (0) 'AttestedHeader'
	if dst, err = l.AttestedHeader.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'FinalizedHeader'
	if dst, err = l.FinalizedHeader.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (2) 'FinalityBranch'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(l.FinalityBranch) * 32

	// Field (3) 'SyncAggregate'
	if dst, err = l.SyncAggregate.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'SignatureSlot'
	dst = ssz.MarshalUint64(dst, uint64(l.SignatureSlot))

	// Field (2) 'FinalityBranch'
	if size := len(l.FinalityBranch); size > 6 {
		err = ssz.ErrListTooBigFn("LightClientFinalityUpdate.FinalityBranch", size, 6)
		return
	}
	for ii := 0; ii < len(l.FinalityBranch); ii++ {
		dst = append(dst, l.FinalityBranch[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the LightClientFinalityUpdate object
func (l *LightClientFinalityUpdate) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 444 {
		return ssz.ErrSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'AttestedHeader'
	if err = l.AttestedHeader.UnmarshalSSZ(buf[0:136]); err != nil {
		return err
	}

	// Field (1) 'FinalizedHeader'
	if err = l.FinalizedHeader.UnmarshalSSZ(buf[136:272]); err != nil {
		return err
	}

	// Offset (2) 'FinalityBranch'
	if o2 = ssz.ReadOffset(buf[272:276]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 < 444 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (3) 'SyncAggregate'
	if err = l.SyncAggregate.UnmarshalSSZ(buf[276:436]); err != nil {
		return err
	}

	// Field (4) 'SignatureSlot'
	l.SignatureSlot = Slot(ssz.UnmarshallUint64(buf[436:444]))

	// Field (2) 'FinalityBranch'
	{
		buf = tail[o2:]
		num, err := ssz.DivideInt2(len(buf), 32, 6)
		if err != nil {
			return err
		}
		l.FinalityBranch = make([][32]byte, num)
		for ii := 0; ii < num; ii++ {
			copy(l.FinalityBranch[ii][:], buf[ii*32:(ii+1)*32])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the LightClientFinalityUpdate object
func (l *LightClientFinalityUpdate) SizeSSZ() (size int) {
	size = 444

	// Field (2) 'FinalityBranch'
	size += len(l.FinalityBranch) * 32

	return
}

// HashTreeRoot ssz hashes the LightClientFinalityUpdate object
func (l *LightClientFinalityUpdate) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the LightClientFinalityUpdate object with a hasher
func (l *LightClientFinalityUpdate) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'AttestedHeader'
	if err = l.AttestedHeader.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'FinalizedHeader'
	if err = l.FinalizedHeader.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'FinalityBranch'
	{
		if size := len(l.FinalityBranch); size > 6 {
			err = ssz.ErrListTooBigFn("LightClientFinalityUpdate.FinalityBranch", size, 6)
			return
		}
		subIndx := hh.Index()
		for _, i := range l.FinalityBranch {
			hh.Append(i[:])
		}
		numItems := uint64(len(l.FinalityBranch))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(6, numItems, 32))
	}

	// Field (3) 'SyncAggregate'
	if err = l.SyncAggregate.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'SignatureSlot'
	hh.PutUint64(uint64(l.SignatureSlot))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the LightClientFinalityUpdate object
func (l *LightClientFinalityUpdate) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}

// MarshalSSZ ssz marshals the LightClientOptimisticUpdate object
func (l *LightClientOptimisticUpdate) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the LightClientOptimisticUpdate object to a target array
func (l *LightClientOptimisticUpdate) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'AttestedHeader'
	if dst, err = l.AttestedHeader.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'SyncAggregate'
	if dst, err = l.SyncAggregate.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'SignatureSlot'
	dst = ssz.MarshalUint64(dst, uint64(l.SignatureSlot))

	return
}

// UnmarshalSSZ ssz unmarshals the LightClientOptimisticUpdate object
func (l *LightClientOptimisticUpdate) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 304 {
		return ssz.ErrSize
	}

	// Field (0) 'AttestedHeader'
	if err = l.AttestedHeader.UnmarshalSSZ(buf[0:136]); err != nil {
		return err
	}

	// Field (1) 'SyncAggregate'
	if err = l.SyncAggregate.UnmarshalSSZ(buf[136:296]); err != nil {
		return err
	}

	// Field (2) 'SignatureSlot'
	l.SignatureSlot = Slot(ssz.UnmarshallUint64(buf[296:304]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the LightClientOptimisticUpdate object
func (l *LightClientOptimisticUpdate) SizeSSZ() (size int) {
	size = 304
	return
}

// HashTreeRoot ssz hashes the LightClientOptimisticUpdate object
func (l *LightClientOptimisticUpdate) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the LightClientOptimisticUpdate object with a hasher
func (l *LightClientOptimisticUpdate) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'AttestedHeader'
	if err = l.AttestedHeader.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'SyncAggregate'
	if err = l.SyncAggregate.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'SignatureSlot'
	hh.PutUint64(uint64(l.SignatureSlot))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the LightClientOptimisticUpdate object
func (l *LightClientOptimisticUpdate) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}

// MarshalSSZ ssz marshals the LightClientUpdate object
func (l *LightClientUpdate) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the LightClientUpdate object to a target array
func (l *LightClientUpdate) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(25072)

	// Field (0) 'AttestedHeader'
	if dst, err = l.AttestedHeader.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'NextSyncCommittee'
	if dst, err = l.NextSyncCommittee.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (2) 'NextSyncCommitteeBranch'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(l.NextSyncCommitteeBranch) * 32

	// Field (3) 'FinalizedHeader'
	if dst, err = l.FinalizedHeader.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (4) 'FinalityBranch'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(l.FinalityBranch) * 32

	// Field (5) 'SyncAggregate'
	if dst, err = l.SyncAggregate.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (6) 'SignatureSlot'
	dst = ssz.MarshalUint64(dst, uint64(l.SignatureSlot))

	// Field (2) 'NextSyncCommitteeBranch'
	if size := len(l.NextSyncCommitteeBranch); size > 5 {
		err = ssz.ErrListTooBigFn("LightClientUpdate.NextSyncCommitteeBranch", size, 5)
		return
	}
	for ii := 0; ii < len(l.NextSyncCommitteeBranch); ii++ {
		dst = append(dst, l.NextSyncCommitteeBranch[ii][:]...)
	}

	// Field (4) 'FinalityBranch'
	if size := len(l.FinalityBranch); size > 6 {
		err = ssz.ErrListTooBigFn("LightClientUpdate.FinalityBranch", size, 6)
		return
	}
	for ii := 0; ii < len(l.FinalityBranch); ii++ {
		dst = append(dst, l.FinalityBranch[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the LightClientUpdate object
func (l *LightClientUpdate) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 25072 {
		return ssz.ErrSize
	}

	tail := buf
	var o2, o4 uint64

	// Field (0) 'AttestedHeader'
	if err = l.AttestedHeader.UnmarshalSSZ(buf[0:136]); err != nil {
		return err
	}

	// Field (1) 'NextSyncCommittee'
	if err = l.NextSyncCommittee.UnmarshalSSZ(buf[136:24760]); err != nil {
		return err
	}

	// Offset (2) 'NextSyncCommitteeBranch'
	if o2 = ssz.ReadOffset(buf[24760:24764]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 < 25072 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (3) 'FinalizedHeader'
	if err = l.FinalizedHeader.UnmarshalSSZ(buf[24764:24900]); err != nil {
		return err
	}

	// Offset (4) 'FinalityBranch'
	if o4 = ssz.ReadOffset(buf[24900:24904]); o4 > size || o2 > o4 {
		return ssz.ErrOffset
	}

	// Field (5) 'SyncAggregate'
	if err = l.SyncAggregate.UnmarshalSSZ(buf[24904:25064]); err != nil {
		return err
	}

	// Field (6) 'SignatureSlot'
	l.SignatureSlot = Slot(ssz.UnmarshallUint64(buf[25064:25072]))

	// Field (2) 'NextSyncCommitteeBranch'
	{
		buf = tail[o2:o4]
		num, err := ssz.DivideInt2(len(buf), 32, 5)
		if err != nil {
			return err
		}
		l.NextSyncCommitteeBranch = make([][32]byte, num)
		for ii := 0; ii < num; ii++ {
			copy(l.NextSyncCommitteeBranch[ii][:], buf[ii*32:(ii+1)*32])
		}
	}

	// Field (4) 'FinalityBranch'
	{
		buf = tail[o4:]
		num, err := ssz.DivideInt2(len(buf), 32, 6)
		if err != nil {
			return err
		}
		l.FinalityBranch = make([][32]byte, num)
		for ii := 0; ii < num; ii++ {
			copy(l.FinalityBranch[ii][:], buf[ii*32:(ii+1)*32])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the LightClientUpdate object
func (l *LightClientUpdate) SizeSSZ() (size int) {
	size = 25072

	// Field (2) 'NextSyncCommitteeBranch'
	size += len(l.NextSyncCommitteeBranch) * 32

	// Field (4) 'FinalityBranch'
	size += len(l.FinalityBranch) * 32

	return
}

// HashTreeRoot ssz hashes the LightClientUpdate object
func (l *LightClientUpdate) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the LightClientUpdate object with a hasher
func (l *LightClientUpdate) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'AttestedHeader'
	if err = l.AttestedHeader.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'NextSyncCommittee'
	if err = l.NextSyncCommittee.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'NextSyncCommitteeBranch'
	{
		if size := len(l.NextSyncCommitteeBranch); size > 5 {
			err = ssz.ErrListTooBigFn("LightClientUpdate.NextSyncCommitteeBranch", size, 5)
			return
		}
		subIndx := hh.Index()
		for _, i := range l.NextSyncCommitteeBranch {
			hh.Append(i[:])
		}
		numItems := uint64(len(l.NextSyncCommitteeBranch))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(5, numItems, 32))
	}

	// Field (3) 'FinalizedHeader'
	if err = l.FinalizedHeader.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'FinalityBranch'
	{
		if size := len(l.FinalityBranch); size > 6 {
			err = ssz.ErrListTooBigFn("LightClientUpdate.FinalityBranch", size, 6)
			return
		}
		subIndx := hh.Index()
		for _, i := range l.FinalityBranch {
			hh.Append(i[:])
		}
		numItems := uint64(len(l.FinalityBranch))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(6, numItems, 32))
	}

	// Field (5) 'SyncAggregate'
	if err = l.SyncAggregate.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (6) 'SignatureSlot'
	hh.PutUint64(uint64(l.SignatureSlot))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the LightClientUpdate object
func (l *LightClientUpdate) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}

// MarshalSSZ ssz marshals the MetaDataV1 object
func (m *MetaDataV1) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MetaDataV1 object to a target array
func (m *MetaDataV1) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'SeqNumber'
	dst = ssz.MarshalUint64(dst, m.SeqNumber)

	// Field (1) 'Attnets'
	dst = ssz.MarshalUint64(dst, uint64(m.Attnets))

	// Field (2) 'Syncnets'
	dst = ssz.MarshalUint64(dst, uint64(m.Syncnets))

	return
}

// UnmarshalSSZ ssz unmarshals the MetaDataV1 object
func (m *MetaDataV1) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 24 {
		return ssz.ErrSize
	}

	// Field (0) 'SeqNumber'
	m.SeqNumber = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Attnets'
	m.Attnets = Bitvector64(ssz.UnmarshallUint64(buf[8:16]))

	// Field (2) 'Syncnets'
	m.Syncnets = Bitvector64(ssz.UnmarshallUint64(buf[16:24]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MetaDataV1 object
func (m *MetaDataV1) SizeSSZ() (size int) {
	size = 24
	return
}

// HashTreeRoot ssz hashes the MetaDataV1 object
func (m *MetaDataV1) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the MetaDataV1 object with a hasher
func (m *MetaDataV1) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'SeqNumber'
	hh.PutUint64(m.SeqNumber)

	// Field (1) 'Attnets'
	hh.PutUint64(uint64(m.Attnets))

	// Field (2) 'Syncnets'
	hh.PutUint64(uint64(m.Syncnets))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the MetaDataV1 object
func (m *MetaDataV1) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(m)
}

// MarshalSSZ ssz marshals the MetadataV0 object
func (m *MetadataV0) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MetadataV0 object to a target array
func (m *MetadataV0) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'SeqNumber'
	dst = ssz.MarshalUint64(dst, m.SeqNumber)

	// Field (1) 'Attnets'
	dst = ssz.MarshalUint64(dst, uint64(m.Attnets))

	return
}

// UnmarshalSSZ ssz unmarshals the MetadataV0 object
func (m *MetadataV0) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 16 {
		return ssz.ErrSize
	}

	// Field (0) 'SeqNumber'
	m.SeqNumber = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Attnets'
	m.Attnets = Bitvector64(ssz.UnmarshallUint64(buf[8:16]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MetadataV0 object
func (m *MetadataV0) SizeSSZ() (size int) {
	size = 16
	return
}

// HashTreeRoot ssz hashes the MetadataV0 object
func (m *MetadataV0) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the MetadataV0 object with a hasher
func (m *MetadataV0) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'SeqNumber'
	hh.PutUint64(m.SeqNumber)

	// Field (1) 'Attnets'
	hh.PutUint64(uint64(m.Attnets))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the MetadataV0 object
func (m *MetadataV0) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(m)
}

// MarshalSSZ ssz marshals the Ping object
func (p *Ping) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the Ping object to a target array
func (p *Ping) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Id'
	dst = ssz.MarshalUint64(dst, p.Id)

	return
}

// UnmarshalSSZ ssz unmarshals the Ping object
func (p *Ping) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 8 {
		return ssz.ErrSize
	}

	// Field (0) 'Id'
	p.Id = ssz.UnmarshallUint64(buf[0:8])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Ping object
func (p *Ping) SizeSSZ() (size int) {
	size = 8
	return
}

// HashTreeRoot ssz hashes the Ping object
func (p *Ping) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the Ping object with a hasher
func (p *Ping) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Id'
	hh.PutUint64(p.Id)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Ping object
func (p *Ping) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}

// MarshalSSZ ssz marshals the SingleRoot object
func (s *SingleRoot) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SingleRoot object to a target array
func (s *SingleRoot) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Root'
	dst = append(dst, s.Root[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the SingleRoot object
func (s *SingleRoot) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 32 {
		return ssz.ErrSize
	}

	// Field (0) 'Root'
	copy(s.Root[:], buf[0:32])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SingleRoot object
func (s *SingleRoot) SizeSSZ() (size int) {
	size = 32
	return
}

// HashTreeRoot ssz hashes the SingleRoot object
func (s *SingleRoot) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SingleRoot object with a hasher
func (s *SingleRoot) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Root'
	hh.PutBytes(s.Root[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SingleRoot object
func (s *SingleRoot) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}

// MarshalSSZ ssz marshals the Status object
func (s *Status) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the Status object to a target array
func (s *Status) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ForkDigest'
	if size := len(s.ForkDigest); size != 4 {
		err = ssz.ErrBytesLengthFn("Status.ForkDigest", size, 4)
		return
	}
	dst = append(dst, s.ForkDigest...)

	// Field (1) 'FinalizedRoot'
	if size := len(s.FinalizedRoot); size != 32 {
		err = ssz.ErrBytesLengthFn("Status.FinalizedRoot", size, 32)
		return
	}
	dst = append(dst, s.FinalizedRoot...)

	// Field (2) 'FinalizedEpoch'
	dst = ssz.MarshalUint64(dst, uint64(s.FinalizedEpoch))

	// Field (3) 'HeadRoot'
	if size := len(s.HeadRoot); size != 32 {
		err = ssz.ErrBytesLengthFn("Status.HeadRoot", size, 32)
		return
	}
	dst = append(dst, s.HeadRoot...)

	// Field (4) 'HeadSlot'
	dst = ssz.MarshalUint64(dst, uint64(s.HeadSlot))

	return
}

// UnmarshalSSZ ssz unmarshals the Status object
func (s *Status) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 84 {
		return ssz.ErrSize
	}

	// Field (0) 'ForkDigest'
	if cap(s.ForkDigest) == 0 {
		s.ForkDigest = make([]byte, 0, len(buf[0:4]))
	}
	s.ForkDigest = append(s.ForkDigest, buf[0:4]...)

	// Field (1) 'FinalizedRoot'
	if cap(s.FinalizedRoot) == 0 {
		s.FinalizedRoot = make([]byte, 0, len(buf[4:36]))
	}
	s.FinalizedRoot = append(s.FinalizedRoot, buf[4:36]...)

	// Field (2) 'FinalizedEpoch'
	s.FinalizedEpoch = Epoch(ssz.UnmarshallUint64(buf[36:44]))

	// Field (3) 'HeadRoot'
	if cap(s.HeadRoot) == 0 {
		s.HeadRoot = make([]byte, 0, len(buf[44:76]))
	}
	s.HeadRoot = append(s.HeadRoot, buf[44:76]...)

	// Field (4) 'HeadSlot'
	s.HeadSlot = Slot(ssz.UnmarshallUint64(buf[76:84]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Status object
func (s *Status) SizeSSZ() (size int) {
	size = 84
	return
}

// HashTreeRoot ssz hashes the Status object
func (s *Status) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the Status object with a hasher
func (s *Status) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ForkDigest'
	if size := len(s.ForkDigest); size != 4 {
		err = ssz.ErrBytesLengthFn("Status.ForkDigest", size, 4)
		return
	}
	hh.PutBytes(s.ForkDigest)

	// Field (1) 'FinalizedRoot'
	if size := len(s.FinalizedRoot); size != 32 {
		err = ssz.ErrBytesLengthFn("Status.FinalizedRoot", size, 32)
		return
	}
	hh.PutBytes(s.FinalizedRoot)

	// Field (2) 'FinalizedEpoch'
	hh.PutUint64(uint64(s.FinalizedEpoch))

	// Field (3) 'HeadRoot'
	if size := len(s.HeadRoot); size != 32 {
		err = ssz.ErrBytesLengthFn("Status.HeadRoot", size, 32)
		return
	}
	hh.PutBytes(s.HeadRoot)

	// Field (4) 'HeadSlot'
	hh.PutUint64(uint64(s.HeadSlot))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Status object
func (s *Status) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}

// MarshalSSZ ssz marshals the SyncAggregate object
func (s *SyncAggregate) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SyncAggregate object to a target array
func (s *SyncAggregate) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'SyncCommiteeBits'
	dst = append(dst, s.SyncCommiteeBits[:]...)

	// Field (1) 'SyncCommiteeSignature'
	dst = append(dst, s.SyncCommiteeSignature[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the SyncAggregate object
func (s *SyncAggregate) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 160 {
		return ssz.ErrSize
	}

	// Field (0) 'SyncCommiteeBits'
	copy(s.SyncCommiteeBits[:], buf[0:64])

	// Field (1) 'SyncCommiteeSignature'
	copy(s.SyncCommiteeSignature[:], buf[64:160])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SyncAggregate object
func (s *SyncAggregate) SizeSSZ() (size int) {
	size = 160
	return
}

// HashTreeRoot ssz hashes the SyncAggregate object
func (s *SyncAggregate) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SyncAggregate object with a hasher
func (s *SyncAggregate) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'SyncCommiteeBits'
	hh.PutBytes(s.SyncCommiteeBits[:])

	// Field (1) 'SyncCommiteeSignature'
	hh.PutBytes(s.SyncCommiteeSignature[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SyncAggregate object
func (s *SyncAggregate) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}

// MarshalSSZ ssz marshals the SyncCommittee object
func (s *SyncCommittee) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SyncCommittee object to a target array
func (s *SyncCommittee) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'PubKeys'
	for ii := 0; ii < 512; ii++ {
		dst = append(dst, s.PubKeys[ii][:]...)
	}

	// Field (1) 'AggregatePubKey'
	dst = append(dst, s.AggregatePubKey[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the SyncCommittee object
func (s *SyncCommittee) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 24624 {
		return ssz.ErrSize
	}

	// Field (0) 'PubKeys'

	for ii := 0; ii < 512; ii++ {
		copy(s.PubKeys[ii][:], buf[0:24576][ii*48:(ii+1)*48])
	}

	// Field (1) 'AggregatePubKey'
	copy(s.AggregatePubKey[:], buf[24576:24624])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SyncCommittee object
func (s *SyncCommittee) SizeSSZ() (size int) {
	size = 24624
	return
}

// HashTreeRoot ssz hashes the SyncCommittee object
func (s *SyncCommittee) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SyncCommittee object with a hasher
func (s *SyncCommittee) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'PubKeys'
	{
		subIndx := hh.Index()
		for _, i := range s.PubKeys {
			hh.PutBytes(i[:])
		}
		hh.Merkleize(subIndx)
	}

	// Field (1) 'AggregatePubKey'
	hh.PutBytes(s.AggregatePubKey[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SyncCommittee object
func (s *SyncCommittee) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
