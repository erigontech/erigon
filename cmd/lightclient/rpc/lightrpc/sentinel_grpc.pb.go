// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lightrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SentinelClient is the client API for Sentinel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SentinelClient interface {
	SubscribeGossip(ctx context.Context, in *GossipRequest, opts ...grpc.CallOption) (Sentinel_SubscribeGossipClient, error)
}

type sentinelClient struct {
	cc grpc.ClientConnInterface
}

func NewSentinelClient(cc grpc.ClientConnInterface) SentinelClient {
	return &sentinelClient{cc}
}

func (c *sentinelClient) SubscribeGossip(ctx context.Context, in *GossipRequest, opts ...grpc.CallOption) (Sentinel_SubscribeGossipClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sentinel_ServiceDesc.Streams[0], "/lightrpc.Sentinel/SubscribeGossip", opts...)
	if err != nil {
		return nil, err
	}
	x := &sentinelSubscribeGossipClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sentinel_SubscribeGossipClient interface {
	Recv() (*GossipData, error)
	grpc.ClientStream
}

type sentinelSubscribeGossipClient struct {
	grpc.ClientStream
}

func (x *sentinelSubscribeGossipClient) Recv() (*GossipData, error) {
	m := new(GossipData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SentinelServer is the server API for Sentinel service.
// All implementations must embed UnimplementedSentinelServer
// for forward compatibility
type SentinelServer interface {
	SubscribeGossip(*GossipRequest, Sentinel_SubscribeGossipServer) error
	mustEmbedUnimplementedSentinelServer()
}

// UnimplementedSentinelServer must be embedded to have forward compatible implementations.
type UnimplementedSentinelServer struct {
}

func (UnimplementedSentinelServer) SubscribeGossip(*GossipRequest, Sentinel_SubscribeGossipServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeGossip not implemented")
}
func (UnimplementedSentinelServer) mustEmbedUnimplementedSentinelServer() {}

// UnsafeSentinelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SentinelServer will
// result in compilation errors.
type UnsafeSentinelServer interface {
	mustEmbedUnimplementedSentinelServer()
}

func RegisterSentinelServer(s grpc.ServiceRegistrar, srv SentinelServer) {
	s.RegisterService(&Sentinel_ServiceDesc, srv)
}

func _Sentinel_SubscribeGossip_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GossipRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SentinelServer).SubscribeGossip(m, &sentinelSubscribeGossipServer{stream})
}

type Sentinel_SubscribeGossipServer interface {
	Send(*GossipData) error
	grpc.ServerStream
}

type sentinelSubscribeGossipServer struct {
	grpc.ServerStream
}

func (x *sentinelSubscribeGossipServer) Send(m *GossipData) error {
	return x.ServerStream.SendMsg(m)
}

// Sentinel_ServiceDesc is the grpc.ServiceDesc for Sentinel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sentinel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lightrpc.Sentinel",
	HandlerType: (*SentinelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeGossip",
			Handler:       _Sentinel_SubscribeGossip_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sentinel.proto",
}
