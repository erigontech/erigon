{
  "info": {
    "_postman_id": "72c52f91-c09d-4af6-abb4-162b9c5532b2",
    "name": "RPC_Testing",
    "description": "A collection holding all the Ethereum JSON RPC API calls",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "web3",
      "item": [
        {
          "name": "clientVersion",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6c4da7d1-aa83-40f8-bdad-b68cb42415a4",
                "exec": [
                  "pm.test('Has correct result', function() {",
                  "  const jsonData = pm.response.json();",
                  "  var messages = {",
                  "    '{{NETHERMIND}}': 'Nethermind',",
                  "    '{{ERIGON}}': 'Erigon',",
                  "    '{{SILKRPC}}': 'Erigon',",
                  "    '{{PARITY}}': 'Parity-Ethereum',",
                  "  }",
                  "  var parts = jsonData.result.split('/');",
                  "  pm.expect(parts[0]).to.deep.equals(messages[pm.environment.get('HOST')]);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"web3_clientVersion\",\n    \"params\": [],\n    \"id\": \"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns the current client version.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nSTRING - The current client version string including node name and version"
          },
          "response": []
        },
        {
          "name": "sha3",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d8ebbf3d-8ae7-460a-9808-4b4b8a08d289",
                "exec": [
                  "var expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": \"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\"",
                  "}",
                  "",
                  "pm.test('Has correct result', function() {",
                  "    pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "78f0ca53-f4fe-4396-a87a-e1c81899822a",
                "exec": [""],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"web3_sha3\",\n\t\"params\":[\"0x68656c6c6f20776f726c64\"],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns Keccak-256 (not the standardized SHA3-256) of the given data.\r\n\r\n**Parameters**\r\n\r\nDATA - The data to convert into a SHA3 hash\r\n\r\n**Returns**\r\n\r\nDATA - The SHA3 result of the given input string"
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "net",
      "item": [
        {
          "name": "listening",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "322f2289-938f-4cfb-adde-3d4f0c54455e",
                "exec": [
                  "expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": true",
                  "}",
                  "",
                  "pm.test('Returns true (hardcoded)', function() {",
                  "    pm.expect(pm.response.json()).to.be.deep.equal(expected)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"net_listening\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns true if client is actively listening for network connections.\r\n\r\n**TODO**\r\n\r\nThe code currently returns a hard coded true value. Remove hard coded value.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nBoolean - true when listening, false otherwise"
          },
          "response": []
        },
        {
          "name": "version",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7d33b17-7d1d-49db-b30a-82d8c695c1d4",
                "exec": [
                  "expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": \"1\"",
                  "}",
                  "",
                  "pm.test('Returns true (hardcoded)', function() {",
                  "    pm.expect(pm.response.json()).to.be.deep.equal(expected)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"net_version\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns the current network id.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nSTRING - The current network id. One of BR  \"1\": Ethereum Mainnet BR  \"4\": Rinkeby Testnet BR  \"5\": GÃ¶rli Testnet BR"
          },
          "response": []
        },
        {
          "name": "peerCount",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "985b79fb-0c36-421d-8dcf-cc1d619a11e3",
                "exec": [
                  "expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": \"0x19\"",
                  "}",
                  "",
                  "pm.test('Returns true (hardcoded)', function() {",
                  "  expected.result = pm.response.json().result;",
                  "  pm.expect(pm.response.json()).to.be.deep.equal(expected)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"net_peerCount\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns number of peers currently connected to the client.\r\n\r\n**TODO**\r\n\r\nThis routine currently returns a hard coded value of '25'\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nQUANTITY - Integer of the number of connected peers"
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "eth",
      "item": [
        {
          "name": "blocks",
          "item": [
            {
              "name": "getBlockByNumber",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "438e5e99-267a-4a47-92f3-d7a9e675f183",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"id\": \"1\",",
                      "  \"result\": {",
                      "    \"difficulty\": \"0xb5708d578a6\",",
                      "    \"extraData\": \"0xd783010400844765746887676f312e352e31856c696e7578\",",
                      "    \"gasLimit\": \"0x2fefd8\",",
                      "    \"gasUsed\": \"0x14820\",",
                      "    \"hash\": \"0x0b4c6fb75ded4b90218cf0346b0885e442878f104e1b60bf75d5b6860eeacd53\",",
                      "    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",",
                      "    \"miner\": \"0x0c729be7c39543c3d549282a40395299d987cec2\",",
                      "    \"mixHash\": \"0x1530cda332d86d5d7462e3a0eb585e22c88348dd796d29e6ef18196a78cdce07\",",
                      "    \"nonce\": \"0x938e5630b060b7d3\",",
                      "    \"number\": \"0xf4629\",",
                      "    \"parentHash\": \"0x96810a6076e621e311a232468bfd3dcfac08f4803b255af0f00300f47981c10f\",",
                      "    \"receiptsRoot\": \"0x075608bec75d988c52ea6750f4c2204fd60082eb1df32cf8f4732e8a591eef62\",",
                      "    \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",",
                      "    \"size\": \"0x3e1\",",
                      "    \"stateRoot\": \"0xb3f9408d80048b6f206951c4e387f8da37fb8510eccc18527865fa746c47bbc5\",",
                      "    \"timestamp\": \"0x56bff9bb\",",
                      "    \"totalDifficulty\": \"0x6332227c16fd7c67\",",
                      "    \"transactions\": [",
                      "      \"0x730724cb08a6eb17bf6b3296359d261570d343ea7944a17a9d7287d77900db08\",",
                      "      \"0xef2ea39c20ba09553b2f3cf02380406ac766039ca56612937eed5e7f3503fb3a\",",
                      "      \"0x5352c80aa2073e21ce6c4aa5488c38455f3519955ece7dca5af3e326797bcc63\",",
                      "      \"0x060e4cf9fa8d34a8b423b5b3691b2541255ff7974ff16699e104edcfb63bd521\"",
                      "    ],",
                      "    \"transactionsRoot\": \"0xb779480508401ddd57f1f1e83a54715dcafc6ccec4e4d842c1b68cb418e6560d\",",
                      "    \"uncles\": []",
                      "  }",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "  var isErigon = pm.environment.get('HOST') == \"{{ERIGON}}\";",
                      "  var jsonData = pm.response.json();",
                      "  if (!isErigon) {",
                      "    delete jsonData.result.author;",
                      "    delete jsonData.result.sealFields;",
                      "  }",
                      "  pm.expect(jsonData).to.be.deep.equal(expected);",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getBlockByNumber\",\n\t\"params\":[\n\t\t\"0xf4629\", \n\t\tfalse\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns information about a block given the block's number.\r\n\r\n**Parameters**\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\nBoolean - If true it returns the full transaction objects, if false only the hashes of the transactions\r\n\r\n**Returns**\r\n\r\nObject - An object of type Block defined as:\r\n\r\nnumber: QUANTITY - The block number or null when pending\r\n\r\nhash: DATA, 32 Bytes - Hash of the block or null when pending\r\n\r\nparentHash: DATA, 32 Bytes - Hash of the parent block\r\n\r\nnonce: DATA, 8 bytes - Hash of the proof of work or null when pending\r\n\r\nsha3Uncles: DATA, 32 Bytes - SHA3 of the uncles data in the block\r\n\r\nlogsBloom: DATA, 256 Bytes - The bloom filter for the block's logs or null when pending\r\n\r\ntransactionsRoot: DATA, 32 Bytes - The root of the transaction trie of the block\r\n\r\nstateRoot: DATA, 32 Bytes - The root of the final state trie of the block\r\n\r\nreceiptsRoot: DATA, 32 Bytes - The root of the receipts trie of the block\r\n\r\nminer: DATA, 20 Bytes - The address of the beneficiary to whom the mining rewards were given\r\n\r\ndifficulty: QUANTITY - Integer of the difficulty for this block\r\n\r\ntotalDifficulty: QUANTITY - Integer of the total difficulty of the chain until this block\r\n\r\nextraData: DATA - The extra data field of this block\r\n\r\nsize: QUANTITY - Integer the size of this block in bytes\r\n\r\ngasLimit: QUANTITY - The maximum gas allowed in this block\r\n\r\ngasUsed: QUANTITY - The total used gas by all transactions in this block\r\n\r\ntimestamp: QUANTITY - The unix timestamp for when the block was collated\r\n\r\ntransactions: ARRAY - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter\r\n\r\nuncles: ARRAY - Array of uncle hashes\r\n\r\n"
              },
              "response": []
            },
            {
              "name": "getBlockByHash",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7c760190-bb77-4b63-bba7-93c01a72bd2a",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"id\": \"1\",",
                      "  \"result\": {",
                      "    \"difficulty\": \"0xb5708d578a6\",",
                      "    \"extraData\": \"0xd783010400844765746887676f312e352e31856c696e7578\",",
                      "    \"gasLimit\": \"0x2fefd8\",",
                      "    \"gasUsed\": \"0x14820\",",
                      "    \"hash\": \"0x0b4c6fb75ded4b90218cf0346b0885e442878f104e1b60bf75d5b6860eeacd53\",",
                      "    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",",
                      "    \"miner\": \"0x0c729be7c39543c3d549282a40395299d987cec2\",",
                      "    \"mixHash\": \"0x1530cda332d86d5d7462e3a0eb585e22c88348dd796d29e6ef18196a78cdce07\",",
                      "    \"nonce\": \"0x938e5630b060b7d3\",",
                      "    \"number\": \"0xf4629\",",
                      "    \"parentHash\": \"0x96810a6076e621e311a232468bfd3dcfac08f4803b255af0f00300f47981c10f\",",
                      "    \"receiptsRoot\": \"0x075608bec75d988c52ea6750f4c2204fd60082eb1df32cf8f4732e8a591eef62\",",
                      "    \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",",
                      "    \"size\": \"0x3e1\",",
                      "    \"stateRoot\": \"0xb3f9408d80048b6f206951c4e387f8da37fb8510eccc18527865fa746c47bbc5\",",
                      "    \"timestamp\": \"0x56bff9bb\",",
                      "    \"totalDifficulty\": \"0x6332227c16fd7c67\",",
                      "    \"transactions\": [",
                      "      \"0x730724cb08a6eb17bf6b3296359d261570d343ea7944a17a9d7287d77900db08\",",
                      "      \"0xef2ea39c20ba09553b2f3cf02380406ac766039ca56612937eed5e7f3503fb3a\",",
                      "      \"0x5352c80aa2073e21ce6c4aa5488c38455f3519955ece7dca5af3e326797bcc63\",",
                      "      \"0x060e4cf9fa8d34a8b423b5b3691b2541255ff7974ff16699e104edcfb63bd521\"",
                      "    ],",
                      "    \"transactionsRoot\": \"0xb779480508401ddd57f1f1e83a54715dcafc6ccec4e4d842c1b68cb418e6560d\",",
                      "    \"uncles\": []",
                      "  }",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "  var isErigon = pm.environment.get('HOST') == \"{{ERIGON}}\";",
                      "  var jsonData = pm.response.json();",
                      "  if (!isErigon) {",
                      "    delete jsonData.result.author;",
                      "    delete jsonData.result.sealFields;",
                      "  }",
                      "  pm.expect(jsonData).to.be.deep.equal(expected);",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getBlockByHash\",\n\t\"params\":[\n\t\t\"0x0b4c6fb75ded4b90218cf0346b0885e442878f104e1b60bf75d5b6860eeacd53\", \n\t\tfalse\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns information about a block given the block's hash.\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - Hash of a block\r\n\r\nBoolean - If true it returns the full transaction objects, if false only the hashes of the transactions\r\n\r\n**Returns**\r\n\r\nObject - An object of type Block as described at eth_getBlockByNumber, or null when no block was found"
              },
              "response": []
            },
            {
              "name": "getBlockTransactionCountByNumber",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "341676cb-5915-48b7-a2b2-146feb7b80a6",
                    "exec": [
                      "pm.test('Has correct result', function() {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.result).to.be.equals(\"0x4\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getBlockTransactionCountByNumber\",\n\t\"params\":[\n\t\t\"0xf4629\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the number of transactions in a block given the block's block number.\r\n\r\n**Parameters**\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\n**Returns**\r\n\r\nQUANTITY - Integer of the number of transactions in this block"
              },
              "response": []
            },
            {
              "name": "getBlockTransactionCountByHash",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "439ec2db-b271-4b15-8fc5-09e86aeed870",
                    "exec": [
                      "pm.test('Has correct result', function() {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.result).to.be.equals('0x4');",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getBlockTransactionCountByHash\",\n\t\"params\":[\n\t\t\"0x0b4c6fb75ded4b90218cf0346b0885e442878f104e1b60bf75d5b6860eeacd53\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the number of transactions in a block given the block's block hash.\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - hash of a block\r\n\r\n**Returns**\r\n\r\nQUANTITY - Integer of the number of transactions in this block"
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {},
          "_postman_isSubFolder": true
        },
        {
          "name": "txs",
          "item": [
            {
              "name": "getTransactionByHash",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "68b084bd-9b84-4018-bc45-e947bcf07f95",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"id\": \"1\",",
                      "  \"result\": {",
                      "    \"blockHash\": \"0x785b221ec95c66579d5ae14eebe16284a769e948359615d580f02e646e93f1d5\",",
                      "    \"blockNumber\": \"0x52a90b\",",
                      "    \"from\": \"0x11b6a5fe2906f3354145613db0d99ceb51f604c9\",",
                      "    \"gas\": \"0x6b6c\",",
                      "    \"gasPrice\": \"0x11e1a300\",",
                      "    \"hash\": \"0xb2fea9c4b24775af6990237aa90228e5e092c56bdaee74496992a53c208da1ee\",",
                      "    \"input\": \"0x80dfa34a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002e516d556558334448416654747442464a42315454384a617a67765744776a727a7342686973693473547532613551000000000000000000000000000000000000\",",
                      "    \"nonce\": \"0x10\",",
                      "    \"r\": \"0xacdf839bdcb6653da60900f739076a00ecbe0059fa046933348e9b68a62a222\",",
                      "    \"s\": \"0x132a0517a4c52916e0c6b0e74b0479326891df2a9afd711482c7f3919b335ff6\",",
                      "    \"to\": \"0xfa28ec7198028438514b49a3cf353bca5541ce1d\",",
                      "    \"transactionIndex\": \"0x25\",",
                      "    \"v\": \"0x26\",",
                      "    \"value\": \"0x0\"",
                      "  }",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "    const jsonData = pm.response.json();",
                      "    var keys = Object.keys(jsonData.result);",
                      "    keys.map(function (k) {",
                      "      var value = jsonData.result[k] ? jsonData.result[k] : null;",
                      "      var expect = expected.result[k] ? expected.result[k] : null;",
                      "      if (expect && typeof expect === 'object') {",
                      "        jsonData.result[k].map(function (value, index) {",
                      "           var expect = expected.result[k][index];",
                      "          pm.expect(value).to.be.equal(expect)",
                      "        })",
                      "      } else {",
                      "        pm.expect(value).to.be.equal(expect)",
                      "      }",
                      "    });",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getTransactionByHash\",\n\t\"params\":[\n\t\t\"0xb2fea9c4b24775af6990237aa90228e5e092c56bdaee74496992a53c208da1ee\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns information about a transaction given the transaction's hash.\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - hash of a transaction\r\n\r\n**Returns**\r\n\r\nObject - An object of type Transaction or null when no transaction was found\r\n\r\nhash: DATA, 32 Bytes - hash of the transaction\r\n\r\nnonce: QUANTITY - The number of transactions made by the sender prior to this one\r\n\r\nblockHash: DATA, 32 Bytes - hash of the block where this transaction was in. null when its pending\r\n\r\nblockNumber: QUANTITY - block number where this transaction was in. null when its pending\r\n\r\ntransactionIndex: QUANTITY - Integer of the transactions index position in the block. null when its pending\r\n\r\nfrom: DATA, 20 Bytes - address of the sender\r\n\r\nto: DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction\r\n\r\nvalue: QUANTITY - value transferred in Wei\r\n\r\ngasPrice: QUANTITY - gas price provided by the sender in Wei\r\n\r\ngas: QUANTITY - gas provided by the sender\r\n\r\ninput: DATA - The data send along with the transaction"
              },
              "response": []
            },
            {
              "name": "getTransactionByBlockHashAndIndex",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "593d73f7-fea6-4fd0-bd02-ece07971cd58",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"id\": \"1\",",
                      "  \"result\": {",
                      "    \"blockHash\": \"0x785b221ec95c66579d5ae14eebe16284a769e948359615d580f02e646e93f1d5\",",
                      "    \"blockNumber\": \"0x52a90b\",",
                      "    \"from\": \"0x11b6a5fe2906f3354145613db0d99ceb51f604c9\",",
                      "    \"gas\": \"0x6b6c\",",
                      "    \"gasPrice\": \"0x11e1a300\",",
                      "    \"hash\": \"0xb2fea9c4b24775af6990237aa90228e5e092c56bdaee74496992a53c208da1ee\",",
                      "    \"input\": \"0x80dfa34a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002e516d556558334448416654747442464a42315454384a617a67765744776a727a7342686973693473547532613551000000000000000000000000000000000000\",",
                      "    \"nonce\": \"0x10\",",
                      "    \"r\": \"0xacdf839bdcb6653da60900f739076a00ecbe0059fa046933348e9b68a62a222\",",
                      "    \"s\": \"0x132a0517a4c52916e0c6b0e74b0479326891df2a9afd711482c7f3919b335ff6\",",
                      "    \"to\": \"0xfa28ec7198028438514b49a3cf353bca5541ce1d\",",
                      "    \"transactionIndex\": \"0x25\",",
                      "    \"v\": \"0x26\",",
                      "    \"value\": \"0x0\"",
                      "  }",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "    const jsonData = pm.response.json();",
                      "    var keys = Object.keys(jsonData.result);",
                      "    keys.map(function (k) {",
                      "      var value = jsonData.result[k] ? jsonData.result[k] : null;",
                      "      var expect = expected.result[k] ? expected.result[k] : null;",
                      "      if (expect && typeof expect === 'object') {",
                      "        jsonData.result[k].map(function (value, index) {",
                      "           var expect = expected.result[k][index];",
                      "          pm.expect(value).to.be.equal(expect)",
                      "        })",
                      "      } else {",
                      "        pm.expect(value).to.be.equal(expect)",
                      "      }",
                      "    });",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getTransactionByBlockHashAndIndex\",\n\t\"params\":[\n\t\t\"0x785b221ec95c66579d5ae14eebe16284a769e948359615d580f02e646e93f1d5\", \n\t\t\"0x25\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns information about a transaction given the block's hash and a transaction index.\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - hash of a block\r\n\r\nQUANTITY - Integer of the transaction index position\r\n\r\n**Returns**\r\n\r\nObject - An object of type Transaction or null when no transaction was found. See eth_getTransactionByHash"
              },
              "response": []
            },
            {
              "name": "getTransactionByBlockNumberAndIndex",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "530d1490-3007-499c-ae23-f9fd26f1787b",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"id\": \"1\",",
                      "  \"result\": {",
                      "    \"blockHash\": \"0x785b221ec95c66579d5ae14eebe16284a769e948359615d580f02e646e93f1d5\",",
                      "    \"blockNumber\": \"0x52a90b\",",
                      "    \"from\": \"0x11b6a5fe2906f3354145613db0d99ceb51f604c9\",",
                      "    \"gas\": \"0x6b6c\",",
                      "    \"gasPrice\": \"0x11e1a300\",",
                      "    \"hash\": \"0xb2fea9c4b24775af6990237aa90228e5e092c56bdaee74496992a53c208da1ee\",",
                      "    \"input\": \"0x80dfa34a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002e516d556558334448416654747442464a42315454384a617a67765744776a727a7342686973693473547532613551000000000000000000000000000000000000\",",
                      "    \"nonce\": \"0x10\",",
                      "    \"r\": \"0xacdf839bdcb6653da60900f739076a00ecbe0059fa046933348e9b68a62a222\",",
                      "    \"s\": \"0x132a0517a4c52916e0c6b0e74b0479326891df2a9afd711482c7f3919b335ff6\",",
                      "    \"to\": \"0xfa28ec7198028438514b49a3cf353bca5541ce1d\",",
                      "    \"transactionIndex\": \"0x25\",",
                      "    \"v\": \"0x26\",",
                      "    \"value\": \"0x0\"",
                      "  }",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "    const jsonData = pm.response.json();",
                      "    var keys = Object.keys(jsonData.result);",
                      "    keys.map(function (k) {",
                      "      var value = jsonData.result[k] ? jsonData.result[k] : null;",
                      "      var expect = expected.result[k] ? expected.result[k] : null;",
                      "      if (expect && typeof expect === 'object') {",
                      "        jsonData.result[k].map(function (value, index) {",
                      "           var expect = expected.result[k][index];",
                      "          pm.expect(value).to.be.equal(expect)",
                      "        })",
                      "      } else {",
                      "        pm.expect(value).to.be.equal(expect)",
                      "      }",
                      "    });",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getTransactionByBlockNumberAndIndex\",\n\t\"params\":[\n\t\t\"0x52a90b\", \n\t\t\"0x25\"\n\t],\n\t\"id\":\"1\"\n}\n",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns information about a transaction given a block number and transaction index.\r\n\r\n**Parameters**\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\nQUANTITY - The transaction index position\r\n\r\n**Returns**\r\n\r\nObject - An object of type Transaction or null when no transaction was found. See eth_getTransactionByHash"
              },
              "response": []
            },
            {
              "name": "getTransactionReceipt",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d49e47cb-cbdf-4cc1-83e2-e0ab6b860fd3",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"id\": \"1\",",
                      "  \"result\": {",
                      "    \"blockHash\": \"0xf6084155ff2022773b22df3217d16e9df53cbc42689b27ca4789e06b6339beb2\",",
                      "    \"blockNumber\": \"0x52a975\",",
                      "    \"contractAddress\": null,",
                      "    \"cumulativeGasUsed\": \"0x797db0\",",
                      "    \"from\": \"0xd907941c8b3b966546fc408b8c942eb10a4f98df\",",
                      "    \"gasUsed\": \"0x1308c\",",
                      "    \"logs\": [",
                      "      {",
                      "        \"address\": \"0xd6df5935cd03a768b7b9e92637a01b25e24cb709\",",
                      "        \"topics\": [",
                      "          \"0x8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77\",",
                      "          \"0x000000000000000000000000d907941c8b3b966546fc408b8c942eb10a4f98df\"",
                      "        ],",
                      "        \"data\": \"0x0000000000000000000000000000000000000000000000000000008bb2c97000\",",
                      "        \"blockNumber\": \"0x52a975\",",
                      "        \"transactionHash\": \"0xa3ece39ae137617669c6933b7578b94e705e765683f260fcfe30eaa41932610f\",",
                      "        \"transactionIndex\": \"0x29\",",
                      "        \"blockHash\": \"0xf6084155ff2022773b22df3217d16e9df53cbc42689b27ca4789e06b6339beb2\",",
                      "        \"logIndex\": \"0x119\",",
                      "        \"removed\": false",
                      "      },",
                      "      {",
                      "        \"address\": \"0xd6df5935cd03a768b7b9e92637a01b25e24cb709\",",
                      "        \"topics\": [",
                      "          \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",",
                      "          \"0x0000000000000000000000000000000000000000000000000000000000000000\",",
                      "          \"0x000000000000000000000000d907941c8b3b966546fc408b8c942eb10a4f98df\"",
                      "        ],",
                      "        \"data\": \"0x0000000000000000000000000000000000000000000000000000008bb2c97000\",",
                      "        \"blockNumber\": \"0x52a975\",",
                      "        \"transactionHash\": \"0xa3ece39ae137617669c6933b7578b94e705e765683f260fcfe30eaa41932610f\",",
                      "        \"transactionIndex\": \"0x29\",",
                      "        \"blockHash\": \"0xf6084155ff2022773b22df3217d16e9df53cbc42689b27ca4789e06b6339beb2\",",
                      "        \"logIndex\": \"0x11a\",",
                      "        \"removed\": false",
                      "      }",
                      "    ],",
                      "    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000020000000000000000000800000000000000004010000010100000000000000000000000000000000000000000000000000040000080000000000000080000000000000000000000000000000000000000000020000000000000000000000002000000000000000000000000000000000000000000000000000020000000010000000000000000000000000000000000000000000000000000000000\",",
                      "    \"status\": \"0x1\",",
                      "    \"to\": \"0xd6df5935cd03a768b7b9e92637a01b25e24cb709\",",
                      "    \"transactionHash\": \"0xa3ece39ae137617669c6933b7578b94e705e765683f260fcfe30eaa41932610f\",",
                      "    \"transactionIndex\": \"0x29\"",
                      "  }",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "    const jsonData = pm.response.json();",
                      "    var keys = Object.keys(jsonData.result);",
                      "    keys.map(function (k) {",
                      "      var value = jsonData.result[k] ? jsonData.result[k] : null;",
                      "      var expect = expected.result[k] ? expected.result[k] : null;",
                      "      if (expect && typeof expect === 'object') {",
                      "        if (k !== 'logs') {",
                      "          jsonData.result[k].map(function (value, index) {",
                      "            var expect = expected.result[k][index];",
                      "            pm.expect(value).to.be.equal(expect)",
                      "          })",
                      "        }",
                      "      } else {",
                      "        pm.expect(value).to.be.equal(expect)",
                      "      }",
                      "    });",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getTransactionReceipt\",\n\t\"params\":[\n\t\t\"0xa3ece39ae137617669c6933b7578b94e705e765683f260fcfe30eaa41932610f\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the receipt of a transaction given the transaction's hash.\r\n\r\n**Note**\r\n\r\nReceipts are not available for pending transactions.\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - hash of a transaction\r\n\r\n**Returns**\r\n\r\nObject - An object of type TransactionReceipt or null when no receipt was found\r\n\r\ntransactionHash: DATA, 32 Bytes - hash of the transaction\r\n\r\ntransactionIndex: QUANTITY - Integer of the transactions index position in the block\r\n\r\nblockHash: DATA, 32 Bytes - hash of the block where this transaction was in\r\n\r\nblockNumber: QUANTITY - block number where this transaction was in\r\n\r\ncumulativeGasUsed: QUANTITY - The total amount of gas used when this transaction was executed in the block\r\n\r\ngasUsed: QUANTITY - The amount of gas used by this specific transaction alone\r\n\r\ncontractAddress: DATA, 20 Bytes - The contract address created, if the transaction was a contract creation, null otherwise\r\n\r\nlogs: Array - Array of log objects, which this transaction generated\r\n\r\nlogsBloom: DATA, 256 Bytes - Bloom filter for light clients to quickly retrieve related logs.\r\n\r\nroot: DATA 32 bytes - post-transaction stateroot (if the block is pre-Byzantium)\r\n\r\nstatus: QUANTITY - either 1 = success or 0 = failure (if block is Byzatnium or later)"
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {},
          "_postman_isSubFolder": true
        },
        {
          "name": "uncles",
          "item": [
            {
              "name": "getUncleByBlockNumberAndIndex",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bb80848b-3b1d-4d5a-8317-fe623c0be114",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"id\": \"1\",",
                      "  \"result\": {",
                      "    \"difficulty\": \"0x3ff800000\",",
                      "    \"extraData\": \"0x59617465732052616e64616c6c202d2045746865724e696e6a61\",",
                      "    \"gasLimit\": \"0x1388\",",
                      "    \"gasUsed\": \"0x0\",",
                      "    \"hash\": \"0x5cd50096dbb856a6d1befa6de8f9c20decb299f375154427d90761dc0b101109\",",
                      "    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",",
                      "    \"miner\": \"0xc8ebccc5f5689fa8659d83713341e5ad19349448\",",
                      "    \"mixHash\": \"0xf8c94dfe61cf26dcdf8cffeda337cf6a903d65c449d7691a022837f6e2d99459\",",
                      "    \"nonce\": \"0x68b769c5451a7aea\",",
                      "    \"number\": \"0x1\",",
                      "    \"parentHash\": \"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\",",
                      "    \"receiptsRoot\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",",
                      "    \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",",
                      "    \"size\": \"0x21a\",",
                      "    \"stateRoot\": \"0x1e6e030581fd1873b4784280859cd3b3c04aa85520f08c304cf5ee63d3935add\",",
                      "    \"timestamp\": \"0x55ba4242\",",
                      "    \"totalDifficulty\": \"0xffd003ffe\",",
                      "    \"transactionsRoot\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",",
                      "    \"uncles\": []",
                      "  }",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "    const jsonData = pm.response.json();",
                      "    var keys = Object.keys(jsonData.result);",
                      "    keys.map(function (k) {",
                      "      var value = jsonData.result[k] ? jsonData.result[k] : null;",
                      "      var expect = expected.result[k] ? expected.result[k] : null;",
                      "      if (expect && typeof expect === 'object') {",
                      "        jsonData.result[k].map(function (value, index) {",
                      "           var expect = expected.result[k][index];",
                      "          pm.expect(value).to.be.equal(expect)",
                      "        })",
                      "      } else {",
                      "        pm.expect(value).to.be.equal(expect)",
                      "      }",
                      "    });",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getUncleByBlockNumberAndIndex\",\n\t\"params\":[\n\t\t\"0x3\",\n\t\t\"0x0\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns information about an uncle given a block's number and the index of the uncle.\r\n\r\n**Parameters**\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\nQUANTITY - The uncle's index position\r\n\r\n**Returns**\r\n\r\nObject - An object of type Block (with zero transactions), or null when no uncle was found. See eth_getBlockByHash"
              },
              "response": []
            },
            {
              "name": "getUncleByBlockHashAndIndex",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ba8cc46-cd5d-4b26-a618-a54ddc3d86c4",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"id\": \"1\",",
                      "  \"result\": {",
                      "    \"difficulty\": \"0x3ff800000\",",
                      "    \"extraData\": \"0x59617465732052616e64616c6c202d2045746865724e696e6a61\",",
                      "    \"gasLimit\": \"0x1388\",",
                      "    \"gasUsed\": \"0x0\",",
                      "    \"hash\": \"0x5cd50096dbb856a6d1befa6de8f9c20decb299f375154427d90761dc0b101109\",",
                      "    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",",
                      "    \"miner\": \"0xc8ebccc5f5689fa8659d83713341e5ad19349448\",",
                      "    \"mixHash\": \"0xf8c94dfe61cf26dcdf8cffeda337cf6a903d65c449d7691a022837f6e2d99459\",",
                      "    \"nonce\": \"0x68b769c5451a7aea\",",
                      "    \"number\": \"0x1\",",
                      "    \"parentHash\": \"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\",",
                      "    \"receiptsRoot\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",",
                      "    \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",",
                      "    \"size\": \"0x21a\",",
                      "    \"stateRoot\": \"0x1e6e030581fd1873b4784280859cd3b3c04aa85520f08c304cf5ee63d3935add\",",
                      "    \"timestamp\": \"0x55ba4242\",",
                      "    \"totalDifficulty\": \"0xffd003ffe\",",
                      "    \"transactionsRoot\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",",
                      "    \"uncles\": []",
                      "  }",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "    const jsonData = pm.response.json();",
                      "    var keys = Object.keys(jsonData.result);",
                      "    keys.map(function (k) {",
                      "      var value = jsonData.result[k] ? jsonData.result[k] : null;",
                      "      var expect = expected.result[k] ? expected.result[k] : null;",
                      "      if (expect && typeof expect === 'object') {",
                      "        jsonData.result[k].map(function (value, index) {",
                      "           var expect = expected.result[k][index];",
                      "          pm.expect(value).to.be.equal(expect)",
                      "        })",
                      "      } else {",
                      "        pm.expect(value).to.be.equal(expect)",
                      "      }",
                      "    });",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getUncleByBlockHashAndIndex\",\n\t\"params\":[\n\t\t\"0x3d6122660cc824376f11ee842f83addc3525e2dd6756b9bcf0affa6aa88cf741\", \n\t\t\"0x0\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns information about an uncle given a block's hash and the index of the uncle.\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - Hash of the block holding the uncle\r\n\r\nQUANTITY - The uncle's index position\r\n\r\n**Returns**\r\n\r\nObject - An object of type Block (with zero transactions), or null when no uncle was found. See eth_getBlockByHash"
              },
              "response": []
            },
            {
              "name": "getUncleCountByBlockNumber",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "790ef142-b864-4ad6-a90c-7bece105c3f8",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"result\": \"0x1\",",
                      "  \"id\": \"1\"",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "  var isErigon = pm.environment.get('HOST') == \"{{ERIGON}}\";",
                      "  var jsonData = pm.response.json();",
                      "  if (!isErigon) {",
                      "    delete jsonData.result.author;",
                      "    delete jsonData.result.sealFields;",
                      "  }",
                      "  pm.expect(jsonData).to.be.deep.equal(expected);",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getUncleCountByBlockNumber\",\n\t\"params\":[\n\t\t\"0x3\"\n  ],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the number of uncles in the block, if any.\r\n\r\n**Parameters**\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\n**Returns**\r\n\r\nQUANTITY - The number of uncles in the block, if any"
              },
              "response": []
            },
            {
              "name": "getUncleCountByBlockHash",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3fba91c-ae8f-4ced-b563-51f9b7e36144",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"result\": \"0x1\",",
                      "  \"id\": \"1\"",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "  var isErigon = pm.environment.get('HOST') == \"{{ERIGON}}\";",
                      "  var jsonData = pm.response.json();",
                      "  if (!isErigon) {",
                      "    delete jsonData.result.author;",
                      "    delete jsonData.result.sealFields;",
                      "  }",
                      "  pm.expect(jsonData).to.be.deep.equal(expected);",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getUncleCountByBlockHash\",\n\t\"params\":[\n\t\t\"0x3d6122660cc824376f11ee842f83addc3525e2dd6756b9bcf0affa6aa88cf741\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the number of uncles in the block, if any.\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - Hash of the block containing the uncle\r\n\r\n**Returns**\r\n\r\nQUANTITY - The number of uncles in the block, if any"
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {},
          "_postman_isSubFolder": true
        },
        {
          "name": "filters",
          "item": [
            {
              "name": "newPendingTransactionFilter",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2bdda0a7-7cf2-4e02-ae19-7a575f2588a2",
                    "exec": ["utils.notImplemented(\"eth_newPendingTransactionFilter\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_newPendingTransactionFilter\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Creates a pending transaction filter in the node. To check if the state has changed, call eth_getFilterChanges.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nQUANTITY - A filter id"
              },
              "response": []
            },
            {
              "name": "newBlockFilter",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a627cf51-a966-4f25-9447-fb3da185a3e0",
                    "exec": ["utils.notImplemented(\"eth_newBlockFilter\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_newBlockFilter\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Creates a block filter in the node, to notify when a new block arrives. To check if the state has changed, call eth_getFilterChanges.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nQUANTITY - A filter id"
              },
              "response": []
            },
            {
              "name": "newFilter",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44d72ef7-022a-4ebf-94b6-9778bd6925d1",
                    "exec": ["utils.notImplemented(\"eth_newFilter\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_newFilter\",\n\t\"params\": [\n    {\n      \"fromBlock\": \"0x1\",\n      \"toBlock\": \"0x2\",\n      \"address\": \" 0x8888f1f195afa192cfee860698584c030f4c9db1\",\n      \"topics\": [\n        \"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\n        null,\n        [\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\", \"0x0000000000000000000000000aff3454fce5edbc8cca8697c15331677e6ebccc\"]\n      ]\n    }\n  ],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Creates an arbitrary filter object, based on filter options, to notify when the state changes (logs). To check if the state has changed, call eth_getFilterChanges.\r\n\r\n**Example**\r\n\r\nA note on specifying topic filters\r\n\r\nTopics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters\r\n\r\n[] \"anything\"\r\n\r\n[A] \"A in first position (and anything after)\"\r\n\r\n[null, B] \"anything in first position AND B in second position (and anything after)\"\r\n\r\n[A, B] \"A in first position AND B in second position (and anything after)\"\r\n\r\n[[A, B], [A, B]] \"(A OR B) in first position AND (A OR B) in second position (and anything after)\"\r\n\r\n**Parameters**\r\n\r\nObject - An object of type Filter\r\n\r\nQUANTITY|TAG - (optional, default \"latest\") Integer block number, or \"earliest\", \"latest\" or \"pending\" for not yet mined transactions\r\n\r\nQUANTITY|TAG - (optional, default \"latest\") Integer block number, or \"earliest\", \"latest\" or \"pending\" for not yet mined transactions\r\n\r\nDATA|Array of DATA, 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate\r\n\r\nArray of DATA, - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with \"or\" options\r\n\r\n**Returns**\r\n\r\nQUANTITY - A filter id"
              },
              "response": []
            },
            {
              "name": "uninstallFilter",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "11a48bf8-6320-45ae-989c-ad4b889b5f0d",
                    "exec": ["utils.notImplemented(\"eth_uninstallFilter\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_uninstallFilter\",\n\t\"params\":[\n\t\t\"0xdeadbeef\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Uninstalls a previously-created filter given the filter's id. Always uninstall filters when no longer needed.\r\n\r\n**Note**\r\n\r\nFilters timeout when they are not requested with eth_getFilterChanges for a period of time.\r\n\r\n**Parameters**\r\n\r\nQUANTITY - The filter id\r\n\r\n**Returns**\r\n\r\nBoolean - true if the filter was successfully uninstalled, false otherwise"
              },
              "response": []
            },
            {
              "name": "getFilterChanges",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6e68517c-5d19-4843-b1bb-39c7a594d4a5",
                    "exec": ["utils.notImplemented(\"eth_getFilterChanges\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getFilterChanges\",\n\t\"params\":[\n\t\t\"0xdeadbeef\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns an array of objects of type Log, an array of block hashes (for eth_newBlockFilter) or an array of transaction hashes (for eth_newPendingTransactionFilter) or an empty array if nothing has changed since the last poll.\r\n\r\n**Note**\r\n\r\nIn solidity: The first topic is the hash of the signature of the event (if you have not declared the event anonymous.\r\n\r\n**Parameters**\r\n\r\nQUANTITY - The filter id\r\n\r\n**Returns**\r\n\r\nObject - An object of type FilterLog is defined as\r\n\r\nremoved: BOOLEAN - true when the log was removed, due to a chain reorganization. false if its a valid log\r\n\r\nlogIndex: QUANTITY - Integer of the log index position in the block. null when its pending log\r\n\r\ntransactionIndex: QUANTITY - Integer of the transactions index position log was created from. null when its pending log\r\n\r\ntransactionHash: DATA, 32 Bytes - hash of the transactions this log was created from. null when its pending log\r\n\r\nblockHash: DATA, 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending log\r\n\r\nblockNumber: QUANTITY - The block number where this log was in. null when its pending. null when its pending log\r\n\r\naddress: DATA, 20 Bytes - address from which this log originated\r\n\r\ndata: DATA - contains one or more 32 Bytes non-indexed arguments of the log\r\n\r\ntopics: Array of DATA - Array of 0 to 4 32 Bytes DATA of indexed log arguments."
              },
              "response": []
            },
            {
              "name": "getLogs",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b0fee2d-9ef2-48d4-901b-7cab11dfbba2",
                    "exec": [
                      "pm.test('Not tested', function() {",
                      "  var tested = false;",
                      "  pm.expect(tested).to.be.true",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getLogs\",\n\t\"params\":[{\n\t\t\"topics\":[\n\t\t\t\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\"\n\t\t]\n\t}],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns an array of logs matching a given filter object.\r\n\r\n**Parameters**\r\n\r\nObject - An object of type Filter, see eth_newFilter parameters\r\n\r\n**Returns**\r\n\r\nObject - An object of type LogArray or an empty array if nothing has changed since last poll. See eth_getFilterChanges"
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {},
          "_postman_isSubFolder": true
        },
        {
          "name": "accounts",
          "item": [
            {
              "name": "getBalance",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2527ac10-fa47-47c1-a422-ac54f2067e83",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"id\": \"1\",",
                      "  \"result\": \"0x7a69\"",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "    pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getBalance\",\n\t\"params\":[\n\t\t\"0x5df9b87991262f6ba471f09758cde1c0fc1de734\", \n\t\t\"0xb443\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the balance of an account for a given address.\r\n\r\n**Parameters**\r\n\r\nDATA, 20 Bytes - Address to check for balance\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\n**Returns**\r\n\r\nQUANTITY - Integer of the current balance in wei"
              },
              "response": []
            },
            {
              "name": "getTransactionCount",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcfa7ced-fa30-4936-ad0d-28c99c7a39c5",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"id\": \"1\",",
                      "  \"result\": \"0xa\"",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "    pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getTransactionCount\",\n\t\"params\":[\n\t\t\"0xfd2605a2bf58fdbb90db1da55df61628b47f9e8c\", \n\t\t\"0xc443\"\n\t],\n\t\"id\":\"1\"\n}\n",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the number of transactions sent from an address (the nonce).\r\n\r\n**Parameters**\r\n\r\nDATA, 20 Bytes - Address from which to retrieve nonce\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\n**Returns**\r\n\r\nQUANTITY - Integer of the number of transactions sent from this address"
              },
              "response": []
            },
            {
              "name": "getCode",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b1435da2-cfbc-48fd-97ac-24612fb6ee6d",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"id\": \"1\",",
                      "  \"result\": \"0x6060604052361561001f5760e060020a600035046372ea4b8c811461010c575b61011b3460008080670de0b6b3a764000084106101d557600180548101908190556003805433929081101561000257906000526020600020900160006101000a815481600160a060020a0302191690830217905550670de0b6b3a7640000840393508350670de0b6b3a76400006000600082828250540192505081905550600260016000505411151561011d5760038054829081101561000257906000526020600020900160009054906101000a9004600160a060020a0316600160a060020a03166000600060005054604051809050600060405180830381858888f150505080555060016002556101d5565b60018054016060908152602090f35b005b60018054600354910114156101d55760038054600254600101909102900392505b6003546002549003600119018310156101e357600380548490811015610002579082526040517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9190910154600160a060020a03169082906706f05b59d3b200009082818181858883f1505090546706f05b59d3b1ffff1901835550506001929092019161013e565b505060028054600101905550505b600080548501905550505050565b506002548154919250600190810190910460001901905b60035460025490036001190183101561029a576003805484908110156100025760009182526040517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9190910154600160a060020a03169190838504600019019082818181858883f1505081548486049003600190810190925550600290830183020460001901841415905061028e576001015b600192909201916101fa565b60038054600254810182018083559190829080158290116101c75760008390526101c7907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9081019083015b808211156102fa57600081556001016102e6565b509056\"",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "    pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getCode\",\n\t\"params\":[\n\t\t\"0x109c4f2ccc82c4d77bde15f306707320294aea3f\", \n\t\t\"0xc443\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the byte code at a given address (if it's a smart contract).\r\n\r\n**Parameters**\r\n\r\nDATA, 20 Bytes - Address from which to retreive byte code\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\n**Returns**\r\n\r\nDATA - The byte code (if any) found at the given address"
              },
              "response": []
            },
            {
              "name": "getStorageAt",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "270e7931-1ec1-440a-a8e1-ba54f4f4e9a3",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"id\": \"1\",",
                      "  \"result\": \"0x0000000000000000000000000000000000000000000000001bc16d674ec80000\"",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "    pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\", \n\t\"method\": \"eth_getStorageAt\", \n\t\"params\": [\n\t\t\"0x109c4f2ccc82c4d77bde15f306707320294aea3f\", \n\t\t\"0x0\",\n\t\t\"0xc443\"\n\t], \n\t\"id\": \"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the value from a storage position at a given address.\r\n\r\n**Parameters**\r\n\r\nDATA, 20 Bytes - Address of the contract whose storage to retreive\r\n\r\nQUANTITY - Integer of the position in the storage\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\n**Returns**\r\n\r\nDATA - The value at this storage position"
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {},
          "_postman_isSubFolder": true
        },
        {
          "name": "system",
          "item": [
            {
              "name": "blockNumber",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e569618-0584-4849-9571-689ef1a79248",
                    "exec": ["utils.cannotTest(\"eth_blockNumber\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_blockNumber\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the block number of most recent block.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nQUANTITY - Integer of the current highest block number the client is on"
              },
              "response": []
            },
            {
              "name": "syncing",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8b16926e-2282-492c-9d84-48dd950ac85b",
                    "exec": [
                      "// There's nothing really to test here. The node is always syncing",
                      "pm.test('Endpoint not tested', function() {",
                      "  pm.expect(true).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_syncing\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns a data object detailing the status of the sync process or false if not syncing.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nObject - An object of type Syncing or false if not syncing.\r\n\r\nstartingBlock: QUANTITY - The block at which the import started (will only be reset, after the sync reached his head)\r\n\r\ncurrentBlock: QUANTITY - The current block, same as eth_blockNumber\r\n\r\nhighestBlock: QUANTITY - The estimated highest block"
              },
              "response": []
            },
            {
              "name": "chainId",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82448e71-a47e-4fee-9ba7-b6c0d211c075",
                    "exec": [
                      "pm.test('Has correct result', function() {",
                      "  const jsonData = pm.response.json();",
                      "  pm.expect(jsonData.result).to.be.equals(\"0x1\")",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_chainId\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the current ethereum chainId.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nQUANTITY - The current chainId"
              },
              "response": []
            },
            {
              "name": "protocolVersion",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42dfa289-098b-43b0-9395-9ed18209fa20",
                    "exec": [
                      "pm.test('Has correct result', function() {",
                      "    var isParity = pm.environment.get('HOST') == \"{{PARITY}}\";",
                      "    const jsonData = pm.response.json();",
                      "   ",
                      "    if (isParity) {",
                      "      pm.expect(jsonData.result).to.be.equals(\"63\")",
                      "    } else {",
                      "      pm.expect(jsonData.result).to.be.equals(\"0x41\")",
                      "    }",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_protocolVersion\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the current ethereum protocol version.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nQUANTITY - The current ethereum protocol version"
              },
              "response": []
            },
            {
              "name": "gasPrice",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50b5578b-4008-406c-a8f6-0459f258538d",
                    "exec": ["utils.cannotTest(\"eth_gasPrice\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_gasPrice\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the current price per gas in wei.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nQUANTITY - Integer of the current gas price in wei"
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {},
          "_postman_isSubFolder": true
        },
        {
          "name": "call",
          "item": [
            {
              "name": "call",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3dde2a48-3bad-43c2-97a6-f4339f368992",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"result\": \"0x0000000000000000000000000000000000000000000c685fa11e01ec6f000000\",",
                      "  \"id\": \"1\"",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "  var jsonData = pm.response.json();",
                      "  pm.expect(jsonData).to.be.deep.equal(expected);",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_call\",\n\t\"params\":[\n    {\n      \"to\": \"0x08a2e41fb99a7599725190b9c970ad3893fa33cf\",\n      \"data\": \"0x18160ddd\"\n    },\n    \"0xa2f2e0\"\n  ],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Executes a new message call immediately without creating a transaction on the block chain.\r\n\r\n**Parameters**\r\n\r\nObject - An object of type Call\r\n\r\nDATA, 20 Bytes - (optional) The address the transaction is sent from\r\n\r\nDATA, 20 Bytes - The address the transaction is directed to\r\n\r\nQUANTITY - (optional) Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter may be needed by some executions\r\n\r\nQUANTITY - (optional) Integer of the gasPrice used for each paid gas\r\n\r\nQUANTITY - (optional) Integer of the value sent with this transaction\r\n\r\nDATA - (optional) Hash of the method signature and encoded parameters. For details see Ethereum Contract ABI\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\n**Returns**\r\n\r\nDATA - The return value of executed contract"
              },
              "response": []
            },
            {
              "name": "estimateGas",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61b5e2c2-b0c3-438c-a8cc-85bd6f058f75",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"id\": \"1\",",
                      "  \"result\": \"0x5208\"",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "    pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                      "})",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_estimateGas\",\n\t\"params\":[\n    {\n      \"to\": \"0x3d597789ea16054a084ac84ce87f50df9198f415\",\n      \"from\": \"0x3d597789ea16054a084ac84ce87f50df9198f415\",\n      \"value\": \"0x1\"\n    }\n  ],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain.\r\n\r\n**Note**\r\n\r\nThe estimate may be significantly more than the amount of gas actually used by the transaction for a variety of reasons including EVM mechanics and node performance.\r\n\r\n**Note**\r\n\r\nIf no gas limit is specified geth uses the block gas limit from the pending block as an upper bound. As a result the returned estimate might not be enough to executed the call/transaction when the amount of gas is higher than the pending block gas limit.\r\n\r\n**Parameters**\r\n\r\nObject - An object of type Call, see eth_call parameters, expect that all properties are optional\r\n\r\n**Returns**\r\n\r\nQUANTITY - The estimated amount of gas needed for the call"
              },
              "response": []
            },
            {
              "name": "sendTransaction",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6099e6b6-bb38-45ed-8178-a2c148e4d2c5",
                    "exec": ["utils.notImplemented(\"eth_sendTransaction\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_sendTransaction\",\n  \"params\": [\n    {\n      \"from\": \" 0xb60e8dd61c5d32be8058bb8eb970870f07233155\",\n      \"to\": \" 0xd46e8dd67c5d32be8058bb8eb970870f07244567\",\n      \"gas\": \"0x76c0\",\n      \"gasPrice\": \"0x9184e72a000\",\n      \"value\": \"0x9184e72a\",\n      \"data\": \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\"\n    }\n  ],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Creates new message call transaction or a contract creation if the data field contains code.\r\n\r\n**Note**\r\n\r\nUse eth_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract\r\n\r\n**Parameters**\r\n\r\nObject - An object of type SendTransaction\r\n\r\nDATA, 20 Bytes - The address the transaction is send from\r\n\r\nDATA, 20 Bytes - (optional when creating new contract) The address the transaction is directed to\r\n\r\nQUANTITY - (optional, default 90000) Integer of the gas provided for the transaction execution. It will return unused gas\r\n\r\nQUANTITY - (optional, default To-Be-Determined) Integer of the gasPrice used for each paid gas\r\n\r\nQUANTITY - (optional) Integer of the value sent with this transaction\r\n\r\nDATA - The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. For details see Ethereum Contract ABI\r\n\r\nQUANTITY - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce\r\n\r\n**Returns**\r\n\r\nDATA, 32 Bytes - The transaction hash, or the zero hash if the transaction is not yet available"
              },
              "response": []
            },
            {
              "name": "sendRawTransaction",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3293bee1-893c-4d4c-bc5b-458235d2158b",
                    "exec": [
                      "pm.test('Not tested', function() {",
                      "  var tested = false;",
                      "  pm.expect(tested).to.be.true",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_sendRawTransaction\",\n\t\"params\":[\"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\"],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Creates new message call transaction or a contract creation for previously-signed transactions.\r\n\r\n**Note**\r\n\r\nUse eth_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract.\r\n\r\n**Parameters**\r\n\r\nDATA - The signed transaction data\r\n\r\n**Returns**\r\n\r\nDATA, 32 Bytes - The transaction hash, or the zero hash if the transaction is not yet available"
              },
              "response": []
            },
            {
              "name": "getProof",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d8697ee-e17d-419f-b66a-1017f8f7ad22",
                    "exec": ["utils.notImplemented(\"eth_getProof\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"1\",\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_getProof\",\n  \"params\": [\n    \"0x7F0d15C7FAae65896648C8273B6d7E43f58Fa842\",\n    [  \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\" ],\n    \"latest\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "See this EIP of more information: https://github.com/ethereum/EIPs/issues/1186\r\n\r\nPossible implementation: https://github.com/vocdoni/eth-storage-proof\r\n\r\n**Parameters**\r\n\r\nDATA, 20 Bytes - The address of the storage locations being proved\r\n\r\nDATAARRAY - one or more storage locations to prove\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\n**Returns**\r\n\r\nDATA - The Merkel proof of the storage locations"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "952dad06-2f84-4226-98c8-696d0fc84db6",
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e4208e7b-1dbd-4b84-9735-94dbf509f2e4",
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ],
          "protocolProfileBehavior": {},
          "_postman_isSubFolder": true
        },
        {
          "name": "mining",
          "item": [
            {
              "name": "coinbase",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6136a206-96bb-43f2-94bd-08f93303cf9a",
                    "exec": ["utils.notImplemented(\"eth_coinbase\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_coinbase\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the current client coinbase address.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nDATA, 20 Bytes - The current coinbase address"
              },
              "response": []
            },
            {
              "name": "hashrate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9ac59f4f-7de3-4276-8e65-91cd0ad9c040",
                    "exec": ["utils.notImplemented(\"eth_hashrate\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_hashrate\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the number of hashes per second that the node is mining with.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nQUANTITY - Number of hashes per second"
              },
              "response": []
            },
            {
              "name": "mining",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8bdc9381-dbde-4419-b736-96e7914901e0",
                    "exec": [
                      "var expected = {",
                      "  \"jsonrpc\": \"2.0\",",
                      "  \"id\": \"1\",",
                      "  \"result\": false",
                      "}",
                      "",
                      "pm.test('Has correct result', function() {",
                      "  pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_mining\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns true if client is actively mining new blocks.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nBoolean - true if the client is mining, false otherwise"
              },
              "response": []
            },
            {
              "name": "getWork",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "99953248-ef11-4c01-92dc-26ce5ef38d9d",
                    "exec": ["utils.notImplemented(\"eth_getWork\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getWork\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target').\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nObject - An object of type Work (an array of three hashes representing block header pow-hash, seed hash and boundary condition\r\n\r\ncurrent: DATA, 32 Bytes - current block header pow-hash\r\n\r\nseed: DATA, 32 Bytes - The seed hash used for the DAG\r\n\r\nboundary: DATA, 32 Bytes - The boundary condition ('target'), 2^256 / difficulty"
              },
              "response": []
            },
            {
              "name": "submitWork",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db6d4657-a901-4ed5-9995-37f11ec9da6e",
                    "exec": ["utils.notImplemented(\"eth_submitWork\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\", \n\t\"method\":\"eth_submitWork\", \n\t\"params\":[\n\t\t\"0x1\", \n\t\t\"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\", \n\t\t\"0xD16E5700000000000000000000000000D16E5700000000000000000000000000\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Submits a proof-of-work solution to the blockchain.\r\n\r\n**Parameters**\r\n\r\nDATA, 8 Bytes - The nonce found (64 bits)\r\n\r\nDATA, 32 Bytes - The header's pow-hash (256 bits)\r\n\r\nDATA, 32 Bytes - The mix digest (256 bits)\r\n\r\n**Returns**\r\n\r\nBoolean - true if the provided solution is valid, false otherwise"
              },
              "response": []
            },
            {
              "name": "submitHashrate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "394114d6-fffc-4cb8-a897-89e0bb6b0aa2",
                    "exec": ["utils.notImplemented(\"eth_submitHashrate\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\", \n\t\"method\":\"eth_submitHashrate\", \n\t\"params\":[\n\t\t\"0x0000000000000000000000000000000000000000000000000000000000500000\", \n\t\t\"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Submit the mining hashrate to the blockchain.\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - a hexadecimal string representation of the hash rate\r\n\r\nString - A random hexadecimal ID identifying the client\r\n\r\n**Returns**\r\n\r\nBoolean - true if submitting went through succesfully, false otherwise"
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {},
          "_postman_isSubFolder": true
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "trace",
      "item": [
        {
          "name": "call",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2e6a9c1c-38f4-4061-ae83-8fcc8a7511be",
                "exec": ["utils.notImplemented(\"trace_call\", pm.response.json())", ""],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\":\"2.0\",\n  \"method\":\"trace_call\",\n  \"params\":[\n    {\n      \"from\":\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n      \"to\":\"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\n      \"value\":\"0x186a0\"\n    },\n    [\"trace\",\"vmTrace\"],\n    \"latest\"\n  ],\n  \"id\": \"1\"\n}\n",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Executes the given call and returns a number of possible traces for it.\r\n\r\n**Parameters**\r\n\r\nObject - An object of type TraceCall\r\n\r\nfrom: DATA, 20 Bytes - (optional) 20 Bytes - The address the transaction is send from.\r\n\r\nto: DATA, 20 Bytes - (optional when creating new contract) 20 Bytes - The address the transaction is directed to.\r\n\r\ngas: QUANTITY - (optional) Integer formatted as a hex string of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter may be needed by some executions.\r\n\r\ngasPrice: QUANTITY - (optional) Integer formatted as a hex string of the gas price used for each paid gas.\r\n\r\nvalue: QUANTITY - (optional) Integer formatted as a hex string of the value sent with this transaction.\r\n\r\ndata: DATA - (optional) 4 byte hash of the method signature followed by encoded parameters. For details see Ethereum Contract ABI.\r\n\r\nSTRINGARRAY - An array of strings, one or more of: \"vmTrace\", \"trace\", \"stateDiff\".\r\n\r\nTAG - (optional) Integer of a block number, or the string 'earliest', 'latest' or 'pending'.\r\n\r\n**Returns**\r\n\r\nObject - An object of type BlockTraceArray"
          },
          "response": []
        },
        {
          "name": "callMany",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbec6f83-1a35-43dd-839b-8dea5ea39cfb",
                "exec": ["utils.notImplemented(\"trace_callMany\", pm.response.json())", ""],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"trace_callMany\",\n  \"params\": [\n    [\n      [\n        {\n          \"from\":\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n          \"to\":\"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\n          \"value\":\"0x186a0\"\n        },\n        [\"trace\"]\n      ],\n      [\n        {\n          \"from\":\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n          \"to\":\"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\n          \"value\":\"0x186a0\"\n        },\n        [\"trace\"]\n      ]\n    ],\n    \"latest\"\n  ],\n\t\"id\":\"1\"\n}\n",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Performs multiple call traces on top of the same block. i.e. transaction n will be executed on top of a pending block with all n-1 transactions applied (traced) first. Allows to trace dependent transactions.\r\n\r\n**Parameters**\r\n\r\nCALLARRAY - An array of Call objects plus strings, one or more of: \"vmTrace\", \"trace\", \"stateDiff\".\r\n\r\nTAG - (optional) integer block number, or the string 'latest', 'earliest' or 'pending', see the default block parameter.\r\n\r\n**Returns**\r\n\r\nObject - An object of type BlockTraceArray"
          },
          "response": []
        },
        {
          "name": "rawTransaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a2465974-9dba-4410-a7bd-67b493703d29",
                "exec": ["utils.notImplemented(\"trace_rawTransaction\", pm.response.json())", ""],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"trace_rawTransaction\",\n\t\"params\":[\"0x17104ac9d3312d8c136b7f44d4b8b47852618065ebfa534bd2d3b5ef218ca1f3\", [\"vmTrace\"]],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Traces a call to eth_sendRawTransaction without making the call, returning the traces\r\n\r\n**Parameters**\r\nDATA - Raw transaction data.\r\n\r\nSTRINGARRAY - Type of trace, one or more of: \"vmTrace\", \"trace\", \"stateDiff\".\r\n\r\n**Returns**\r\nObject - An object of type BlockTrace."
          },
          "response": []
        },
        {
          "name": "replayBlockTransactions",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ae64e81-7268-4743-ae25-98a2d53386c0",
                "exec": ["utils.notImplemented(\"trace_replayBlockTransactions\", pm.response.json())", ""],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"trace_replayBlockTransactions\",\n\t\"params\":[\"0x2\",[\"trace\"]],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Replays all transactions in a block returning the requested traces for each transaction.\r\n\r\n**Parameters**\r\n\r\nTAG - Integer of a block number, or the string 'earliest', 'latest' or 'pending'.\r\n\r\nSTRINGARRAY - Type of trace, one or more of: \"vmTrace\", \"trace\", \"stateDiff\".\r\n\r\n**Returns**\r\n\r\nObject - An object of type BlockTraceArray."
          },
          "response": []
        },
        {
          "name": "replayTransaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b60375bb-313f-47cc-9a7d-ff4abffebe99",
                "exec": ["utils.notImplemented(\"trace_replayTransaction\", pm.response.json())", ""],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"trace_replayTransaction\",\n  \"params\": [\n    \"0x02d4a872e096445e80d05276ee756cefef7f3b376bcec14246469c0cd97dad8f\",\n    [\"trace\"]\n  ],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Replays a transaction, returning the traces.\r\n\r\n**Parameters**\r\nDATA, 32 Bytes - The transaction's hash.\r\n\r\nSTRINGARRAY - Type of trace, one or more of: \"vmTrace\", \"trace\", \"stateDiff\".\r\n\r\n**Returns**\r\nObject - An object of type BlockTrace."
          },
          "response": []
        },
        {
          "name": "transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "de0d1c16-7bd3-4d6c-ae80-1001f994f1ed",
                "exec": [
                  "var expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": [",
                  "    {",
                  "      \"action\": {",
                  "        \"callType\": \"call\",",
                  "        \"from\": \"0x83806d539d4ea1c140489a06660319c9a303f874\",",
                  "        \"gas\": \"0x1a1f8\",",
                  "        \"input\": \"0x\",",
                  "        \"to\": \"0x1c39ba39e4735cb65978d4db400ddd70a72dc750\",",
                  "        \"value\": \"0x7a16c911b4d00000\"",
                  "      },",
                  "      \"blockHash\": \"0x7eb25504e4c202cf3d62fd585d3e238f592c780cca82dacb2ed3cb5b38883add\",",
                  "      \"blockNumber\": 3068185,",
                  "      \"result\": {",
                  "        \"gasUsed\": \"0x2982\",",
                  "        \"output\": \"0x\"",
                  "      },",
                  "      \"subtraces\": 2,",
                  "      \"traceAddress\": [],",
                  "      \"transactionHash\": \"0x17104ac9d3312d8c136b7f44d4b8b47852618065ebfa534bd2d3b5ef218ca1f3\",",
                  "      \"transactionPosition\": 2,",
                  "      \"type\": \"call\"",
                  "    },",
                  "    {",
                  "      \"action\": {",
                  "        \"callType\": \"call\",",
                  "        \"from\": \"0x1c39ba39e4735cb65978d4db400ddd70a72dc750\",",
                  "        \"gas\": \"0x13e99\",",
                  "        \"input\": \"0x16c72721\",",
                  "        \"to\": \"0x2bd2326c993dfaef84f696526064ff22eba5b362\",",
                  "        \"value\": \"0x0\"",
                  "      },",
                  "      \"blockHash\": \"0x7eb25504e4c202cf3d62fd585d3e238f592c780cca82dacb2ed3cb5b38883add\",",
                  "      \"blockNumber\": 3068185,",
                  "      \"result\": {",
                  "        \"gasUsed\": \"0x183\",",
                  "        \"output\": \"0x0000000000000000000000000000000000000000000000000000000000000001\"",
                  "      },",
                  "      \"subtraces\": 0,",
                  "      \"traceAddress\": [",
                  "        0",
                  "      ],",
                  "      \"transactionHash\": \"0x17104ac9d3312d8c136b7f44d4b8b47852618065ebfa534bd2d3b5ef218ca1f3\",",
                  "      \"transactionPosition\": 2,",
                  "      \"type\": \"call\"",
                  "    },",
                  "    {",
                  "      \"action\": {",
                  "        \"callType\": \"call\",",
                  "        \"from\": \"0x1c39ba39e4735cb65978d4db400ddd70a72dc750\",",
                  "        \"gas\": \"0x8fc\",",
                  "        \"input\": \"0x\",",
                  "        \"to\": \"0x70faa28a6b8d6829a4b1e649d26ec9a2a39ba413\",",
                  "        \"value\": \"0x7a16c911b4d00000\"",
                  "      },",
                  "      \"blockHash\": \"0x7eb25504e4c202cf3d62fd585d3e238f592c780cca82dacb2ed3cb5b38883add\",",
                  "      \"blockNumber\": 3068185,",
                  "      \"result\": {",
                  "        \"gasUsed\": \"0x0\",",
                  "        \"output\": \"0x\"",
                  "      },",
                  "      \"subtraces\": 0,",
                  "      \"traceAddress\": [",
                  "        1",
                  "      ],",
                  "      \"transactionHash\": \"0x17104ac9d3312d8c136b7f44d4b8b47852618065ebfa534bd2d3b5ef218ca1f3\",",
                  "      \"transactionPosition\": 2,",
                  "      \"type\": \"call\"",
                  "    }",
                  "  ]",
                  "}",
                  "",
                  "pm.test('Has correct result', function() {",
                  "    pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"trace_transaction\",\n  \"params\":[\"0x17104ac9d3312d8c136b7f44d4b8b47852618065ebfa534bd2d3b5ef218ca1f3\"],\n\t\"id\":\"1\"\n}\n",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns traces for the given transaction\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - The transaction's hash\r\n\r\n**Returns**\r\n\r\nObject - An object of type AdhocTraceArray, see trace_filter."
          },
          "response": []
        },
        {
          "name": "get",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c1d276a3-867a-43ba-8d82-629650317491",
                "exec": [
                  "var expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": {",
                  "    \"action\": {",
                  "      \"callType\": \"call\",",
                  "      \"from\": \"0x1c39ba39e4735cb65978d4db400ddd70a72dc750\",",
                  "      \"gas\": \"0x13e99\",",
                  "      \"input\": \"0x16c72721\",",
                  "      \"to\": \"0x2bd2326c993dfaef84f696526064ff22eba5b362\",",
                  "      \"value\": \"0x0\"",
                  "    },",
                  "    \"blockHash\": \"0x7eb25504e4c202cf3d62fd585d3e238f592c780cca82dacb2ed3cb5b38883add\",",
                  "    \"blockNumber\": 3068185,",
                  "    \"result\": {",
                  "      \"gasUsed\": \"0x183\",",
                  "      \"output\": \"0x0000000000000000000000000000000000000000000000000000000000000001\"",
                  "    },",
                  "    \"subtraces\": 0,",
                  "    \"traceAddress\": [",
                  "      0",
                  "    ],",
                  "    \"transactionHash\": \"0x17104ac9d3312d8c136b7f44d4b8b47852618065ebfa534bd2d3b5ef218ca1f3\",",
                  "    \"transactionPosition\": 2,",
                  "    \"type\": \"call\"",
                  "  }",
                  "}",
                  "",
                  "pm.test('Has correct result', function() {",
                  "    pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"trace_get\",\n  \"params\":[\n    \"0x17104ac9d3312d8c136b7f44d4b8b47852618065ebfa534bd2d3b5ef218ca1f3\",\n    [\"0x0\"]\n  ],\n\t\"id\":\"1\"\n}\n",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns trace at given position.\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - The transaction's hash.\r\n\r\nQUANTITYARRAY - The index position of the trace.\r\n\r\n**Returns**\r\n\r\nObject - An object of type AdhocTraceArray, see trace_filter."
          },
          "response": []
        },
        {
          "name": "block",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0ab5009a-3398-4d25-a894-862f86e10785",
                "exec": [
                  "var expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": [",
                  "    {",
                  "      \"action\": {",
                  "        \"author\": \"0x5088d623ba0fcf0131e0897a91734a4d83596aa0\",",
                  "        \"rewardType\": \"block\",",
                  "        \"value\": \"0x478eae0e571ba000\"",
                  "      },",
                  "      \"blockHash\": \"0x3d6122660cc824376f11ee842f83addc3525e2dd6756b9bcf0affa6aa88cf741\",",
                  "      \"blockNumber\": 3,",
                  "      \"result\": {},",
                  "      \"subtraces\": 0,",
                  "      \"traceAddress\": null,",
                  "      \"transactionHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",",
                  "      \"transactionPosition\": 0,",
                  "      \"type\": \"reward\"",
                  "    },",
                  "    {",
                  "      \"action\": {",
                  "        \"author\": \"0xc8ebccc5f5689fa8659d83713341e5ad19349448\",",
                  "        \"rewardType\": \"uncle\",",
                  "        \"value\": \"0x340aad21b3b70000\"",
                  "      },",
                  "      \"blockHash\": \"0x3d6122660cc824376f11ee842f83addc3525e2dd6756b9bcf0affa6aa88cf741\",",
                  "      \"blockNumber\": 3,",
                  "      \"result\": {},",
                  "      \"subtraces\": 0,",
                  "      \"traceAddress\": null,",
                  "      \"transactionHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",",
                  "      \"transactionPosition\": 0,",
                  "      \"type\": \"reward\"",
                  "    }",
                  "  ]",
                  "}",
                  "",
                  "pm.test('Has correct result', function() {",
                  "    pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"trace_block\",\n\t\"params\":[\"0x3\"],\n\t\"id\":\"1\"\n}\n",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns traces created at given block.\r\n\r\n**Parameters**\r\n\r\nTAG - Integer of a block number, or the string 'earliest', 'latest' or 'pending'.\r\n\r\n**Returns**\r\n\r\nObject - An object of type AdhocTraceArray."
          },
          "response": []
        },
        {
          "name": "filter",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b701d79-77b1-48fb-b8a7-4b38e6e63c5d",
                "exec": [
                  "var expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": [",
                  "    {",
                  "      \"action\": {",
                  "        \"author\": \"0x5088d623ba0fcf0131e0897a91734a4d83596aa0\",",
                  "        \"rewardType\": \"block\",",
                  "        \"value\": \"0x478eae0e571ba000\"",
                  "      },",
                  "      \"blockHash\": \"0x3d6122660cc824376f11ee842f83addc3525e2dd6756b9bcf0affa6aa88cf741\",",
                  "      \"blockNumber\": 3,",
                  "      \"result\": {},",
                  "      \"subtraces\": 0,",
                  "      \"traceAddress\": null,",
                  "      \"transactionHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",",
                  "      \"transactionPosition\": 0,",
                  "      \"type\": \"reward\"",
                  "    },",
                  "    {",
                  "      \"action\": {",
                  "        \"author\": \"0xc8ebccc5f5689fa8659d83713341e5ad19349448\",",
                  "        \"rewardType\": \"uncle\",",
                  "        \"value\": \"0x340aad21b3b70000\"",
                  "      },",
                  "      \"blockHash\": \"0x3d6122660cc824376f11ee842f83addc3525e2dd6756b9bcf0affa6aa88cf741\",",
                  "      \"blockNumber\": 3,",
                  "      \"result\": {},",
                  "      \"subtraces\": 0,",
                  "      \"traceAddress\": null,",
                  "      \"transactionHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",",
                  "      \"transactionPosition\": 0,",
                  "      \"type\": \"reward\"",
                  "    }",
                  "  ]",
                  "}",
                  "",
                  "pm.test('Has correct result', function() {",
                  "    pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"trace_filter\",\n  \"params\":[\n    {\n      \"fromBlock\":\"0x3\",\n      \"toBlock\":\"0x3\"\n    }\n  ],\n\t\"id\":\"1\"\n}\n",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns traces matching given filter\r\n\r\n**Parameters**\r\n\r\nObject - An object of type TraceFilter\r\n\r\nfromBlock: TAG - (optional) From this block.\r\n\r\ntoBlock: TAG - (optional) To this block.\r\n\r\nfromAddress: DATA, 20 Bytes - (optional) Sent from these addresses.\r\n\r\ntoAddress: DATA, 20 Bytes - (optional) Sent to these addresses.\r\n\r\nafter: QUANTITY - (optional) The offset trace number\r\n\r\ncount: QUANTITY - (optional) Integer number of traces to display in a batch.\r\n\r\n**Returns**\r\nObject - An object of type AdHocTraceArray matching the given filter."
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "erigon",
      "item": [
        {
          "name": "forks",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "331402b4-0302-4516-b601-b160484292b3",
                "exec": [
                  "var expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": {",
                  "    \"genesis\": \"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\",",
                  "    \"forks\": [",
                  "      1150000,",
                  "      1920000,",
                  "      2463000,",
                  "      2675000,",
                  "      4370000,",
                  "      7280000,",
                  "      9069000,",
                  "      9200000",
                  "    ]",
                  "  }",
                  "}",
                  "",
                  "pm.test('Has correct result', function() {",
                  "  pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"erigon_forks\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns the genesis block hash and a sorted list of already passed fork block numbers as well as the next fork block (if applicable)\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nObject - An object of type Fork\r\n\r\ngenesis: DATA, 32 Bytes - The hash of the genesis block\r\n\r\npassed: ARRAY of QUANTITY - Array of block numbers passed by this client\r\n\r\nnext: QUANTITY - (optional) the next fork block"
          },
          "response": []
        },
        {
          "name": "getHeaderByNumber",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f7e9f2d-1508-4ce6-bb7e-ab697a69ce66",
                "exec": [
                  "var expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": {",
                  "    \"parentHash\": \"0xb495a1d7e6663152ae92708da4843337b958146015a2802f4193a410044698c9\",",
                  "    \"sha3Uncles\": \"0x6b17b938c6e4ef18b26ad81b9ca3515f27fd9c4e82aac56a1fd8eab288785e41\",",
                  "    \"miner\": \"0x5088d623ba0fcf0131e0897a91734a4d83596aa0\",",
                  "    \"stateRoot\": \"0x76ab0b899e8387436ff2658e2988f83cbf1af1590b9fe9feca3714f8d1824940\",",
                  "    \"transactionsRoot\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",",
                  "    \"receiptsRoot\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",",
                  "    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",",
                  "    \"difficulty\": \"0x3fe802ffe\",",
                  "    \"number\": \"0x3\",",
                  "    \"gasLimit\": \"0x1388\",",
                  "    \"gasUsed\": \"0x0\",",
                  "    \"timestamp\": \"0x55ba4260\",",
                  "    \"extraData\": \"0x476574682f76312e302e302d66633739643332642f6c696e75782f676f312e34\",",
                  "    \"mixHash\": \"0x65e12eec23fe6555e6bcdb47aa25269ae106e5f16b54e1e92dcee25e1c8ad037\",",
                  "    \"nonce\": \"0x2e9344e0cbde83ce\",",
                  "    \"hash\": \"0x3d6122660cc824376f11ee842f83addc3525e2dd6756b9bcf0affa6aa88cf741\"",
                  "  }",
                  "}",
                  "",
                  "pm.test('Has correct result', function() {",
                  "  pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"erigon_getHeaderByNumber\",\n\t\"params\":[\n\t\t\"0x3\"\n\t],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns a block's header given a block number ignoring the block's transaction and uncle list (may be faster).\r\n\r\n**Parameters**\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\n**Returns**\r\n\r\nObject - An object of type BlockHeader or null when no block was found. See eth_getBlockByHash"
          },
          "response": []
        },
        {
          "name": "getHeaderByHash",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ca80cf3-6a70-44ae-8741-3d8851096b65",
                "exec": [
                  "var expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": {",
                  "    \"parentHash\": \"0xb495a1d7e6663152ae92708da4843337b958146015a2802f4193a410044698c9\",",
                  "    \"sha3Uncles\": \"0x6b17b938c6e4ef18b26ad81b9ca3515f27fd9c4e82aac56a1fd8eab288785e41\",",
                  "    \"miner\": \"0x5088d623ba0fcf0131e0897a91734a4d83596aa0\",",
                  "    \"stateRoot\": \"0x76ab0b899e8387436ff2658e2988f83cbf1af1590b9fe9feca3714f8d1824940\",",
                  "    \"transactionsRoot\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",",
                  "    \"receiptsRoot\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",",
                  "    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",",
                  "    \"difficulty\": \"0x3fe802ffe\",",
                  "    \"number\": \"0x3\",",
                  "    \"gasLimit\": \"0x1388\",",
                  "    \"gasUsed\": \"0x0\",",
                  "    \"timestamp\": \"0x55ba4260\",",
                  "    \"extraData\": \"0x476574682f76312e302e302d66633739643332642f6c696e75782f676f312e34\",",
                  "    \"mixHash\": \"0x65e12eec23fe6555e6bcdb47aa25269ae106e5f16b54e1e92dcee25e1c8ad037\",",
                  "    \"nonce\": \"0x2e9344e0cbde83ce\",",
                  "    \"hash\": \"0x3d6122660cc824376f11ee842f83addc3525e2dd6756b9bcf0affa6aa88cf741\"",
                  "  }",
                  "}",
                  "",
                  "pm.test('Has correct result', function() {",
                  "  pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"erigon_getHeaderByHash\",\n\t\"params\":[\n\t\t\"0x3d6122660cc824376f11ee842f83addc3525e2dd6756b9bcf0affa6aa88cf741\"\n\t],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns a block's header given a block's hash.\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - Hash of a block\r\n\r\n**Returns**\r\n\r\nObject - An object of type BlockHeader or null when no block was found. See eth_getBlockByHash"
          },
          "response": []
        },
        {
          "name": "getLogsByHash",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6a55ab5e-fa04-4e14-b7f9-1b387ee51188",
                "exec": [
                  "var expected = [",
                  "  null,",
                  "  [",
                  "    {",
                  "      \"address\": \"0xb8c77482e45f1f44de1745f52c74426c631bdd52\",",
                  "      \"topics\": [",
                  "        \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",",
                  "        \"0x000000000000000000000000001866ae5b3de6caa5a51543fd9fb64f524f5478\",",
                  "        \"0x00000000000000000000000016a9c11e229ce221578a9adb3e7c0a48482e8063\"",
                  "      ],",
                  "      \"data\": \"0x00000000000000000000000000000000000000000000021ea4a7ecbf3c280000\",",
                  "      \"blockNumber\": \"0x3d0cec\",",
                  "      \"transactionHash\": \"0x99f91752d50d0c2c92e681fda082843747e8284d846f8b623e4cd280fbd7bb65\",",
                  "      \"transactionIndex\": \"0x2\",",
                  "      \"blockHash\": \"0x2f244c154cbacb0305581295b80efa6dffb0224b60386a5fc6ae9585e2a140c4\",",
                  "      \"logIndex\": \"0x0\",",
                  "      \"removed\": false",
                  "    }",
                  "  ]",
                  "]",
                  "",
                  "pm.test('Has correct result', function() {",
                  "  // We test just two log entries to keep the test case small",
                  "  var jsonData = pm.response.json();",
                  "  pm.expect(jsonData.result[0]).to.be.deep.equal(expected[0]);",
                  "  pm.expect(jsonData.result[2]).to.be.deep.equal(expected[1]);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"erigon_getLogsByHash\",\n\t\"params\":[\n\t\t\"0x2f244c154cbacb0305581295b80efa6dffb0224b60386a5fc6ae9585e2a140c4\"\n\t],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns an array of arrays of logs generated by the transactions in the block given by the block's hash.\r\n\r\n**Note**\r\n\r\nThe returned value is an array of arrays of log entries. There is an entry for each transaction in the block. BR  BR If transaction X did not create any logs, the entry at result[X] will be null BR  BR If transaction X generated N logs, the entry at position result[X] will be an array of N log objects\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - Hash of block at which to retreive data\r\n\r\n**Returns**\r\n\r\nObject - An object of type LogArray some of which may be null found in the block. See eth_getFilterChanges"
          },
          "response": []
        },
        {
          "name": "issuance",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b5a34317-4baa-4fb9-95a8-83f4f757c842",
                "exec": [
                  "var expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": {",
                  "    \"blockReward\": \"0x478eae0e571ba000\",",
                  "    \"uncleReward\": \"0x340aad21b3b70000\",",
                  "    \"issuance\": \"0x7b995b300ad2a000\"",
                  "  }",
                  "}",
                  "",
                  "pm.test('Has correct result', function() {",
                  "  pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"erigon_issuance\",\n\t\"params\":[\n\t\t\"0x3\"\n\t],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns the total issuance (block reward plus uncle reward) for the given block.\r\n\r\n**Parameters**\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\n**Returns**\r\n\r\nObject - An object of type Issuance\r\n\r\nblockReward: QUANTITY - The issuance to the miner of the block (includes nephew reward but not transaction fees)\r\n\r\nuncleReward: QUANTITY - The issuance to miners of included uncle (if any)\r\n\r\nissuance: QUANTITY - The sum of blockReward and uncleReward"
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "debug",
      "item": [
        {
          "name": "storageRangeAt",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4bcaf47-dd81-42af-9bbd-9256ba908426",
                "exec": [
                  "var isSilk = pm.environment.get('HOST') == \"{{SILKRPC}}\";",
                  "if (isSilk) {",
                  "  utils.notImplemented(\"debug_storageRangeAt\", pm.response.json())",
                  "  return;",
                  "}",
                  "var isErigon = pm.environment.get('HOST') == \"{{ERIGON}}\";",
                  "if (isErigon) {",
                  "  utils.cannotTest(\"debug_accountRange\", pm.response.json())",
                  "  return;",
                  "}",
                  "var expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": {",
                  "    \"storage\": {",
                  "      \"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\": {",
                  "        \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",",
                  "        \"value\": \"0x000000000000000000000000ed2f1401f8994d3ff2b2a923e743c24c2914ab4f\"",
                  "      },",
                  "      \"0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6\": {",
                  "        \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",",
                  "        \"value\": \"0x000000000000000000000000739c71235a9669f6b900490ab1c95310c19abc71\"",
                  "      }",
                  "    },",
                  "    \"nextKey\": \"0x0000000000000000000000000000000000000000000000000000000000000002\"",
                  "  }",
                  "}",
                  "",
                  "pm.test('Has correct result', function() {",
                  "  pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"debug_storageRangeAt\",\n\t\"params\":[\n\t\t\"0xd3f1853788b02e31067f2c6e65cb0ae56729e23e3c92e2393af9396fa182701d\", \n    1,\n    \"0xb734c74ff4087493373a27834074f80acbd32827\",\n\t\t\"0x00\",\n    2\n\t],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns information about a range of storage locations (if any) for the given address.\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - Hash of block at which to retreive data\r\n\r\nQUANTITY, 8 bytes - Transaction index in the give block\r\n\r\nDATA, 20 Bytes - Contract address from which to retreive storage data\r\n\r\nDATA, 32 Bytes - Storage key to retreive\r\n\r\nQUANTITY, 8 bytes - The number of values to retreive\r\n\r\n**Returns**\r\n\r\nObject - An object of type StorageRangeResult which is defined as\r\n\r\npair: KEY/VALUE - A key value pair of the storage location\r\n\r\nnextKey: DATA, 32 Bytes - (optional) Hash pointing to next storage pair or empty"
          },
          "response": []
        },
        {
          "name": "accountRange",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8fa3bd0b-1c56-4fd5-b46b-66d52a22d7fc",
                "exec": [
                  "var expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": {",
                  "    \"root\": \"0x8d8f6ffa5f2e55c0f8f0b88c3421d647e497f3ee0d66825f3f7433d7e244dde8\",",
                  "    \"accounts\": {",
                  "      \"0x0000000000000000000000000000000000000001\": {",
                  "        \"balance\": \"0\",",
                  "        \"nonce\": 0,",
                  "        \"root\": \"0000000000000000000000000000000000000000000000000000000000000000\",",
                  "        \"codeHash\": \"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\"",
                  "      }",
                  "    },",
                  "    \"next\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAI=\"",
                  "  }",
                  "}",
                  "",
                  "pm.test('Has correct result', function() {",
                  "  pm.expect(pm.response.json()).to.be.deep.equal(expected);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"debug_accountRange\",\n\t\"params\":[\n\t\t\"0xaaaaa\", \n\t\t[1],\n    1,\n    true,\n    true,\n    true\n\t],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns a range of accounts involved in the given block range\r\n\r\n**Parameters**\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\nDATAARRAY - an array of prefixs against which to match account addresses (report only on accounts addresses that begin with this prefix, default matches all accounts)\r\n\r\nQUANTITY, 8 bytes - the maximum number of accounts to retreive\r\n\r\nBoolean - if true, do not return byte code from the address, if false return the byte code (if any)\r\n\r\nBoolean - if true, do not return storage from the address, if false return storage (if any)\r\n\r\nBoolean - if true, do not return missing preimages, if false do return them\r\n\r\n**Returns**\r\n\r\nObject - An object of type IteratorDump which is defined as\r\n\r\nroot: string - IteratorDump\r\n\r\naccounts: map[common.Address]DumpAccount - IteratorDump\r\n\r\nnext: []byte - IteratorDump\r\n\r\nbalance: string - DumpAccount\r\n\r\nnonce: uint64 - DumpAccount\r\n\r\nroot: string - DumpAccount\r\n\r\ncodeHash: string - DumpAccount\r\n\r\ncode: string - DumpAccount\r\n\r\nstorage: map[string]string - DumpAccount\r\n\r\naddress: common.Address - (optional) DumpAccount\r\n\r\nsecureKey: hexutil.Bytes - DumpAccount\r\n\r\n"
          },
          "response": []
        },
        {
          "name": "getModifiedAccountsByNumber",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "019465f3-a3d5-457c-bd86-4f50b02e518c",
                "exec": [
                  "var isSilk = pm.environment.get('HOST') == \"{{SILKRPC}}\";",
                  "if (isSilk) {",
                  "  utils.notImplemented(\"debug_getModifiedAccountsByNumber\", pm.response.json())",
                  "  return;",
                  "}",
                  "var expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": [",
                  "    \"0x8764b360076809bba4635c4281c3f44c1677d013\",",
                  "    \"0x1194e966965418c7d73a42cceeb254d875860356\",",
                  "    \"0x42e6723a0c884e922240e56d7b618bec96f35800\",",
                  "    \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\",",
                  "    \"0xdf88d2cf450e1134e0cd794c3b89d648c3269ffc\",",
                  "    \"0x2a65aca4d5fc5b5c859090a6c34d164135398226\",",
                  "    \"0x68795c4aa09d6f4ed3e5deddf8c2ad3049a601da\",",
                  "    \"0x8751355da8bb4854620e247904fc64c2dbff0484\"",
                  "  ]",
                  "}",
                  "",
                  "pm.test('Has correct result', function() {",
                  "  const jsonData = pm.response.json();",
                  "  jsonData.result = jsonData.result.sort();",
                  "  expected.result = expected.result.sort();",
                  "  pm.expect(jsonData).to.be.deep.equal(expected);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"debug_getModifiedAccountsByNumber\",\n\t\"params\":[\n\t\t\"0xccccd\",\n\t\t\"0xcccce\"\n\t],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns a list of accounts modified in the given block.\r\n\r\n**Parameters**\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\"\r\n\r\nTAG - Integer block number or one of \"earliest\", \"latest\" or \"pending\". Optional, defaults to startNum\r\n\r\n**Returns**\r\n\r\nArray of DATA, 20 Bytes - Array of addresses modifed in the given block range"
          },
          "response": []
        },
        {
          "name": "getModifiedAccountsByHash",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bbbf909f-9ce2-4558-8e29-abc5ac1f5899",
                "exec": [
                  "var isSilk = pm.environment.get('HOST') == \"{{SILKRPC}}\";",
                  "if (isSilk) {",
                  "  utils.notImplemented(\"debug_getModifiedAccountsByHash\", pm.response.json())",
                  "  return;",
                  "}",
                  "var expected = {",
                  "  \"jsonrpc\": \"2.0\",",
                  "  \"id\": \"1\",",
                  "  \"result\": [",
                  "    \"0x8764b360076809bba4635c4281c3f44c1677d013\",",
                  "    \"0x1194e966965418c7d73a42cceeb254d875860356\",",
                  "    \"0x42e6723a0c884e922240e56d7b618bec96f35800\",",
                  "    \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\",",
                  "    \"0xdf88d2cf450e1134e0cd794c3b89d648c3269ffc\",",
                  "    \"0x2a65aca4d5fc5b5c859090a6c34d164135398226\",",
                  "    \"0x68795c4aa09d6f4ed3e5deddf8c2ad3049a601da\",",
                  "    \"0x8751355da8bb4854620e247904fc64c2dbff0484\"",
                  "  ]",
                  "}",
                  "",
                  "pm.test('Has correct result', function() {",
                  "  const jsonData = pm.response.json();",
                  "  jsonData.result = jsonData.result.sort();",
                  "  expected.result = expected.result.sort();",
                  "  pm.expect(jsonData).to.be.deep.equal(expected);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"debug_getModifiedAccountsByHash\",\n\t\"params\":[\n\t\t\"0x2a1af018e33bcbd5015c96a356117a5251fcccf94a9c7c8f0148e25fdee37aec\",\n\t\t\"0x4e3d3e7eee350df0ee6e94a44471ee2d22cfb174db89bbf8e6c5f6aef7b360c5\"\n\t],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns a list of accounts modified in the given block.\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - the first hash of block at which to retreive data\r\n\r\nDATA, 32 Bytes - the last hash of block at which to retreive data. Optional, defaults to startHash\r\n\r\n**Returns**\r\n\r\nArray of DATA, 20 Bytes - Array of addresses modifed in the given block range"
          },
          "response": []
        },
        {
          "name": "traceTransaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a2e80bc5-85c6-4415-8e06-22ebe0d310cd",
                "exec": [
                  "var isSilk = pm.environment.get('HOST') == \"{{SILKRPC}}\";",
                  "if (isSilk) {",
                  "  utils.notImplemented(\"debug_traceTransaction\", pm.response.json())",
                  "  return;",
                  "}",
                  "var expected = [",
                  "  {",
                  "    \"pc\": 0,",
                  "    \"op\": \"PUSH1\",",
                  "    \"gas\": 179000,",
                  "    \"gasCost\": 3,",
                  "    \"depth\": 1,",
                  "    \"stack\": [],",
                  "    \"memory\": [],",
                  "    \"storage\": {}",
                  "  },",
                  "  {",
                  "    \"pc\": 2,",
                  "    \"op\": \"PUSH1\",",
                  "    \"gas\": 178997,",
                  "    \"gasCost\": 3,",
                  "    \"depth\": 1,",
                  "    \"stack\": [",
                  "      \"0000000000000000000000000000000000000000000000000000000000000060\"",
                  "    ],",
                  "    \"memory\": [],",
                  "    \"storage\": {}",
                  "  },",
                  "  {",
                  "    \"pc\": 284,",
                  "    \"op\": \"STOP\",",
                  "    \"gas\": 81142,",
                  "    \"gasCost\": 0,",
                  "    \"depth\": 1,",
                  "    \"stack\": [],",
                  "    \"memory\": [",
                  "      \"0000000000000000000000000000000000000000000000000000000000000003\",",
                  "      \"0000000000000000000000000000000000000000000000000000000000000000\",",
                  "      \"0000000000000000000000000000000000000000000000000000000000000060\"",
                  "    ],",
                  "    \"storage\": {",
                  "      \"0000000000000000000000000000000000000000000000000000000000000000\": \"0000000000000000000000000000000000000000000000000000000000000000\",",
                  "      \"0000000000000000000000000000000000000000000000000000000000000001\": \"0000000000000000000000000000000000000000000000000000000000000001\",",
                  "      \"0000000000000000000000000000000000000000000000000000000000000002\": \"0000000000000000000000000000000000000000000000000000000000000001\",",
                  "      \"0000000000000000000000000000000000000000000000000000000000000003\": \"0000000000000000000000000000000000000000000000000000000000000006\",",
                  "      \"c2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\": \"000000000000000000000000881b0a4e9c55d08e31d8d3c022144d75a454211c\",",
                  "      \"c2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c\": \"000000000000000000000000fd2605a2bf58fdbb90db1da55df61628b47f9e8c\"",
                  "    }",
                  "  }",
                  "]",
                  "",
                  "pm.test('Has correct result', function() {",
                  "  // because the returned data is pretty large, we only test the first two value and the last",
                  "  var jsonData = pm.response.json()",
                  "  pm.expect(jsonData.result.structLogs[0]).to.be.deep.equal(expected[0]);",
                  "  pm.expect(jsonData.result.structLogs[1]).to.be.deep.equal(expected[1]);",
                  "  pm.expect(jsonData.result.structLogs[jsonData.result.structLogs.length-1]).to.be.deep.equal(expected[2]);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"debug_traceTransaction\",\n\t\"params\":[\n\t\t\"0x893c428fed019404f704cf4d9be977ed9ca01050ed93dccdd6c169422155586f\"\n\t],\n\t\"id\":\"1\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{HOST}}",
              "host": ["{{HOST}}"]
            },
            "description": "Returns Geth style transaction traces.\r\n\r\n**Parameters**\r\n\r\nDATA, 32 Bytes - hash of transaction to trace.\r\n\r\n**Returns**\r\n\r\nSTACK_TRACE - An array of stack traces as per Geth"
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "deprecated",
      "item": [
        {
          "name": "eth",
          "item": [
            {
              "name": "accounts (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "49fab8c4-6858-4475-89f9-2c06a0acaaa0",
                    "exec": ["utils.isDeprecated(\"eth_accounts\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_accounts\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns a list of addresses owned by the client.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nArray of DATA, 20 Bytes - addresses owned by the client"
              },
              "response": []
            },
            {
              "name": "getCompilers (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71e1fac7-5027-4ec7-8a6f-b7ebba79ebc7",
                    "exec": ["utils.isDeprecated(\"eth_getCompilers\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_getCompilers\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns a list of available compilers in the client.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nObject - An object of type StringArray of available compilers"
              },
              "response": []
            },
            {
              "name": "compileLLL (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c143eb2a-869c-4d61-b77a-f1d96e35867d",
                    "exec": ["utils.isDeprecated(\"eth_compileLLL\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_compileLLL\",\n\t\"params\":[\n\t\t\"(returnlll (suicide (caller)))\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns compiled LLL code.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nString - The source code\r\n\r\n**Returns**\r\n\r\nDATA - The compiled source code"
              },
              "response": []
            },
            {
              "name": "compileSolidity (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a225f789-727a-45b7-8233-b83fa9710f0b",
                    "exec": ["utils.isDeprecated(\"eth_compileSolidity\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_compileSolidity\",\n\t\"params\":[\n\t\t\"contract test { function multiply(uint a) returns(uint d) {   return a * 7;   } }\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns compiled solidity code.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nString - The source code\r\n\r\n**Returns**\r\n\r\nDATA - The compiled source code"
              },
              "response": []
            },
            {
              "name": "compileSerpent (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "281f3795-1854-47a9-b256-2e14f32ebff6",
                    "exec": ["utils.isDeprecated(\"eth_compileSerpent\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_compileSerpent\",\n\t\"params\":[\"/* some serpent */\"],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns compiled serpent code.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nString - The source code\r\n\r\n**Returns**\r\n\r\nDATA - The compiled source code"
              },
              "response": []
            },
            {
              "name": "sign (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3a959a5-3f2a-417b-ab6f-101ca25235ab",
                    "exec": ["utils.isDeprecated(\"eth_sign\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ccbe7bce-2ee4-4872-884d-884de423d002",
                    "exec": [
                      "var isParity = pm.environment.get('HOST') == \"{{PARITY}}\";",
                      "if (isParity) {",
                      "  pm.test.skip('Skipping for parity')",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"eth_sign\",\n\t\"params\":[\n\t\t\"0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\", \n\t\t\"0xdeadbeef\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Calculates an Ethereum specific signature with: sign(keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))).\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nDATA, 20 Bytes - address\r\n\r\nDATA - message to sign\r\n\r\n**Returns**\r\n\r\nDATA - The signature"
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {},
          "_postman_isSubFolder": true
        },
        {
          "name": "db",
          "item": [
            {
              "name": "getString (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "adc610c7-58da-4b14-86eb-5ad2b7e1bb42",
                    "exec": ["utils.isDeprecated(\"db_getString\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"db_getString\",\n\t\"params\":[\n\t\t\"testDB\",\n\t\t\"myKey\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns string from the local database.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nString - Database name\r\n\r\nString - Key name\r\n\r\n**Returns**\r\n\r\nSTRING - The previously stored string"
              },
              "response": []
            },
            {
              "name": "putString (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42952899-d220-432e-9c2f-5fd8b7f63a10",
                    "exec": ["utils.isDeprecated(\"db_putString\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "765518a5-fcb0-4c40-bfd9-91a7dabaa24c",
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"db_putString\",\n\t\"params\":[\n\t\t\"testDB\",\n\t\t\"myKey\",\n\t\t\"myString\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Stores a string in the local database.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nString - Database name\r\n\r\nString - Key name\r\n\r\nString - String to store\r\n\r\n**Returns**\r\n\r\nBoolean - true if the value was stored, false otherwise"
              },
              "response": []
            },
            {
              "name": "getHex (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1877532c-58ef-49e6-9adc-298e68e8e519",
                    "exec": ["utils.isDeprecated(\"db_getHex\", pm.response.json());"],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"db_getHex\"\n\t,\"params\":[\n\t\t\"testDB\",\n\t\t\"myKey\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns binary data from the local database.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nString - Database name\r\n\r\nString - Key name\r\n\r\n**Returns**\r\n\r\nDATA - The previously stored data"
              },
              "response": []
            },
            {
              "name": "putHex (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb8f901f-11f6-40f1-96ba-db322d1bc017",
                    "exec": ["utils.isDeprecated(\"db_putHex\", pm.response.json())", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"db_putHex\",\n\t\"params\":[\n\t\t\"testDB\",\n\t\t\"myKey\",\n\t\t\"0x68656c6c6f20776f726c64\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Stores binary data in the local database.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nString - Database name\r\n\r\nString - Key name\r\n\r\nDATA - The data to store\r\n\r\n**Returns**\r\n\r\nBoolean - true if the value was stored, false otherwise"
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {},
          "_postman_isSubFolder": true
        },
        {
          "name": "shh",
          "item": [
            {
              "name": "post (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6f40e9ca-755e-42e3-9532-c629c98d7038",
                    "exec": ["utils.isDeprecated(\"shh_post\", pm.response.json());", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"shh_post\",\n\t\"params\":[{\n\t\t\"from\":\"0xc931d93e97ab07fe42d923478ba2465f2..\",\n\t\t\"topics\": [\n\t\t\t\"0x68656c6c6f20776f726c64\"\n\t\t],\n\t\t\"payload\":\"0x68656c6c6f20776f726c64\",\n\t\t\"ttl\":\"0x64\",\n\t\t\"priority\":\"0x64\"\n\t}],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Sends a whisper message.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nObject - An object of type Post\r\n\r\n**Returns**\r\n\r\nBoolean - true if the message was send, false otherwise"
              },
              "response": []
            },
            {
              "name": "version (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4d2835ac-ef75-4a3e-ac48-8e6afa2508cb",
                    "exec": ["utils.isDeprecated(\"shh_version\", pm.response.json());", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"shh_version\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Returns the current whisper protocol version.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nSTRING - The current whisper protocol version"
              },
              "response": []
            },
            {
              "name": "newIdentity (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5ca5bc1-1972-4479-a5cb-ea621c40c1f2",
                    "exec": ["utils.isDeprecated(\"shh_newIdentity\", pm.response.json());", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"shh_newIdentity\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Creates new whisper identity in the client.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nDATA, 60 Bytes - The address of the new identiy"
              },
              "response": []
            },
            {
              "name": "hasIdentity (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "237a0212-f467-4bc7-825d-ce8eb97d02e7",
                    "exec": ["utils.isDeprecated(\"shh_hasIdentity\", pm.response.json());", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"shh_hasIdentity\",\n\t\"params\":[\n\t\t\"0x04f96a5e25610293e42a73908e93ccc8c4d4dc0edcfa9fa872f50cb214e08ebf61a03e245533f97284d442460f2998cd41858798ddfd4d661997d3940272b717b1\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Checks if the client hold the private keys for a given identity.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nDATA, 60 Bytes - The identity address to check\r\n\r\n**Returns**\r\n\r\nBoolean - true if the client holds the privatekey for that identity, false otherwise"
              },
              "response": []
            },
            {
              "name": "newGroup (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "498a4713-d7bf-4849-a794-bcb4ae1b13f6",
                    "exec": ["utils.isDeprecated(\"shh_newGroup\", pm.response.json());", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"shh_newGroup\",\n\t\"params\":[],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Create a new group.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nNone\r\n\r\n**Returns**\r\n\r\nDATA, 60 Bytes - The address of the new group"
              },
              "response": []
            },
            {
              "name": "addToGroup (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "59a5f8d0-6cb0-4948-9a94-a67494d56deb",
                    "exec": ["utils.isDeprecated(\"shh_addToGroup\", pm.response.json());", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"shh_addToGroup\",\n\t\"params\":[\n\t\t\"0x04f96a5e25610293e42a73908e93ccc8c4d4dc0edcfa9fa872f50cb214e08ebf61a03e245533f97284d442460f2998cd41858798ddfd4d661997d3940272b717b1\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Add to a group.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nDATA, 60 Bytes - The identity address to add to a group\r\n\r\n**Returns**\r\n\r\nBoolean - true if the identity was successfully added to the group, false otherwise"
              },
              "response": []
            },
            {
              "name": "newFilter (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3c1325c-f738-473f-b981-7a8f271377bd",
                    "exec": ["utils.isDeprecated(\"shh_newFilter\", pm.response.json());", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"shh_newFilter\",\n\t\"params\":[{\n\t\t\"topics\": [\n\t\t\t\"0x12341234bf4b564f\"\n\t\t],\n\t\t\"to\": \"0x2341234bf4b2341234bf4b564f...\"\n\t}],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Creates filter to notify, when client receives whisper message matching the filter options.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nObject - An object of type Filter\r\n\r\n**Returns**\r\n\r\nQUANTITY - The newly created filter id"
              },
              "response": []
            },
            {
              "name": "uninstallFilter (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f635382-7c93-456e-a4e0-6c9a31c3ff3e",
                    "exec": ["utils.isDeprecated(\"shh_uninstallFilter\", pm.response.json());", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"shh_uninstallFilter\",\n\t\"params\":[\n\t\t\"0x7\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Uninstalls a filter with given id.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nQUANTITY - The filter id\r\n\r\n**Returns**\r\n\r\nBoolean - true if the filter was successfully uninstalled, false otherwise"
              },
              "response": []
            },
            {
              "name": "getFilterChanges (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1b86fec4-c310-4ad4-b87d-d6bcaa3e707c",
                    "exec": ["utils.isDeprecated(\"shh_getFilterChanges\", pm.response.json());", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"shh_getFilterChanges\",\n\t\"params\":[\n\t\t\"0x7\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Polling method for whisper filters. Returns new messages since the last call of this method.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nQUANTITY - The filter id\r\n\r\n**Returns**\r\n\r\nObject - An object of type MessageArray received since last poll"
              },
              "response": []
            },
            {
              "name": "getMessages (deprecated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8cdf20b9-4b07-43ad-a96e-66d49cacb651",
                    "exec": ["utils.isDeprecated(\"shh_getMessages\", pm.response.json());", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"jsonrpc\":\"2.0\",\n\t\"method\":\"shh_getMessages\",\n\t\"params\":[\n\t\t\"0x7\"\n\t],\n\t\"id\":\"1\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{HOST}}",
                  "host": ["{{HOST}}"]
                },
                "description": "Get all messages matching a filter. Unlike shh_getFilterChanges this returns all messages.\r\n\r\n**Deprecated** This function will be removed in the future.\r\n\r\n**Parameters**\r\n\r\nQUANTITY - The filter id\r\n\r\n**Returns**\r\n\r\nObject - An object of type MessageArray received since last poll"
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {},
          "_postman_isSubFolder": true
        }
      ],
      "description": "RPC commands in this group have been deprecated.",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "f3715e8c-8219-4b4c-a797-283787c030da",
            "type": "text/javascript",
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "b1b0fe57-01a2-480a-a5bf-fd11942fd43c",
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ],
      "protocolProfileBehavior": {}
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "28916081-d267-4803-b88f-38f0cfac83f3",
        "type": "text/javascript",
        "exec": [
          "utils = {",
          "  notImplemented: function(methodName, jsonData) {",
          "    var isErigon = pm.environment.get('HOST') == \"{{ERIGON}}\";",
          "    var isSilk = pm.environment.get('HOST') == \"{{SILKRPC}}\";",
          "    if (!isErigon && !isSilk) // only test erigon",
          "      return;",
          "",
          "    var testNotImplemented = pm.globals.get('TEST_NOT_IMPLEMENTED') === 'true';",
          "    if (testNotImplemented) { // defaults to false, therefore don't test",
          "      pm.test('NOT IMPLEMENTED', function() {",
          "        pm.expect(false).to.be(true);",
          "      })",
          "    } else {",
          "      // pass unless user has explicitly told us to test not implemented",
          "      var expected = {",
          "        \"jsonrpc\": \"2.0\",",
          "        \"id\": \"1\",",
          "        \"error\": {",
          "          \"code\": -32000,",
          "          \"message\": \"the method is currently not implemented: \" + methodName",
          "        }",
          "      }",
          "      if (jsonData.error)",
          "        delete jsonData.error.data;",
          "      pm.test('NOT IMPLEMENTED', function() {",
          "        pm.expect(jsonData).to.deep.equals(expected);",
          "      })",
          "    }",
          "  },",
          "",
          "  isDeprecated: function(methodName, jsonData) {",
          "    var isErigon = pm.environment.get('HOST') == \"{{ERIGON}}\";",
          "    var isSilk = pm.environment.get('HOST') == \"{{SILKRPC}}\";",
          "    if (!isErigon && !isSilk) // only test erigon",
          "      return;",
          "",
          "    var testDeprecated = pm.globals.get('TEST_DEPRECATED') === 'true';",
          "    if (testDeprecated) { // defaults to false, therefore don't test",
          "      pm.test('DEPRECATED', function() {",
          "      console.log(\"testDeprecated2: \", testDeprecated)",
          "        pm.expect(false).to.be(true);",
          "      })",
          "    } else {",
          "      // pass unless user has explicitly told us to fail deprecated",
          "      var expected = {",
          "        \"jsonrpc\": \"2.0\",",
          "        \"id\": \"1\",",
          "        \"error\": {",
          "          \"code\": -32000,",
          "          \"message\": \"the method has been deprecated: \" + methodName",
          "        }",
          "      }",
          "      if (jsonData.error)",
          "        delete jsonData.error.data;",
          "      pm.test('DEPRECATED', function() {",
          "        pm.expect(jsonData).to.deep.equals(expected);",
          "      })",
          "    }",
          "  },",
          "",
          "  cannotTest: function(methodName, jsonData) {",
          "    var isErigon = pm.environment.get('HOST') == \"{{ERIGON}}\";",
          "    var isSilk = pm.environment.get('HOST') == \"{{SILKRPC}}\";",
          "    if (!isErigon && !isSilk) // only test erigon",
          "      return;",
          "",
          "      var expected = {",
          "        \"jsonrpc\": \"2.0\",",
          "        \"id\": \"1\",",
          "        \"result\": \"Cannot test - value changes\"",
          "      }",
          "    pm.test('VALUE CHANGES, CANNOT TEST: ' + methodName, function() {",
          "        jsonData.result = \"Cannot test - value changes\";",
          "        pm.expect(jsonData).to.deep.equals(expected);",
          "    })",
          "  },",
          "};"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "be6e47aa-dcea-4eaf-941f-889669172f43",
        "type": "text/javascript",
        "exec": [
          "pm.test('Base tests', function() {",
          "    const jsonData = pm.response.json();",
          "    pm.response.to.have.status(200);",
          "    pm.expect(jsonData !== null)",
          "    jsonData.errors == null || pm.expect(jsonData.errors).to.be.empty;",
          "})",
          ""
        ]
      }
    }
  ],
  "protocolProfileBehavior": {}
}
