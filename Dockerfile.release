ARG RELEASE_DOCKER_BASE_IMAGE="alpine:3.20.1" \
    CI_CD_MAIN_BUILDER_IMAGE="golang:1.22-bookworm" \
    CI_CD_MAIN_TARGET_BASE_IMAGE="alpine:3.20.1" \
    EXPOSED_PORTS="8545 \
       8551 \
       8546 \
       30303 \
       30303/udp \
       42069 \
       42069/udp \
       8080 \
       9090 \
       6060"

## Note TARGETARCH is a crucial variable:
##   see https://docs.docker.com/reference/dockerfile/#automatic-platform-args-in-the-global-scope

### Release Dockerfile
FROM ${RELEASE_DOCKER_BASE_IMAGE} AS temporary
ARG TARGETARCH \
    TARGETVARIANT \
    VERSION=${VERSION} \
    APPLICATION

COPY ${APPLICATION}_${VERSION}_linux_${TARGETARCH}${TARGETVARIANT}.tar.gz /tmp/${APPLICATION}.tar.gz

RUN tar xzvf /tmp/${APPLICATION}.tar.gz -C /tmp && \
    mv /tmp/${APPLICATION}_${VERSION}_linux_${TARGETARCH}${TARGETVARIANT} /tmp/${APPLICATION}

FROM ${RELEASE_DOCKER_BASE_IMAGE} AS release

ARG USER=erigon \
    GROUP=erigon \
    APPLICATION \
    TARGETARCH \
    EXPOSED_PORTS

STOPSIGNAL 2

SHELL ["/bin/bash", "-c"]

RUN --mount=type=bind,from=temporary,source=/tmp/${APPLICATION},target=/tmp/${APPLICATION} \
    echo Installing on ${TARGETOS} with variant ${TARGETVARIANT} && \
    adduser --group ${GROUP} && \
    adduser --system --ingroup ${GROUP} --home /home/${USER} --shell /bin/bash ${USER} && \
    apt update -y && \
    apt install -y --no-install-recommends ca-certificates && \
    apt clean && \
    rm -rf /var/lib/apt/lists/* && \
    if [ "x${TARGETARCH}" == "xamd64" ]; then \
        echo "Installing libsilkworm_capi.so library to /lib/x86_64-linux-gnu/ in case amd64 architecture:"; \
        find /tmp/${APPLICATION} -name libsilkworm_capi.so -type f | xargs -I % install -m a=r -v % /lib/x86_64-linux-gnu/; \
        echo "Done." ; \
    fi && \    
    install -d -o ${USER} -g ${GROUP} /home/${USER}/.local /home/${USER}/.local/share /home/${USER}/.local/share/erigon && \
    install -o ${USER} -g ${GROUP} /tmp/${APPLICATION}/erigon /usr/local/bin/ && \
    install -o ${USER} -g ${GROUP} /tmp/${APPLICATION}/integration /usr/local/bin/ && \
    install -o ${USER} -g ${GROUP} /tmp/${APPLICATION}/diag /usr/local/bin/ && \
    install -o ${USER} -g ${GROUP} /tmp/${APPLICATION}/sentry /usr/local/bin/ && \
    install -o ${USER} -g ${GROUP} /tmp/${APPLICATION}/txpool /usr/local/bin/ && \
    install -o ${USER} -g ${GROUP} /tmp/${APPLICATION}/downloader /usr/local/bin/ && \
    install -o ${USER} -g ${GROUP} /tmp/${APPLICATION}/rpcdaemon /usr/local/bin/

VOLUME [ "/home/${USER}" ]
WORKDIR /home/${USER}

USER ${USER}

EXPOSE ${EXPOSED_PORTS}

ENTRYPOINT [ "/usr/local/bin/erigon" ]

### End of Release Dockerfile


### CI-CD : main branch docker image publishing for each new commit id
FROM ${CI_CD_MAIN_BUILDER_IMAGE} AS ci-cd-main-branch-builder

COPY /build-amd64 /build-amd64/
COPY /build-arm64 /build-arm64/

RUN echo "DEBUG: content of build-amd64" && ls -l /build-amd64 && \
    echo && \
    echo "DEBUG: content of build-arm64" && ls -l /build-arm64


FROM ${CI_CD_MAIN_TARGET_BASE_IMAGE} AS ci-cd-main-branch
ARG USER=erigon \
    GROUP=erigon \
    TARGETARCH \
    EXPOSED_PORTS

RUN --mount=type=bind,from=ci-cd-main-branch-builder,source=/build-${TARGETARCH},target=/tmp/erigon \
    apk add --no-cache ca-certificates tzdata libstdc++ && \
    addgroup ${GROUP} && \
    adduser -D -h /home/${USER} -G ${GROUP} ${USER} && \
    install -d -o ${USER} -g ${GROUP} /home/${USER}/.local /home/${USER}/.local/share /home/${USER}/.local/share/erigon && \
    install -o ${USER} -g ${GROUP} /tmp/erigon/* /usr/local/bin/

VOLUME [ "/home/${USER}" ]
WORKDIR /home/${USER}

USER ${USER}
EXPOSE ${EXPOSED_PORTS}

ENTRYPOINT [ "/usr/local/bin/erigon" ]

### End of CI-CD : main branch docker image publishing for each new commit id