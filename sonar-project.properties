sonar.projectKey=ledgerwatch_erigon
sonar.organization=ledgerwatch
sonar.projectName=erigon

sonar.sources=.
sonar.exclusions=\
  **/*.pb.go,\
  **/gen_*.go,\
  **/*_gen.go,\
  **/*_mock.go,\
  **/mock_*.go,\
  **/graphql/graph/generated.go,\
  **/*.sol,\
  common/compiler/*.v.py,\
  rpc/testdata/**.js,\
  eth/tracers/js/internal/tracers/**.js

sonar.tests=.
sonar.test.inclusions=**/*_test.go,tests/**

sonar.go.coverage.reportPaths=coverage.out,erigon-lib/coverage.out

# The only way to get an accurate analysis of C/C++/Objective-C files is
# by using the SonarSource build-wrapper and setting the property "sonar.cfamily.build-wrapper-output"
# or by using Clang Compilation Database and setting the property "sonar.cfamily.compile-commands".
#
# If you don't want to analyze C/C++/Objective-C files, then prevent them from being analyzed
# by setting the following properties:
sonar.c.file.suffixes=-
sonar.cpp.file.suffixes=-
sonar.objc.file.suffixes=-

# Specify whether to scan python files in the repo following python 2 or 3 rules
sonar.python.version=3.12
