// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package txpool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TxpoolClient is the client API for Txpool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TxpoolClient interface {
	// preserves incoming order, changes amount, unknown hashes will be omitted
	FindUnknownTransactions(ctx context.Context, in *TxHashes, opts ...grpc.CallOption) (*TxHashes, error)
	// preserves incoming order and amount
	ImportTransactions(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportReply, error)
	// preserves incoming order and amount, if some transaction doesn't exists in pool - returns nil in this slot
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsReply, error)
	// pending transactions stream
	Pending(ctx context.Context, in *PendingRequest, opts ...grpc.CallOption) (Txpool_PendingClient, error)
}

type txpoolClient struct {
	cc grpc.ClientConnInterface
}

func NewTxpoolClient(cc grpc.ClientConnInterface) TxpoolClient {
	return &txpoolClient{cc}
}

func (c *txpoolClient) FindUnknownTransactions(ctx context.Context, in *TxHashes, opts ...grpc.CallOption) (*TxHashes, error) {
	out := new(TxHashes)
	err := c.cc.Invoke(ctx, "/txpool.Txpool/FindUnknownTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) ImportTransactions(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportReply, error) {
	out := new(ImportReply)
	err := c.cc.Invoke(ctx, "/txpool.Txpool/ImportTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsReply, error) {
	out := new(GetTransactionsReply)
	err := c.cc.Invoke(ctx, "/txpool.Txpool/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) Pending(ctx context.Context, in *PendingRequest, opts ...grpc.CallOption) (Txpool_PendingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Txpool_ServiceDesc.Streams[0], "/txpool.Txpool/Pending", opts...)
	if err != nil {
		return nil, err
	}
	x := &txpoolPendingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Txpool_PendingClient interface {
	Recv() (*PendingReply, error)
	grpc.ClientStream
}

type txpoolPendingClient struct {
	grpc.ClientStream
}

func (x *txpoolPendingClient) Recv() (*PendingReply, error) {
	m := new(PendingReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TxpoolServer is the server API for Txpool service.
// All implementations must embed UnimplementedTxpoolServer
// for forward compatibility
type TxpoolServer interface {
	// preserves incoming order, changes amount, unknown hashes will be omitted
	FindUnknownTransactions(context.Context, *TxHashes) (*TxHashes, error)
	// preserves incoming order and amount
	ImportTransactions(context.Context, *ImportRequest) (*ImportReply, error)
	// preserves incoming order and amount, if some transaction doesn't exists in pool - returns nil in this slot
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsReply, error)
	// pending transactions stream
	Pending(*PendingRequest, Txpool_PendingServer) error
	mustEmbedUnimplementedTxpoolServer()
}

// UnimplementedTxpoolServer must be embedded to have forward compatible implementations.
type UnimplementedTxpoolServer struct {
}

func (UnimplementedTxpoolServer) FindUnknownTransactions(context.Context, *TxHashes) (*TxHashes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUnknownTransactions not implemented")
}
func (UnimplementedTxpoolServer) ImportTransactions(context.Context, *ImportRequest) (*ImportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportTransactions not implemented")
}
func (UnimplementedTxpoolServer) GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedTxpoolServer) Pending(*PendingRequest, Txpool_PendingServer) error {
	return status.Errorf(codes.Unimplemented, "method Pending not implemented")
}
func (UnimplementedTxpoolServer) mustEmbedUnimplementedTxpoolServer() {}

// UnsafeTxpoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TxpoolServer will
// result in compilation errors.
type UnsafeTxpoolServer interface {
	mustEmbedUnimplementedTxpoolServer()
}

func RegisterTxpoolServer(s grpc.ServiceRegistrar, srv TxpoolServer) {
	s.RegisterService(&Txpool_ServiceDesc, srv)
}

func _Txpool_FindUnknownTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).FindUnknownTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpool.Txpool/FindUnknownTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).FindUnknownTransactions(ctx, req.(*TxHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_ImportTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).ImportTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpool.Txpool/ImportTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).ImportTransactions(ctx, req.(*ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpool.Txpool/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_Pending_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PendingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TxpoolServer).Pending(m, &txpoolPendingServer{stream})
}

type Txpool_PendingServer interface {
	Send(*PendingReply) error
	grpc.ServerStream
}

type txpoolPendingServer struct {
	grpc.ServerStream
}

func (x *txpoolPendingServer) Send(m *PendingReply) error {
	return x.ServerStream.SendMsg(m)
}

// Txpool_ServiceDesc is the grpc.ServiceDesc for Txpool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Txpool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "txpool.Txpool",
	HandlerType: (*TxpoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindUnknownTransactions",
			Handler:    _Txpool_FindUnknownTransactions_Handler,
		},
		{
			MethodName: "ImportTransactions",
			Handler:    _Txpool_ImportTransactions_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Txpool_GetTransactions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pending",
			Handler:       _Txpool_Pending_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "txpool/txpool.proto",
}
