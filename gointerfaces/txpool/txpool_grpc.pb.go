// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package txpool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TxpoolClient is the client API for Txpool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TxpoolClient interface {
	// preserves incoming order, changes amount, unknown hashes will be omitted
	FindUnknown(ctx context.Context, in *TxHashes, opts ...grpc.CallOption) (*TxHashes, error)
	// Expecting signed transactions. Preserves incoming order and amount
	// Adding txs as local (use P2P to add remote txs)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error)
	// preserves incoming order and amount, if some transaction doesn't exists in pool - returns nil in this slot
	Transactions(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (*TransactionsReply, error)
	// subscribe to new transactions add event
	OnAdd(ctx context.Context, in *OnAddRequest, opts ...grpc.CallOption) (Txpool_OnAddClient, error)
	// subscribe to pending blocks event
	OnPendingBlock(ctx context.Context, in *OnPendingBlockRequest, opts ...grpc.CallOption) (Txpool_OnPendingBlockClient, error)
	// subscribe to mined blocks event
	OnMinedBlock(ctx context.Context, in *OnMinedBlockRequest, opts ...grpc.CallOption) (Txpool_OnMinedBlockClient, error)
	// subscribe to pending blocks event
	OnPendingLogs(ctx context.Context, in *OnPendingLogsRequest, opts ...grpc.CallOption) (Txpool_OnPendingLogsClient, error)
}

type txpoolClient struct {
	cc grpc.ClientConnInterface
}

func NewTxpoolClient(cc grpc.ClientConnInterface) TxpoolClient {
	return &txpoolClient{cc}
}

func (c *txpoolClient) FindUnknown(ctx context.Context, in *TxHashes, opts ...grpc.CallOption) (*TxHashes, error) {
	out := new(TxHashes)
	err := c.cc.Invoke(ctx, "/txpool.Txpool/FindUnknown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := c.cc.Invoke(ctx, "/txpool.Txpool/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) Transactions(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (*TransactionsReply, error) {
	out := new(TransactionsReply)
	err := c.cc.Invoke(ctx, "/txpool.Txpool/Transactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolClient) OnAdd(ctx context.Context, in *OnAddRequest, opts ...grpc.CallOption) (Txpool_OnAddClient, error) {
	stream, err := c.cc.NewStream(ctx, &Txpool_ServiceDesc.Streams[0], "/txpool.Txpool/OnAdd", opts...)
	if err != nil {
		return nil, err
	}
	x := &txpoolOnAddClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Txpool_OnAddClient interface {
	Recv() (*OnAddReply, error)
	grpc.ClientStream
}

type txpoolOnAddClient struct {
	grpc.ClientStream
}

func (x *txpoolOnAddClient) Recv() (*OnAddReply, error) {
	m := new(OnAddReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *txpoolClient) OnPendingBlock(ctx context.Context, in *OnPendingBlockRequest, opts ...grpc.CallOption) (Txpool_OnPendingBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &Txpool_ServiceDesc.Streams[1], "/txpool.Txpool/OnPendingBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &txpoolOnPendingBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Txpool_OnPendingBlockClient interface {
	Recv() (*OnPendingBlockReply, error)
	grpc.ClientStream
}

type txpoolOnPendingBlockClient struct {
	grpc.ClientStream
}

func (x *txpoolOnPendingBlockClient) Recv() (*OnPendingBlockReply, error) {
	m := new(OnPendingBlockReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *txpoolClient) OnMinedBlock(ctx context.Context, in *OnMinedBlockRequest, opts ...grpc.CallOption) (Txpool_OnMinedBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &Txpool_ServiceDesc.Streams[2], "/txpool.Txpool/OnMinedBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &txpoolOnMinedBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Txpool_OnMinedBlockClient interface {
	Recv() (*OnMinedBlockReply, error)
	grpc.ClientStream
}

type txpoolOnMinedBlockClient struct {
	grpc.ClientStream
}

func (x *txpoolOnMinedBlockClient) Recv() (*OnMinedBlockReply, error) {
	m := new(OnMinedBlockReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *txpoolClient) OnPendingLogs(ctx context.Context, in *OnPendingLogsRequest, opts ...grpc.CallOption) (Txpool_OnPendingLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Txpool_ServiceDesc.Streams[3], "/txpool.Txpool/OnPendingLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &txpoolOnPendingLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Txpool_OnPendingLogsClient interface {
	Recv() (*OnPendingLogsReply, error)
	grpc.ClientStream
}

type txpoolOnPendingLogsClient struct {
	grpc.ClientStream
}

func (x *txpoolOnPendingLogsClient) Recv() (*OnPendingLogsReply, error) {
	m := new(OnPendingLogsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TxpoolServer is the server API for Txpool service.
// All implementations must embed UnimplementedTxpoolServer
// for forward compatibility
type TxpoolServer interface {
	// preserves incoming order, changes amount, unknown hashes will be omitted
	FindUnknown(context.Context, *TxHashes) (*TxHashes, error)
	// Expecting signed transactions. Preserves incoming order and amount
	// Adding txs as local (use P2P to add remote txs)
	Add(context.Context, *AddRequest) (*AddReply, error)
	// preserves incoming order and amount, if some transaction doesn't exists in pool - returns nil in this slot
	Transactions(context.Context, *TransactionsRequest) (*TransactionsReply, error)
	// subscribe to new transactions add event
	OnAdd(*OnAddRequest, Txpool_OnAddServer) error
	// subscribe to pending blocks event
	OnPendingBlock(*OnPendingBlockRequest, Txpool_OnPendingBlockServer) error
	// subscribe to mined blocks event
	OnMinedBlock(*OnMinedBlockRequest, Txpool_OnMinedBlockServer) error
	// subscribe to pending blocks event
	OnPendingLogs(*OnPendingLogsRequest, Txpool_OnPendingLogsServer) error
	mustEmbedUnimplementedTxpoolServer()
}

// UnimplementedTxpoolServer must be embedded to have forward compatible implementations.
type UnimplementedTxpoolServer struct {
}

func (UnimplementedTxpoolServer) FindUnknown(context.Context, *TxHashes) (*TxHashes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUnknown not implemented")
}
func (UnimplementedTxpoolServer) Add(context.Context, *AddRequest) (*AddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTxpoolServer) Transactions(context.Context, *TransactionsRequest) (*TransactionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transactions not implemented")
}
func (UnimplementedTxpoolServer) OnAdd(*OnAddRequest, Txpool_OnAddServer) error {
	return status.Errorf(codes.Unimplemented, "method OnAdd not implemented")
}
func (UnimplementedTxpoolServer) OnPendingBlock(*OnPendingBlockRequest, Txpool_OnPendingBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method OnPendingBlock not implemented")
}
func (UnimplementedTxpoolServer) OnMinedBlock(*OnMinedBlockRequest, Txpool_OnMinedBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method OnMinedBlock not implemented")
}
func (UnimplementedTxpoolServer) OnPendingLogs(*OnPendingLogsRequest, Txpool_OnPendingLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method OnPendingLogs not implemented")
}
func (UnimplementedTxpoolServer) mustEmbedUnimplementedTxpoolServer() {}

// UnsafeTxpoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TxpoolServer will
// result in compilation errors.
type UnsafeTxpoolServer interface {
	mustEmbedUnimplementedTxpoolServer()
}

func RegisterTxpoolServer(s grpc.ServiceRegistrar, srv TxpoolServer) {
	s.RegisterService(&Txpool_ServiceDesc, srv)
}

func _Txpool_FindUnknown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).FindUnknown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpool.Txpool/FindUnknown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).FindUnknown(ctx, req.(*TxHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpool.Txpool/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_Transactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolServer).Transactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpool.Txpool/Transactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolServer).Transactions(ctx, req.(*TransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Txpool_OnAdd_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnAddRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TxpoolServer).OnAdd(m, &txpoolOnAddServer{stream})
}

type Txpool_OnAddServer interface {
	Send(*OnAddReply) error
	grpc.ServerStream
}

type txpoolOnAddServer struct {
	grpc.ServerStream
}

func (x *txpoolOnAddServer) Send(m *OnAddReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Txpool_OnPendingBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnPendingBlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TxpoolServer).OnPendingBlock(m, &txpoolOnPendingBlockServer{stream})
}

type Txpool_OnPendingBlockServer interface {
	Send(*OnPendingBlockReply) error
	grpc.ServerStream
}

type txpoolOnPendingBlockServer struct {
	grpc.ServerStream
}

func (x *txpoolOnPendingBlockServer) Send(m *OnPendingBlockReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Txpool_OnMinedBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnMinedBlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TxpoolServer).OnMinedBlock(m, &txpoolOnMinedBlockServer{stream})
}

type Txpool_OnMinedBlockServer interface {
	Send(*OnMinedBlockReply) error
	grpc.ServerStream
}

type txpoolOnMinedBlockServer struct {
	grpc.ServerStream
}

func (x *txpoolOnMinedBlockServer) Send(m *OnMinedBlockReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Txpool_OnPendingLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnPendingLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TxpoolServer).OnPendingLogs(m, &txpoolOnPendingLogsServer{stream})
}

type Txpool_OnPendingLogsServer interface {
	Send(*OnPendingLogsReply) error
	grpc.ServerStream
}

type txpoolOnPendingLogsServer struct {
	grpc.ServerStream
}

func (x *txpoolOnPendingLogsServer) Send(m *OnPendingLogsReply) error {
	return x.ServerStream.SendMsg(m)
}

// Txpool_ServiceDesc is the grpc.ServiceDesc for Txpool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Txpool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "txpool.Txpool",
	HandlerType: (*TxpoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindUnknown",
			Handler:    _Txpool_FindUnknown_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Txpool_Add_Handler,
		},
		{
			MethodName: "Transactions",
			Handler:    _Txpool_Transactions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnAdd",
			Handler:       _Txpool_OnAdd_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnPendingBlock",
			Handler:       _Txpool_OnPendingBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnMinedBlock",
			Handler:       _Txpool_OnMinedBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnPendingLogs",
			Handler:       _Txpool_OnPendingLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "txpool/txpool.proto",
}
