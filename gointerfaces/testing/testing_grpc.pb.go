// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package testing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestDriverClient is the client API for TestDriver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestDriverClient interface {
	// Returns number of available integration test caes in the test driver
	TestCaseCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TestCaseNumber, error)
	// Ask the test driver to start the test case with given number. As test case progresses, the driver sends reports via the stream
	// Test drivier also notifies about the end of test case via the stream
	StartTestCase(ctx context.Context, in *TestCaseNumber, opts ...grpc.CallOption) (TestDriver_StartTestCaseClient, error)
}

type testDriverClient struct {
	cc grpc.ClientConnInterface
}

func NewTestDriverClient(cc grpc.ClientConnInterface) TestDriverClient {
	return &testDriverClient{cc}
}

func (c *testDriverClient) TestCaseCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TestCaseNumber, error) {
	out := new(TestCaseNumber)
	err := c.cc.Invoke(ctx, "/testing.TestDriver/TestCaseCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testDriverClient) StartTestCase(ctx context.Context, in *TestCaseNumber, opts ...grpc.CallOption) (TestDriver_StartTestCaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestDriver_ServiceDesc.Streams[0], "/testing.TestDriver/StartTestCase", opts...)
	if err != nil {
		return nil, err
	}
	x := &testDriverStartTestCaseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestDriver_StartTestCaseClient interface {
	Recv() (*TestReport, error)
	grpc.ClientStream
}

type testDriverStartTestCaseClient struct {
	grpc.ClientStream
}

func (x *testDriverStartTestCaseClient) Recv() (*TestReport, error) {
	m := new(TestReport)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestDriverServer is the server API for TestDriver service.
// All implementations must embed UnimplementedTestDriverServer
// for forward compatibility
type TestDriverServer interface {
	// Returns number of available integration test caes in the test driver
	TestCaseCount(context.Context, *emptypb.Empty) (*TestCaseNumber, error)
	// Ask the test driver to start the test case with given number. As test case progresses, the driver sends reports via the stream
	// Test drivier also notifies about the end of test case via the stream
	StartTestCase(*TestCaseNumber, TestDriver_StartTestCaseServer) error
	mustEmbedUnimplementedTestDriverServer()
}

// UnimplementedTestDriverServer must be embedded to have forward compatible implementations.
type UnimplementedTestDriverServer struct {
}

func (UnimplementedTestDriverServer) TestCaseCount(context.Context, *emptypb.Empty) (*TestCaseNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestCaseCount not implemented")
}
func (UnimplementedTestDriverServer) StartTestCase(*TestCaseNumber, TestDriver_StartTestCaseServer) error {
	return status.Errorf(codes.Unimplemented, "method StartTestCase not implemented")
}
func (UnimplementedTestDriverServer) mustEmbedUnimplementedTestDriverServer() {}

// UnsafeTestDriverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestDriverServer will
// result in compilation errors.
type UnsafeTestDriverServer interface {
	mustEmbedUnimplementedTestDriverServer()
}

func RegisterTestDriverServer(s grpc.ServiceRegistrar, srv TestDriverServer) {
	s.RegisterService(&TestDriver_ServiceDesc, srv)
}

func _TestDriver_TestCaseCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestDriverServer).TestCaseCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.TestDriver/TestCaseCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestDriverServer).TestCaseCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestDriver_StartTestCase_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestCaseNumber)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestDriverServer).StartTestCase(m, &testDriverStartTestCaseServer{stream})
}

type TestDriver_StartTestCaseServer interface {
	Send(*TestReport) error
	grpc.ServerStream
}

type testDriverStartTestCaseServer struct {
	grpc.ServerStream
}

func (x *testDriverStartTestCaseServer) Send(m *TestReport) error {
	return x.ServerStream.SendMsg(m)
}

// TestDriver_ServiceDesc is the grpc.ServiceDesc for TestDriver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestDriver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testing.TestDriver",
	HandlerType: (*TestDriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestCaseCount",
			Handler:    _TestDriver_TestCaseCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartTestCase",
			Handler:       _TestDriver_StartTestCase_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "testing/testing.proto",
}
