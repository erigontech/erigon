// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ledgerwatch/erigon/cl/phase1/network/services (interfaces: BlobSidecarsService)
//
// Generated by this command:
//
//	mockgen -destination=./mock_services/blob_sidecars_service_mock.go -package=mock_services . BlobSidecarsService
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	cltypes "github.com/ledgerwatch/erigon/cl/cltypes"
	gomock "go.uber.org/mock/gomock"
)

// MockBlobSidecarsService is a mock of BlobSidecarsService interface.
type MockBlobSidecarsService struct {
	ctrl     *gomock.Controller
	recorder *MockBlobSidecarsServiceMockRecorder
}

// MockBlobSidecarsServiceMockRecorder is the mock recorder for MockBlobSidecarsService.
type MockBlobSidecarsServiceMockRecorder struct {
	mock *MockBlobSidecarsService
}

// NewMockBlobSidecarsService creates a new mock instance.
func NewMockBlobSidecarsService(ctrl *gomock.Controller) *MockBlobSidecarsService {
	mock := &MockBlobSidecarsService{ctrl: ctrl}
	mock.recorder = &MockBlobSidecarsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlobSidecarsService) EXPECT() *MockBlobSidecarsServiceMockRecorder {
	return m.recorder
}

// ProcessMessage mocks base method.
func (m *MockBlobSidecarsService) ProcessMessage(arg0 context.Context, arg1 *uint64, arg2 *cltypes.BlobSidecar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockBlobSidecarsServiceMockRecorder) ProcessMessage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockBlobSidecarsService)(nil).ProcessMessage), arg0, arg1, arg2)
}
