// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erigontech/erigon/cl/phase1/network/services (interfaces: BLSToExecutionChangeService)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./mock_services/bls_to_execution_change_service_mock.go -package=mock_services . BLSToExecutionChangeService
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	clparams "github.com/erigontech/erigon/cl/clparams"
	services "github.com/erigontech/erigon/cl/phase1/network/services"
	sentinelproto "github.com/erigontech/erigon/node/gointerfaces/sentinelproto"
	gomock "go.uber.org/mock/gomock"
)

// MockBLSToExecutionChangeService is a mock of BLSToExecutionChangeService interface.
type MockBLSToExecutionChangeService struct {
	ctrl     *gomock.Controller
	recorder *MockBLSToExecutionChangeServiceMockRecorder
	isgomock struct{}
}

// MockBLSToExecutionChangeServiceMockRecorder is the mock recorder for MockBLSToExecutionChangeService.
type MockBLSToExecutionChangeServiceMockRecorder struct {
	mock *MockBLSToExecutionChangeService
}

// NewMockBLSToExecutionChangeService creates a new mock instance.
func NewMockBLSToExecutionChangeService(ctrl *gomock.Controller) *MockBLSToExecutionChangeService {
	mock := &MockBLSToExecutionChangeService{ctrl: ctrl}
	mock.recorder = &MockBLSToExecutionChangeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBLSToExecutionChangeService) EXPECT() *MockBLSToExecutionChangeServiceMockRecorder {
	return m.recorder
}

// DecodeGossipMessage mocks base method.
func (m *MockBLSToExecutionChangeService) DecodeGossipMessage(data *sentinelproto.GossipData, version clparams.StateVersion) (*services.SignedBLSToExecutionChangeForGossip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeGossipMessage", data, version)
	ret0, _ := ret[0].(*services.SignedBLSToExecutionChangeForGossip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeGossipMessage indicates an expected call of DecodeGossipMessage.
func (mr *MockBLSToExecutionChangeServiceMockRecorder) DecodeGossipMessage(data, version any) *MockBLSToExecutionChangeServiceDecodeGossipMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeGossipMessage", reflect.TypeOf((*MockBLSToExecutionChangeService)(nil).DecodeGossipMessage), data, version)
	return &MockBLSToExecutionChangeServiceDecodeGossipMessageCall{Call: call}
}

// MockBLSToExecutionChangeServiceDecodeGossipMessageCall wrap *gomock.Call
type MockBLSToExecutionChangeServiceDecodeGossipMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBLSToExecutionChangeServiceDecodeGossipMessageCall) Return(arg0 *services.SignedBLSToExecutionChangeForGossip, arg1 error) *MockBLSToExecutionChangeServiceDecodeGossipMessageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBLSToExecutionChangeServiceDecodeGossipMessageCall) Do(f func(*sentinelproto.GossipData, clparams.StateVersion) (*services.SignedBLSToExecutionChangeForGossip, error)) *MockBLSToExecutionChangeServiceDecodeGossipMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBLSToExecutionChangeServiceDecodeGossipMessageCall) DoAndReturn(f func(*sentinelproto.GossipData, clparams.StateVersion) (*services.SignedBLSToExecutionChangeForGossip, error)) *MockBLSToExecutionChangeServiceDecodeGossipMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsMyGossipMessage mocks base method.
func (m *MockBLSToExecutionChangeService) IsMyGossipMessage(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMyGossipMessage", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMyGossipMessage indicates an expected call of IsMyGossipMessage.
func (mr *MockBLSToExecutionChangeServiceMockRecorder) IsMyGossipMessage(name any) *MockBLSToExecutionChangeServiceIsMyGossipMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMyGossipMessage", reflect.TypeOf((*MockBLSToExecutionChangeService)(nil).IsMyGossipMessage), name)
	return &MockBLSToExecutionChangeServiceIsMyGossipMessageCall{Call: call}
}

// MockBLSToExecutionChangeServiceIsMyGossipMessageCall wrap *gomock.Call
type MockBLSToExecutionChangeServiceIsMyGossipMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBLSToExecutionChangeServiceIsMyGossipMessageCall) Return(arg0 bool) *MockBLSToExecutionChangeServiceIsMyGossipMessageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBLSToExecutionChangeServiceIsMyGossipMessageCall) Do(f func(string) bool) *MockBLSToExecutionChangeServiceIsMyGossipMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBLSToExecutionChangeServiceIsMyGossipMessageCall) DoAndReturn(f func(string) bool) *MockBLSToExecutionChangeServiceIsMyGossipMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProcessMessage mocks base method.
func (m *MockBLSToExecutionChangeService) ProcessMessage(ctx context.Context, subnet *uint64, msg *services.SignedBLSToExecutionChangeForGossip) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", ctx, subnet, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockBLSToExecutionChangeServiceMockRecorder) ProcessMessage(ctx, subnet, msg any) *MockBLSToExecutionChangeServiceProcessMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockBLSToExecutionChangeService)(nil).ProcessMessage), ctx, subnet, msg)
	return &MockBLSToExecutionChangeServiceProcessMessageCall{Call: call}
}

// MockBLSToExecutionChangeServiceProcessMessageCall wrap *gomock.Call
type MockBLSToExecutionChangeServiceProcessMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBLSToExecutionChangeServiceProcessMessageCall) Return(arg0 error) *MockBLSToExecutionChangeServiceProcessMessageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBLSToExecutionChangeServiceProcessMessageCall) Do(f func(context.Context, *uint64, *services.SignedBLSToExecutionChangeForGossip) error) *MockBLSToExecutionChangeServiceProcessMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBLSToExecutionChangeServiceProcessMessageCall) DoAndReturn(f func(context.Context, *uint64, *services.SignedBLSToExecutionChangeForGossip) error) *MockBLSToExecutionChangeServiceProcessMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
