// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ledgerwatch/erigon/cl/phase1/network/services (interfaces: ProposerSlashingService)
//
// Generated by this command:
//
//	mockgen -destination=./mock_services/proposer_slashing_service_mock.go -package=mock_services . ProposerSlashingService
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	cltypes "github.com/ledgerwatch/erigon/cl/cltypes"
	gomock "go.uber.org/mock/gomock"
)

// MockProposerSlashingService is a mock of ProposerSlashingService interface.
type MockProposerSlashingService struct {
	ctrl     *gomock.Controller
	recorder *MockProposerSlashingServiceMockRecorder
}

// MockProposerSlashingServiceMockRecorder is the mock recorder for MockProposerSlashingService.
type MockProposerSlashingServiceMockRecorder struct {
	mock *MockProposerSlashingService
}

// NewMockProposerSlashingService creates a new mock instance.
func NewMockProposerSlashingService(ctrl *gomock.Controller) *MockProposerSlashingService {
	mock := &MockProposerSlashingService{ctrl: ctrl}
	mock.recorder = &MockProposerSlashingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProposerSlashingService) EXPECT() *MockProposerSlashingServiceMockRecorder {
	return m.recorder
}

// ProcessMessage mocks base method.
func (m *MockProposerSlashingService) ProcessMessage(arg0 context.Context, arg1 *uint64, arg2 *cltypes.ProposerSlashing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockProposerSlashingServiceMockRecorder) ProcessMessage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockProposerSlashingService)(nil).ProcessMessage), arg0, arg1, arg2)
}
