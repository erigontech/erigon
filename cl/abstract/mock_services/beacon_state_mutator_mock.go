// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ledgerwatch/erigon/cl/abstract (interfaces: BeaconStateMutator)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./mock_services/beacon_state_mutator_mock.go -package=mock_services . BeaconStateMutator
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	common "github.com/ledgerwatch/erigon-lib/common"
	clparams "github.com/ledgerwatch/erigon/cl/clparams"
	cltypes "github.com/ledgerwatch/erigon/cl/cltypes"
	solid "github.com/ledgerwatch/erigon/cl/cltypes/solid"
	gomock "go.uber.org/mock/gomock"
)

// MockBeaconStateMutator is a mock of BeaconStateMutator interface.
type MockBeaconStateMutator struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconStateMutatorMockRecorder
}

// MockBeaconStateMutatorMockRecorder is the mock recorder for MockBeaconStateMutator.
type MockBeaconStateMutatorMockRecorder struct {
	mock *MockBeaconStateMutator
}

// NewMockBeaconStateMutator creates a new mock instance.
func NewMockBeaconStateMutator(ctrl *gomock.Controller) *MockBeaconStateMutator {
	mock := &MockBeaconStateMutator{ctrl: ctrl}
	mock.recorder = &MockBeaconStateMutatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconStateMutator) EXPECT() *MockBeaconStateMutatorMockRecorder {
	return m.recorder
}

// AddCurrentEpochAtteastation mocks base method.
func (m *MockBeaconStateMutator) AddCurrentEpochAtteastation(arg0 *solid.PendingAttestation) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCurrentEpochAtteastation", arg0)
}

// AddCurrentEpochAtteastation indicates an expected call of AddCurrentEpochAtteastation.
func (mr *MockBeaconStateMutatorMockRecorder) AddCurrentEpochAtteastation(arg0 any) *MockBeaconStateMutatorAddCurrentEpochAtteastationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCurrentEpochAtteastation", reflect.TypeOf((*MockBeaconStateMutator)(nil).AddCurrentEpochAtteastation), arg0)
	return &MockBeaconStateMutatorAddCurrentEpochAtteastationCall{Call: call}
}

// MockBeaconStateMutatorAddCurrentEpochAtteastationCall wrap *gomock.Call
type MockBeaconStateMutatorAddCurrentEpochAtteastationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorAddCurrentEpochAtteastationCall) Return() *MockBeaconStateMutatorAddCurrentEpochAtteastationCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorAddCurrentEpochAtteastationCall) Do(f func(*solid.PendingAttestation)) *MockBeaconStateMutatorAddCurrentEpochAtteastationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorAddCurrentEpochAtteastationCall) DoAndReturn(f func(*solid.PendingAttestation)) *MockBeaconStateMutatorAddCurrentEpochAtteastationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddCurrentEpochParticipationFlags mocks base method.
func (m *MockBeaconStateMutator) AddCurrentEpochParticipationFlags(arg0 cltypes.ParticipationFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCurrentEpochParticipationFlags", arg0)
}

// AddCurrentEpochParticipationFlags indicates an expected call of AddCurrentEpochParticipationFlags.
func (mr *MockBeaconStateMutatorMockRecorder) AddCurrentEpochParticipationFlags(arg0 any) *MockBeaconStateMutatorAddCurrentEpochParticipationFlagsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCurrentEpochParticipationFlags", reflect.TypeOf((*MockBeaconStateMutator)(nil).AddCurrentEpochParticipationFlags), arg0)
	return &MockBeaconStateMutatorAddCurrentEpochParticipationFlagsCall{Call: call}
}

// MockBeaconStateMutatorAddCurrentEpochParticipationFlagsCall wrap *gomock.Call
type MockBeaconStateMutatorAddCurrentEpochParticipationFlagsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorAddCurrentEpochParticipationFlagsCall) Return() *MockBeaconStateMutatorAddCurrentEpochParticipationFlagsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorAddCurrentEpochParticipationFlagsCall) Do(f func(cltypes.ParticipationFlags)) *MockBeaconStateMutatorAddCurrentEpochParticipationFlagsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorAddCurrentEpochParticipationFlagsCall) DoAndReturn(f func(cltypes.ParticipationFlags)) *MockBeaconStateMutatorAddCurrentEpochParticipationFlagsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddEth1DataVote mocks base method.
func (m *MockBeaconStateMutator) AddEth1DataVote(arg0 *cltypes.Eth1Data) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEth1DataVote", arg0)
}

// AddEth1DataVote indicates an expected call of AddEth1DataVote.
func (mr *MockBeaconStateMutatorMockRecorder) AddEth1DataVote(arg0 any) *MockBeaconStateMutatorAddEth1DataVoteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEth1DataVote", reflect.TypeOf((*MockBeaconStateMutator)(nil).AddEth1DataVote), arg0)
	return &MockBeaconStateMutatorAddEth1DataVoteCall{Call: call}
}

// MockBeaconStateMutatorAddEth1DataVoteCall wrap *gomock.Call
type MockBeaconStateMutatorAddEth1DataVoteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorAddEth1DataVoteCall) Return() *MockBeaconStateMutatorAddEth1DataVoteCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorAddEth1DataVoteCall) Do(f func(*cltypes.Eth1Data)) *MockBeaconStateMutatorAddEth1DataVoteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorAddEth1DataVoteCall) DoAndReturn(f func(*cltypes.Eth1Data)) *MockBeaconStateMutatorAddEth1DataVoteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddHistoricalRoot mocks base method.
func (m *MockBeaconStateMutator) AddHistoricalRoot(arg0 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHistoricalRoot", arg0)
}

// AddHistoricalRoot indicates an expected call of AddHistoricalRoot.
func (mr *MockBeaconStateMutatorMockRecorder) AddHistoricalRoot(arg0 any) *MockBeaconStateMutatorAddHistoricalRootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHistoricalRoot", reflect.TypeOf((*MockBeaconStateMutator)(nil).AddHistoricalRoot), arg0)
	return &MockBeaconStateMutatorAddHistoricalRootCall{Call: call}
}

// MockBeaconStateMutatorAddHistoricalRootCall wrap *gomock.Call
type MockBeaconStateMutatorAddHistoricalRootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorAddHistoricalRootCall) Return() *MockBeaconStateMutatorAddHistoricalRootCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorAddHistoricalRootCall) Do(f func(common.Hash)) *MockBeaconStateMutatorAddHistoricalRootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorAddHistoricalRootCall) DoAndReturn(f func(common.Hash)) *MockBeaconStateMutatorAddHistoricalRootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddHistoricalSummary mocks base method.
func (m *MockBeaconStateMutator) AddHistoricalSummary(arg0 *cltypes.HistoricalSummary) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHistoricalSummary", arg0)
}

// AddHistoricalSummary indicates an expected call of AddHistoricalSummary.
func (mr *MockBeaconStateMutatorMockRecorder) AddHistoricalSummary(arg0 any) *MockBeaconStateMutatorAddHistoricalSummaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHistoricalSummary", reflect.TypeOf((*MockBeaconStateMutator)(nil).AddHistoricalSummary), arg0)
	return &MockBeaconStateMutatorAddHistoricalSummaryCall{Call: call}
}

// MockBeaconStateMutatorAddHistoricalSummaryCall wrap *gomock.Call
type MockBeaconStateMutatorAddHistoricalSummaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorAddHistoricalSummaryCall) Return() *MockBeaconStateMutatorAddHistoricalSummaryCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorAddHistoricalSummaryCall) Do(f func(*cltypes.HistoricalSummary)) *MockBeaconStateMutatorAddHistoricalSummaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorAddHistoricalSummaryCall) DoAndReturn(f func(*cltypes.HistoricalSummary)) *MockBeaconStateMutatorAddHistoricalSummaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddInactivityScore mocks base method.
func (m *MockBeaconStateMutator) AddInactivityScore(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInactivityScore", arg0)
}

// AddInactivityScore indicates an expected call of AddInactivityScore.
func (mr *MockBeaconStateMutatorMockRecorder) AddInactivityScore(arg0 any) *MockBeaconStateMutatorAddInactivityScoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInactivityScore", reflect.TypeOf((*MockBeaconStateMutator)(nil).AddInactivityScore), arg0)
	return &MockBeaconStateMutatorAddInactivityScoreCall{Call: call}
}

// MockBeaconStateMutatorAddInactivityScoreCall wrap *gomock.Call
type MockBeaconStateMutatorAddInactivityScoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorAddInactivityScoreCall) Return() *MockBeaconStateMutatorAddInactivityScoreCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorAddInactivityScoreCall) Do(f func(uint64)) *MockBeaconStateMutatorAddInactivityScoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorAddInactivityScoreCall) DoAndReturn(f func(uint64)) *MockBeaconStateMutatorAddInactivityScoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddPreviousEpochAttestation mocks base method.
func (m *MockBeaconStateMutator) AddPreviousEpochAttestation(arg0 *solid.PendingAttestation) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPreviousEpochAttestation", arg0)
}

// AddPreviousEpochAttestation indicates an expected call of AddPreviousEpochAttestation.
func (mr *MockBeaconStateMutatorMockRecorder) AddPreviousEpochAttestation(arg0 any) *MockBeaconStateMutatorAddPreviousEpochAttestationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPreviousEpochAttestation", reflect.TypeOf((*MockBeaconStateMutator)(nil).AddPreviousEpochAttestation), arg0)
	return &MockBeaconStateMutatorAddPreviousEpochAttestationCall{Call: call}
}

// MockBeaconStateMutatorAddPreviousEpochAttestationCall wrap *gomock.Call
type MockBeaconStateMutatorAddPreviousEpochAttestationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorAddPreviousEpochAttestationCall) Return() *MockBeaconStateMutatorAddPreviousEpochAttestationCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorAddPreviousEpochAttestationCall) Do(f func(*solid.PendingAttestation)) *MockBeaconStateMutatorAddPreviousEpochAttestationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorAddPreviousEpochAttestationCall) DoAndReturn(f func(*solid.PendingAttestation)) *MockBeaconStateMutatorAddPreviousEpochAttestationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddPreviousEpochParticipationAt mocks base method.
func (m *MockBeaconStateMutator) AddPreviousEpochParticipationAt(arg0 int, arg1 byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPreviousEpochParticipationAt", arg0, arg1)
}

// AddPreviousEpochParticipationAt indicates an expected call of AddPreviousEpochParticipationAt.
func (mr *MockBeaconStateMutatorMockRecorder) AddPreviousEpochParticipationAt(arg0, arg1 any) *MockBeaconStateMutatorAddPreviousEpochParticipationAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPreviousEpochParticipationAt", reflect.TypeOf((*MockBeaconStateMutator)(nil).AddPreviousEpochParticipationAt), arg0, arg1)
	return &MockBeaconStateMutatorAddPreviousEpochParticipationAtCall{Call: call}
}

// MockBeaconStateMutatorAddPreviousEpochParticipationAtCall wrap *gomock.Call
type MockBeaconStateMutatorAddPreviousEpochParticipationAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorAddPreviousEpochParticipationAtCall) Return() *MockBeaconStateMutatorAddPreviousEpochParticipationAtCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorAddPreviousEpochParticipationAtCall) Do(f func(int, byte)) *MockBeaconStateMutatorAddPreviousEpochParticipationAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorAddPreviousEpochParticipationAtCall) DoAndReturn(f func(int, byte)) *MockBeaconStateMutatorAddPreviousEpochParticipationAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddPreviousEpochParticipationFlags mocks base method.
func (m *MockBeaconStateMutator) AddPreviousEpochParticipationFlags(arg0 cltypes.ParticipationFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPreviousEpochParticipationFlags", arg0)
}

// AddPreviousEpochParticipationFlags indicates an expected call of AddPreviousEpochParticipationFlags.
func (mr *MockBeaconStateMutatorMockRecorder) AddPreviousEpochParticipationFlags(arg0 any) *MockBeaconStateMutatorAddPreviousEpochParticipationFlagsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPreviousEpochParticipationFlags", reflect.TypeOf((*MockBeaconStateMutator)(nil).AddPreviousEpochParticipationFlags), arg0)
	return &MockBeaconStateMutatorAddPreviousEpochParticipationFlagsCall{Call: call}
}

// MockBeaconStateMutatorAddPreviousEpochParticipationFlagsCall wrap *gomock.Call
type MockBeaconStateMutatorAddPreviousEpochParticipationFlagsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorAddPreviousEpochParticipationFlagsCall) Return() *MockBeaconStateMutatorAddPreviousEpochParticipationFlagsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorAddPreviousEpochParticipationFlagsCall) Do(f func(cltypes.ParticipationFlags)) *MockBeaconStateMutatorAddPreviousEpochParticipationFlagsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorAddPreviousEpochParticipationFlagsCall) DoAndReturn(f func(cltypes.ParticipationFlags)) *MockBeaconStateMutatorAddPreviousEpochParticipationFlagsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddValidator mocks base method.
func (m *MockBeaconStateMutator) AddValidator(arg0 solid.Validator, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddValidator", arg0, arg1)
}

// AddValidator indicates an expected call of AddValidator.
func (mr *MockBeaconStateMutatorMockRecorder) AddValidator(arg0, arg1 any) *MockBeaconStateMutatorAddValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValidator", reflect.TypeOf((*MockBeaconStateMutator)(nil).AddValidator), arg0, arg1)
	return &MockBeaconStateMutatorAddValidatorCall{Call: call}
}

// MockBeaconStateMutatorAddValidatorCall wrap *gomock.Call
type MockBeaconStateMutatorAddValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorAddValidatorCall) Return() *MockBeaconStateMutatorAddValidatorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorAddValidatorCall) Do(f func(solid.Validator, uint64)) *MockBeaconStateMutatorAddValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorAddValidatorCall) DoAndReturn(f func(solid.Validator, uint64)) *MockBeaconStateMutatorAddValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AppendValidator mocks base method.
func (m *MockBeaconStateMutator) AppendValidator(arg0 solid.Validator) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendValidator", arg0)
}

// AppendValidator indicates an expected call of AppendValidator.
func (mr *MockBeaconStateMutatorMockRecorder) AppendValidator(arg0 any) *MockBeaconStateMutatorAppendValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendValidator", reflect.TypeOf((*MockBeaconStateMutator)(nil).AppendValidator), arg0)
	return &MockBeaconStateMutatorAppendValidatorCall{Call: call}
}

// MockBeaconStateMutatorAppendValidatorCall wrap *gomock.Call
type MockBeaconStateMutatorAppendValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorAppendValidatorCall) Return() *MockBeaconStateMutatorAppendValidatorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorAppendValidatorCall) Do(f func(solid.Validator)) *MockBeaconStateMutatorAppendValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorAppendValidatorCall) DoAndReturn(f func(solid.Validator)) *MockBeaconStateMutatorAppendValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResetCurrentEpochAttestations mocks base method.
func (m *MockBeaconStateMutator) ResetCurrentEpochAttestations() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetCurrentEpochAttestations")
}

// ResetCurrentEpochAttestations indicates an expected call of ResetCurrentEpochAttestations.
func (mr *MockBeaconStateMutatorMockRecorder) ResetCurrentEpochAttestations() *MockBeaconStateMutatorResetCurrentEpochAttestationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCurrentEpochAttestations", reflect.TypeOf((*MockBeaconStateMutator)(nil).ResetCurrentEpochAttestations))
	return &MockBeaconStateMutatorResetCurrentEpochAttestationsCall{Call: call}
}

// MockBeaconStateMutatorResetCurrentEpochAttestationsCall wrap *gomock.Call
type MockBeaconStateMutatorResetCurrentEpochAttestationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorResetCurrentEpochAttestationsCall) Return() *MockBeaconStateMutatorResetCurrentEpochAttestationsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorResetCurrentEpochAttestationsCall) Do(f func()) *MockBeaconStateMutatorResetCurrentEpochAttestationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorResetCurrentEpochAttestationsCall) DoAndReturn(f func()) *MockBeaconStateMutatorResetCurrentEpochAttestationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResetEpochParticipation mocks base method.
func (m *MockBeaconStateMutator) ResetEpochParticipation() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetEpochParticipation")
}

// ResetEpochParticipation indicates an expected call of ResetEpochParticipation.
func (mr *MockBeaconStateMutatorMockRecorder) ResetEpochParticipation() *MockBeaconStateMutatorResetEpochParticipationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetEpochParticipation", reflect.TypeOf((*MockBeaconStateMutator)(nil).ResetEpochParticipation))
	return &MockBeaconStateMutatorResetEpochParticipationCall{Call: call}
}

// MockBeaconStateMutatorResetEpochParticipationCall wrap *gomock.Call
type MockBeaconStateMutatorResetEpochParticipationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorResetEpochParticipationCall) Return() *MockBeaconStateMutatorResetEpochParticipationCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorResetEpochParticipationCall) Do(f func()) *MockBeaconStateMutatorResetEpochParticipationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorResetEpochParticipationCall) DoAndReturn(f func()) *MockBeaconStateMutatorResetEpochParticipationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResetEth1DataVotes mocks base method.
func (m *MockBeaconStateMutator) ResetEth1DataVotes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetEth1DataVotes")
}

// ResetEth1DataVotes indicates an expected call of ResetEth1DataVotes.
func (mr *MockBeaconStateMutatorMockRecorder) ResetEth1DataVotes() *MockBeaconStateMutatorResetEth1DataVotesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetEth1DataVotes", reflect.TypeOf((*MockBeaconStateMutator)(nil).ResetEth1DataVotes))
	return &MockBeaconStateMutatorResetEth1DataVotesCall{Call: call}
}

// MockBeaconStateMutatorResetEth1DataVotesCall wrap *gomock.Call
type MockBeaconStateMutatorResetEth1DataVotesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorResetEth1DataVotesCall) Return() *MockBeaconStateMutatorResetEth1DataVotesCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorResetEth1DataVotesCall) Do(f func()) *MockBeaconStateMutatorResetEth1DataVotesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorResetEth1DataVotesCall) DoAndReturn(f func()) *MockBeaconStateMutatorResetEth1DataVotesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResetHistoricalSummaries mocks base method.
func (m *MockBeaconStateMutator) ResetHistoricalSummaries() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetHistoricalSummaries")
}

// ResetHistoricalSummaries indicates an expected call of ResetHistoricalSummaries.
func (mr *MockBeaconStateMutatorMockRecorder) ResetHistoricalSummaries() *MockBeaconStateMutatorResetHistoricalSummariesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetHistoricalSummaries", reflect.TypeOf((*MockBeaconStateMutator)(nil).ResetHistoricalSummaries))
	return &MockBeaconStateMutatorResetHistoricalSummariesCall{Call: call}
}

// MockBeaconStateMutatorResetHistoricalSummariesCall wrap *gomock.Call
type MockBeaconStateMutatorResetHistoricalSummariesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorResetHistoricalSummariesCall) Return() *MockBeaconStateMutatorResetHistoricalSummariesCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorResetHistoricalSummariesCall) Do(f func()) *MockBeaconStateMutatorResetHistoricalSummariesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorResetHistoricalSummariesCall) DoAndReturn(f func()) *MockBeaconStateMutatorResetHistoricalSummariesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResetPreviousEpochAttestations mocks base method.
func (m *MockBeaconStateMutator) ResetPreviousEpochAttestations() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetPreviousEpochAttestations")
}

// ResetPreviousEpochAttestations indicates an expected call of ResetPreviousEpochAttestations.
func (mr *MockBeaconStateMutatorMockRecorder) ResetPreviousEpochAttestations() *MockBeaconStateMutatorResetPreviousEpochAttestationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPreviousEpochAttestations", reflect.TypeOf((*MockBeaconStateMutator)(nil).ResetPreviousEpochAttestations))
	return &MockBeaconStateMutatorResetPreviousEpochAttestationsCall{Call: call}
}

// MockBeaconStateMutatorResetPreviousEpochAttestationsCall wrap *gomock.Call
type MockBeaconStateMutatorResetPreviousEpochAttestationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorResetPreviousEpochAttestationsCall) Return() *MockBeaconStateMutatorResetPreviousEpochAttestationsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorResetPreviousEpochAttestationsCall) Do(f func()) *MockBeaconStateMutatorResetPreviousEpochAttestationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorResetPreviousEpochAttestationsCall) DoAndReturn(f func()) *MockBeaconStateMutatorResetPreviousEpochAttestationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetActivationEligibilityEpochForValidatorAtIndex mocks base method.
func (m *MockBeaconStateMutator) SetActivationEligibilityEpochForValidatorAtIndex(arg0 int, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActivationEligibilityEpochForValidatorAtIndex", arg0, arg1)
}

// SetActivationEligibilityEpochForValidatorAtIndex indicates an expected call of SetActivationEligibilityEpochForValidatorAtIndex.
func (mr *MockBeaconStateMutatorMockRecorder) SetActivationEligibilityEpochForValidatorAtIndex(arg0, arg1 any) *MockBeaconStateMutatorSetActivationEligibilityEpochForValidatorAtIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActivationEligibilityEpochForValidatorAtIndex", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetActivationEligibilityEpochForValidatorAtIndex), arg0, arg1)
	return &MockBeaconStateMutatorSetActivationEligibilityEpochForValidatorAtIndexCall{Call: call}
}

// MockBeaconStateMutatorSetActivationEligibilityEpochForValidatorAtIndexCall wrap *gomock.Call
type MockBeaconStateMutatorSetActivationEligibilityEpochForValidatorAtIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetActivationEligibilityEpochForValidatorAtIndexCall) Return() *MockBeaconStateMutatorSetActivationEligibilityEpochForValidatorAtIndexCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetActivationEligibilityEpochForValidatorAtIndexCall) Do(f func(int, uint64)) *MockBeaconStateMutatorSetActivationEligibilityEpochForValidatorAtIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetActivationEligibilityEpochForValidatorAtIndexCall) DoAndReturn(f func(int, uint64)) *MockBeaconStateMutatorSetActivationEligibilityEpochForValidatorAtIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetActivationEpochForValidatorAtIndex mocks base method.
func (m *MockBeaconStateMutator) SetActivationEpochForValidatorAtIndex(arg0 int, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActivationEpochForValidatorAtIndex", arg0, arg1)
}

// SetActivationEpochForValidatorAtIndex indicates an expected call of SetActivationEpochForValidatorAtIndex.
func (mr *MockBeaconStateMutatorMockRecorder) SetActivationEpochForValidatorAtIndex(arg0, arg1 any) *MockBeaconStateMutatorSetActivationEpochForValidatorAtIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActivationEpochForValidatorAtIndex", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetActivationEpochForValidatorAtIndex), arg0, arg1)
	return &MockBeaconStateMutatorSetActivationEpochForValidatorAtIndexCall{Call: call}
}

// MockBeaconStateMutatorSetActivationEpochForValidatorAtIndexCall wrap *gomock.Call
type MockBeaconStateMutatorSetActivationEpochForValidatorAtIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetActivationEpochForValidatorAtIndexCall) Return() *MockBeaconStateMutatorSetActivationEpochForValidatorAtIndexCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetActivationEpochForValidatorAtIndexCall) Do(f func(int, uint64)) *MockBeaconStateMutatorSetActivationEpochForValidatorAtIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetActivationEpochForValidatorAtIndexCall) DoAndReturn(f func(int, uint64)) *MockBeaconStateMutatorSetActivationEpochForValidatorAtIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetBlockRootAt mocks base method.
func (m *MockBeaconStateMutator) SetBlockRootAt(arg0 int, arg1 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBlockRootAt", arg0, arg1)
}

// SetBlockRootAt indicates an expected call of SetBlockRootAt.
func (mr *MockBeaconStateMutatorMockRecorder) SetBlockRootAt(arg0, arg1 any) *MockBeaconStateMutatorSetBlockRootAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockRootAt", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetBlockRootAt), arg0, arg1)
	return &MockBeaconStateMutatorSetBlockRootAtCall{Call: call}
}

// MockBeaconStateMutatorSetBlockRootAtCall wrap *gomock.Call
type MockBeaconStateMutatorSetBlockRootAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetBlockRootAtCall) Return() *MockBeaconStateMutatorSetBlockRootAtCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetBlockRootAtCall) Do(f func(int, common.Hash)) *MockBeaconStateMutatorSetBlockRootAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetBlockRootAtCall) DoAndReturn(f func(int, common.Hash)) *MockBeaconStateMutatorSetBlockRootAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCurrentEpochParticipationFlags mocks base method.
func (m *MockBeaconStateMutator) SetCurrentEpochParticipationFlags(arg0 []cltypes.ParticipationFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentEpochParticipationFlags", arg0)
}

// SetCurrentEpochParticipationFlags indicates an expected call of SetCurrentEpochParticipationFlags.
func (mr *MockBeaconStateMutatorMockRecorder) SetCurrentEpochParticipationFlags(arg0 any) *MockBeaconStateMutatorSetCurrentEpochParticipationFlagsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentEpochParticipationFlags", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetCurrentEpochParticipationFlags), arg0)
	return &MockBeaconStateMutatorSetCurrentEpochParticipationFlagsCall{Call: call}
}

// MockBeaconStateMutatorSetCurrentEpochParticipationFlagsCall wrap *gomock.Call
type MockBeaconStateMutatorSetCurrentEpochParticipationFlagsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetCurrentEpochParticipationFlagsCall) Return() *MockBeaconStateMutatorSetCurrentEpochParticipationFlagsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetCurrentEpochParticipationFlagsCall) Do(f func([]cltypes.ParticipationFlags)) *MockBeaconStateMutatorSetCurrentEpochParticipationFlagsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetCurrentEpochParticipationFlagsCall) DoAndReturn(f func([]cltypes.ParticipationFlags)) *MockBeaconStateMutatorSetCurrentEpochParticipationFlagsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCurrentJustifiedCheckpoint mocks base method.
func (m *MockBeaconStateMutator) SetCurrentJustifiedCheckpoint(arg0 solid.Checkpoint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentJustifiedCheckpoint", arg0)
}

// SetCurrentJustifiedCheckpoint indicates an expected call of SetCurrentJustifiedCheckpoint.
func (mr *MockBeaconStateMutatorMockRecorder) SetCurrentJustifiedCheckpoint(arg0 any) *MockBeaconStateMutatorSetCurrentJustifiedCheckpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentJustifiedCheckpoint", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetCurrentJustifiedCheckpoint), arg0)
	return &MockBeaconStateMutatorSetCurrentJustifiedCheckpointCall{Call: call}
}

// MockBeaconStateMutatorSetCurrentJustifiedCheckpointCall wrap *gomock.Call
type MockBeaconStateMutatorSetCurrentJustifiedCheckpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetCurrentJustifiedCheckpointCall) Return() *MockBeaconStateMutatorSetCurrentJustifiedCheckpointCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetCurrentJustifiedCheckpointCall) Do(f func(solid.Checkpoint)) *MockBeaconStateMutatorSetCurrentJustifiedCheckpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetCurrentJustifiedCheckpointCall) DoAndReturn(f func(solid.Checkpoint)) *MockBeaconStateMutatorSetCurrentJustifiedCheckpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCurrentSyncCommittee mocks base method.
func (m *MockBeaconStateMutator) SetCurrentSyncCommittee(arg0 *solid.SyncCommittee) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentSyncCommittee", arg0)
}

// SetCurrentSyncCommittee indicates an expected call of SetCurrentSyncCommittee.
func (mr *MockBeaconStateMutatorMockRecorder) SetCurrentSyncCommittee(arg0 any) *MockBeaconStateMutatorSetCurrentSyncCommitteeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentSyncCommittee", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetCurrentSyncCommittee), arg0)
	return &MockBeaconStateMutatorSetCurrentSyncCommitteeCall{Call: call}
}

// MockBeaconStateMutatorSetCurrentSyncCommitteeCall wrap *gomock.Call
type MockBeaconStateMutatorSetCurrentSyncCommitteeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetCurrentSyncCommitteeCall) Return() *MockBeaconStateMutatorSetCurrentSyncCommitteeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetCurrentSyncCommitteeCall) Do(f func(*solid.SyncCommittee)) *MockBeaconStateMutatorSetCurrentSyncCommitteeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetCurrentSyncCommitteeCall) DoAndReturn(f func(*solid.SyncCommittee)) *MockBeaconStateMutatorSetCurrentSyncCommitteeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetEffectiveBalanceForValidatorAtIndex mocks base method.
func (m *MockBeaconStateMutator) SetEffectiveBalanceForValidatorAtIndex(arg0 int, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEffectiveBalanceForValidatorAtIndex", arg0, arg1)
}

// SetEffectiveBalanceForValidatorAtIndex indicates an expected call of SetEffectiveBalanceForValidatorAtIndex.
func (mr *MockBeaconStateMutatorMockRecorder) SetEffectiveBalanceForValidatorAtIndex(arg0, arg1 any) *MockBeaconStateMutatorSetEffectiveBalanceForValidatorAtIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEffectiveBalanceForValidatorAtIndex", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetEffectiveBalanceForValidatorAtIndex), arg0, arg1)
	return &MockBeaconStateMutatorSetEffectiveBalanceForValidatorAtIndexCall{Call: call}
}

// MockBeaconStateMutatorSetEffectiveBalanceForValidatorAtIndexCall wrap *gomock.Call
type MockBeaconStateMutatorSetEffectiveBalanceForValidatorAtIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetEffectiveBalanceForValidatorAtIndexCall) Return() *MockBeaconStateMutatorSetEffectiveBalanceForValidatorAtIndexCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetEffectiveBalanceForValidatorAtIndexCall) Do(f func(int, uint64)) *MockBeaconStateMutatorSetEffectiveBalanceForValidatorAtIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetEffectiveBalanceForValidatorAtIndexCall) DoAndReturn(f func(int, uint64)) *MockBeaconStateMutatorSetEffectiveBalanceForValidatorAtIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetEpochParticipationForValidatorIndex mocks base method.
func (m *MockBeaconStateMutator) SetEpochParticipationForValidatorIndex(arg0 bool, arg1 int, arg2 cltypes.ParticipationFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEpochParticipationForValidatorIndex", arg0, arg1, arg2)
}

// SetEpochParticipationForValidatorIndex indicates an expected call of SetEpochParticipationForValidatorIndex.
func (mr *MockBeaconStateMutatorMockRecorder) SetEpochParticipationForValidatorIndex(arg0, arg1, arg2 any) *MockBeaconStateMutatorSetEpochParticipationForValidatorIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEpochParticipationForValidatorIndex", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetEpochParticipationForValidatorIndex), arg0, arg1, arg2)
	return &MockBeaconStateMutatorSetEpochParticipationForValidatorIndexCall{Call: call}
}

// MockBeaconStateMutatorSetEpochParticipationForValidatorIndexCall wrap *gomock.Call
type MockBeaconStateMutatorSetEpochParticipationForValidatorIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetEpochParticipationForValidatorIndexCall) Return() *MockBeaconStateMutatorSetEpochParticipationForValidatorIndexCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetEpochParticipationForValidatorIndexCall) Do(f func(bool, int, cltypes.ParticipationFlags)) *MockBeaconStateMutatorSetEpochParticipationForValidatorIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetEpochParticipationForValidatorIndexCall) DoAndReturn(f func(bool, int, cltypes.ParticipationFlags)) *MockBeaconStateMutatorSetEpochParticipationForValidatorIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetEth1Data mocks base method.
func (m *MockBeaconStateMutator) SetEth1Data(arg0 *cltypes.Eth1Data) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEth1Data", arg0)
}

// SetEth1Data indicates an expected call of SetEth1Data.
func (mr *MockBeaconStateMutatorMockRecorder) SetEth1Data(arg0 any) *MockBeaconStateMutatorSetEth1DataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEth1Data", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetEth1Data), arg0)
	return &MockBeaconStateMutatorSetEth1DataCall{Call: call}
}

// MockBeaconStateMutatorSetEth1DataCall wrap *gomock.Call
type MockBeaconStateMutatorSetEth1DataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetEth1DataCall) Return() *MockBeaconStateMutatorSetEth1DataCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetEth1DataCall) Do(f func(*cltypes.Eth1Data)) *MockBeaconStateMutatorSetEth1DataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetEth1DataCall) DoAndReturn(f func(*cltypes.Eth1Data)) *MockBeaconStateMutatorSetEth1DataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetEth1DepositIndex mocks base method.
func (m *MockBeaconStateMutator) SetEth1DepositIndex(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEth1DepositIndex", arg0)
}

// SetEth1DepositIndex indicates an expected call of SetEth1DepositIndex.
func (mr *MockBeaconStateMutatorMockRecorder) SetEth1DepositIndex(arg0 any) *MockBeaconStateMutatorSetEth1DepositIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEth1DepositIndex", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetEth1DepositIndex), arg0)
	return &MockBeaconStateMutatorSetEth1DepositIndexCall{Call: call}
}

// MockBeaconStateMutatorSetEth1DepositIndexCall wrap *gomock.Call
type MockBeaconStateMutatorSetEth1DepositIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetEth1DepositIndexCall) Return() *MockBeaconStateMutatorSetEth1DepositIndexCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetEth1DepositIndexCall) Do(f func(uint64)) *MockBeaconStateMutatorSetEth1DepositIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetEth1DepositIndexCall) DoAndReturn(f func(uint64)) *MockBeaconStateMutatorSetEth1DepositIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetExitEpochForValidatorAtIndex mocks base method.
func (m *MockBeaconStateMutator) SetExitEpochForValidatorAtIndex(arg0 int, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExitEpochForValidatorAtIndex", arg0, arg1)
}

// SetExitEpochForValidatorAtIndex indicates an expected call of SetExitEpochForValidatorAtIndex.
func (mr *MockBeaconStateMutatorMockRecorder) SetExitEpochForValidatorAtIndex(arg0, arg1 any) *MockBeaconStateMutatorSetExitEpochForValidatorAtIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExitEpochForValidatorAtIndex", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetExitEpochForValidatorAtIndex), arg0, arg1)
	return &MockBeaconStateMutatorSetExitEpochForValidatorAtIndexCall{Call: call}
}

// MockBeaconStateMutatorSetExitEpochForValidatorAtIndexCall wrap *gomock.Call
type MockBeaconStateMutatorSetExitEpochForValidatorAtIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetExitEpochForValidatorAtIndexCall) Return() *MockBeaconStateMutatorSetExitEpochForValidatorAtIndexCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetExitEpochForValidatorAtIndexCall) Do(f func(int, uint64)) *MockBeaconStateMutatorSetExitEpochForValidatorAtIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetExitEpochForValidatorAtIndexCall) DoAndReturn(f func(int, uint64)) *MockBeaconStateMutatorSetExitEpochForValidatorAtIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetFinalizedCheckpoint mocks base method.
func (m *MockBeaconStateMutator) SetFinalizedCheckpoint(arg0 solid.Checkpoint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFinalizedCheckpoint", arg0)
}

// SetFinalizedCheckpoint indicates an expected call of SetFinalizedCheckpoint.
func (mr *MockBeaconStateMutatorMockRecorder) SetFinalizedCheckpoint(arg0 any) *MockBeaconStateMutatorSetFinalizedCheckpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizedCheckpoint", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetFinalizedCheckpoint), arg0)
	return &MockBeaconStateMutatorSetFinalizedCheckpointCall{Call: call}
}

// MockBeaconStateMutatorSetFinalizedCheckpointCall wrap *gomock.Call
type MockBeaconStateMutatorSetFinalizedCheckpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetFinalizedCheckpointCall) Return() *MockBeaconStateMutatorSetFinalizedCheckpointCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetFinalizedCheckpointCall) Do(f func(solid.Checkpoint)) *MockBeaconStateMutatorSetFinalizedCheckpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetFinalizedCheckpointCall) DoAndReturn(f func(solid.Checkpoint)) *MockBeaconStateMutatorSetFinalizedCheckpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetFork mocks base method.
func (m *MockBeaconStateMutator) SetFork(arg0 *cltypes.Fork) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFork", arg0)
}

// SetFork indicates an expected call of SetFork.
func (mr *MockBeaconStateMutatorMockRecorder) SetFork(arg0 any) *MockBeaconStateMutatorSetForkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFork", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetFork), arg0)
	return &MockBeaconStateMutatorSetForkCall{Call: call}
}

// MockBeaconStateMutatorSetForkCall wrap *gomock.Call
type MockBeaconStateMutatorSetForkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetForkCall) Return() *MockBeaconStateMutatorSetForkCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetForkCall) Do(f func(*cltypes.Fork)) *MockBeaconStateMutatorSetForkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetForkCall) DoAndReturn(f func(*cltypes.Fork)) *MockBeaconStateMutatorSetForkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetInactivityScores mocks base method.
func (m *MockBeaconStateMutator) SetInactivityScores(arg0 []uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInactivityScores", arg0)
}

// SetInactivityScores indicates an expected call of SetInactivityScores.
func (mr *MockBeaconStateMutatorMockRecorder) SetInactivityScores(arg0 any) *MockBeaconStateMutatorSetInactivityScoresCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInactivityScores", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetInactivityScores), arg0)
	return &MockBeaconStateMutatorSetInactivityScoresCall{Call: call}
}

// MockBeaconStateMutatorSetInactivityScoresCall wrap *gomock.Call
type MockBeaconStateMutatorSetInactivityScoresCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetInactivityScoresCall) Return() *MockBeaconStateMutatorSetInactivityScoresCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetInactivityScoresCall) Do(f func([]uint64)) *MockBeaconStateMutatorSetInactivityScoresCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetInactivityScoresCall) DoAndReturn(f func([]uint64)) *MockBeaconStateMutatorSetInactivityScoresCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetJustificationBits mocks base method.
func (m *MockBeaconStateMutator) SetJustificationBits(arg0 cltypes.JustificationBits) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetJustificationBits", arg0)
}

// SetJustificationBits indicates an expected call of SetJustificationBits.
func (mr *MockBeaconStateMutatorMockRecorder) SetJustificationBits(arg0 any) *MockBeaconStateMutatorSetJustificationBitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJustificationBits", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetJustificationBits), arg0)
	return &MockBeaconStateMutatorSetJustificationBitsCall{Call: call}
}

// MockBeaconStateMutatorSetJustificationBitsCall wrap *gomock.Call
type MockBeaconStateMutatorSetJustificationBitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetJustificationBitsCall) Return() *MockBeaconStateMutatorSetJustificationBitsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetJustificationBitsCall) Do(f func(cltypes.JustificationBits)) *MockBeaconStateMutatorSetJustificationBitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetJustificationBitsCall) DoAndReturn(f func(cltypes.JustificationBits)) *MockBeaconStateMutatorSetJustificationBitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetLatestBlockHeader mocks base method.
func (m *MockBeaconStateMutator) SetLatestBlockHeader(arg0 *cltypes.BeaconBlockHeader) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLatestBlockHeader", arg0)
}

// SetLatestBlockHeader indicates an expected call of SetLatestBlockHeader.
func (mr *MockBeaconStateMutatorMockRecorder) SetLatestBlockHeader(arg0 any) *MockBeaconStateMutatorSetLatestBlockHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLatestBlockHeader", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetLatestBlockHeader), arg0)
	return &MockBeaconStateMutatorSetLatestBlockHeaderCall{Call: call}
}

// MockBeaconStateMutatorSetLatestBlockHeaderCall wrap *gomock.Call
type MockBeaconStateMutatorSetLatestBlockHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetLatestBlockHeaderCall) Return() *MockBeaconStateMutatorSetLatestBlockHeaderCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetLatestBlockHeaderCall) Do(f func(*cltypes.BeaconBlockHeader)) *MockBeaconStateMutatorSetLatestBlockHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetLatestBlockHeaderCall) DoAndReturn(f func(*cltypes.BeaconBlockHeader)) *MockBeaconStateMutatorSetLatestBlockHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetLatestExecutionPayloadHeader mocks base method.
func (m *MockBeaconStateMutator) SetLatestExecutionPayloadHeader(arg0 *cltypes.Eth1Header) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLatestExecutionPayloadHeader", arg0)
}

// SetLatestExecutionPayloadHeader indicates an expected call of SetLatestExecutionPayloadHeader.
func (mr *MockBeaconStateMutatorMockRecorder) SetLatestExecutionPayloadHeader(arg0 any) *MockBeaconStateMutatorSetLatestExecutionPayloadHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLatestExecutionPayloadHeader", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetLatestExecutionPayloadHeader), arg0)
	return &MockBeaconStateMutatorSetLatestExecutionPayloadHeaderCall{Call: call}
}

// MockBeaconStateMutatorSetLatestExecutionPayloadHeaderCall wrap *gomock.Call
type MockBeaconStateMutatorSetLatestExecutionPayloadHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetLatestExecutionPayloadHeaderCall) Return() *MockBeaconStateMutatorSetLatestExecutionPayloadHeaderCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetLatestExecutionPayloadHeaderCall) Do(f func(*cltypes.Eth1Header)) *MockBeaconStateMutatorSetLatestExecutionPayloadHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetLatestExecutionPayloadHeaderCall) DoAndReturn(f func(*cltypes.Eth1Header)) *MockBeaconStateMutatorSetLatestExecutionPayloadHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetNextSyncCommittee mocks base method.
func (m *MockBeaconStateMutator) SetNextSyncCommittee(arg0 *solid.SyncCommittee) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNextSyncCommittee", arg0)
}

// SetNextSyncCommittee indicates an expected call of SetNextSyncCommittee.
func (mr *MockBeaconStateMutatorMockRecorder) SetNextSyncCommittee(arg0 any) *MockBeaconStateMutatorSetNextSyncCommitteeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNextSyncCommittee", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetNextSyncCommittee), arg0)
	return &MockBeaconStateMutatorSetNextSyncCommitteeCall{Call: call}
}

// MockBeaconStateMutatorSetNextSyncCommitteeCall wrap *gomock.Call
type MockBeaconStateMutatorSetNextSyncCommitteeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetNextSyncCommitteeCall) Return() *MockBeaconStateMutatorSetNextSyncCommitteeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetNextSyncCommitteeCall) Do(f func(*solid.SyncCommittee)) *MockBeaconStateMutatorSetNextSyncCommitteeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetNextSyncCommitteeCall) DoAndReturn(f func(*solid.SyncCommittee)) *MockBeaconStateMutatorSetNextSyncCommitteeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetNextWithdrawalIndex mocks base method.
func (m *MockBeaconStateMutator) SetNextWithdrawalIndex(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNextWithdrawalIndex", arg0)
}

// SetNextWithdrawalIndex indicates an expected call of SetNextWithdrawalIndex.
func (mr *MockBeaconStateMutatorMockRecorder) SetNextWithdrawalIndex(arg0 any) *MockBeaconStateMutatorSetNextWithdrawalIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNextWithdrawalIndex", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetNextWithdrawalIndex), arg0)
	return &MockBeaconStateMutatorSetNextWithdrawalIndexCall{Call: call}
}

// MockBeaconStateMutatorSetNextWithdrawalIndexCall wrap *gomock.Call
type MockBeaconStateMutatorSetNextWithdrawalIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetNextWithdrawalIndexCall) Return() *MockBeaconStateMutatorSetNextWithdrawalIndexCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetNextWithdrawalIndexCall) Do(f func(uint64)) *MockBeaconStateMutatorSetNextWithdrawalIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetNextWithdrawalIndexCall) DoAndReturn(f func(uint64)) *MockBeaconStateMutatorSetNextWithdrawalIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetNextWithdrawalValidatorIndex mocks base method.
func (m *MockBeaconStateMutator) SetNextWithdrawalValidatorIndex(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNextWithdrawalValidatorIndex", arg0)
}

// SetNextWithdrawalValidatorIndex indicates an expected call of SetNextWithdrawalValidatorIndex.
func (mr *MockBeaconStateMutatorMockRecorder) SetNextWithdrawalValidatorIndex(arg0 any) *MockBeaconStateMutatorSetNextWithdrawalValidatorIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNextWithdrawalValidatorIndex", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetNextWithdrawalValidatorIndex), arg0)
	return &MockBeaconStateMutatorSetNextWithdrawalValidatorIndexCall{Call: call}
}

// MockBeaconStateMutatorSetNextWithdrawalValidatorIndexCall wrap *gomock.Call
type MockBeaconStateMutatorSetNextWithdrawalValidatorIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetNextWithdrawalValidatorIndexCall) Return() *MockBeaconStateMutatorSetNextWithdrawalValidatorIndexCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetNextWithdrawalValidatorIndexCall) Do(f func(uint64)) *MockBeaconStateMutatorSetNextWithdrawalValidatorIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetNextWithdrawalValidatorIndexCall) DoAndReturn(f func(uint64)) *MockBeaconStateMutatorSetNextWithdrawalValidatorIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPreviousEpochParticipationFlags mocks base method.
func (m *MockBeaconStateMutator) SetPreviousEpochParticipationFlags(arg0 []cltypes.ParticipationFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPreviousEpochParticipationFlags", arg0)
}

// SetPreviousEpochParticipationFlags indicates an expected call of SetPreviousEpochParticipationFlags.
func (mr *MockBeaconStateMutatorMockRecorder) SetPreviousEpochParticipationFlags(arg0 any) *MockBeaconStateMutatorSetPreviousEpochParticipationFlagsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreviousEpochParticipationFlags", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetPreviousEpochParticipationFlags), arg0)
	return &MockBeaconStateMutatorSetPreviousEpochParticipationFlagsCall{Call: call}
}

// MockBeaconStateMutatorSetPreviousEpochParticipationFlagsCall wrap *gomock.Call
type MockBeaconStateMutatorSetPreviousEpochParticipationFlagsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetPreviousEpochParticipationFlagsCall) Return() *MockBeaconStateMutatorSetPreviousEpochParticipationFlagsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetPreviousEpochParticipationFlagsCall) Do(f func([]cltypes.ParticipationFlags)) *MockBeaconStateMutatorSetPreviousEpochParticipationFlagsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetPreviousEpochParticipationFlagsCall) DoAndReturn(f func([]cltypes.ParticipationFlags)) *MockBeaconStateMutatorSetPreviousEpochParticipationFlagsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPreviousJustifiedCheckpoint mocks base method.
func (m *MockBeaconStateMutator) SetPreviousJustifiedCheckpoint(arg0 solid.Checkpoint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPreviousJustifiedCheckpoint", arg0)
}

// SetPreviousJustifiedCheckpoint indicates an expected call of SetPreviousJustifiedCheckpoint.
func (mr *MockBeaconStateMutatorMockRecorder) SetPreviousJustifiedCheckpoint(arg0 any) *MockBeaconStateMutatorSetPreviousJustifiedCheckpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreviousJustifiedCheckpoint", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetPreviousJustifiedCheckpoint), arg0)
	return &MockBeaconStateMutatorSetPreviousJustifiedCheckpointCall{Call: call}
}

// MockBeaconStateMutatorSetPreviousJustifiedCheckpointCall wrap *gomock.Call
type MockBeaconStateMutatorSetPreviousJustifiedCheckpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetPreviousJustifiedCheckpointCall) Return() *MockBeaconStateMutatorSetPreviousJustifiedCheckpointCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetPreviousJustifiedCheckpointCall) Do(f func(solid.Checkpoint)) *MockBeaconStateMutatorSetPreviousJustifiedCheckpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetPreviousJustifiedCheckpointCall) DoAndReturn(f func(solid.Checkpoint)) *MockBeaconStateMutatorSetPreviousJustifiedCheckpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRandaoMixAt mocks base method.
func (m *MockBeaconStateMutator) SetRandaoMixAt(arg0 int, arg1 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRandaoMixAt", arg0, arg1)
}

// SetRandaoMixAt indicates an expected call of SetRandaoMixAt.
func (mr *MockBeaconStateMutatorMockRecorder) SetRandaoMixAt(arg0, arg1 any) *MockBeaconStateMutatorSetRandaoMixAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRandaoMixAt", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetRandaoMixAt), arg0, arg1)
	return &MockBeaconStateMutatorSetRandaoMixAtCall{Call: call}
}

// MockBeaconStateMutatorSetRandaoMixAtCall wrap *gomock.Call
type MockBeaconStateMutatorSetRandaoMixAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetRandaoMixAtCall) Return() *MockBeaconStateMutatorSetRandaoMixAtCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetRandaoMixAtCall) Do(f func(int, common.Hash)) *MockBeaconStateMutatorSetRandaoMixAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetRandaoMixAtCall) DoAndReturn(f func(int, common.Hash)) *MockBeaconStateMutatorSetRandaoMixAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetSlashingSegmentAt mocks base method.
func (m *MockBeaconStateMutator) SetSlashingSegmentAt(arg0 int, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSlashingSegmentAt", arg0, arg1)
}

// SetSlashingSegmentAt indicates an expected call of SetSlashingSegmentAt.
func (mr *MockBeaconStateMutatorMockRecorder) SetSlashingSegmentAt(arg0, arg1 any) *MockBeaconStateMutatorSetSlashingSegmentAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSlashingSegmentAt", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetSlashingSegmentAt), arg0, arg1)
	return &MockBeaconStateMutatorSetSlashingSegmentAtCall{Call: call}
}

// MockBeaconStateMutatorSetSlashingSegmentAtCall wrap *gomock.Call
type MockBeaconStateMutatorSetSlashingSegmentAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetSlashingSegmentAtCall) Return() *MockBeaconStateMutatorSetSlashingSegmentAtCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetSlashingSegmentAtCall) Do(f func(int, uint64)) *MockBeaconStateMutatorSetSlashingSegmentAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetSlashingSegmentAtCall) DoAndReturn(f func(int, uint64)) *MockBeaconStateMutatorSetSlashingSegmentAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetSlot mocks base method.
func (m *MockBeaconStateMutator) SetSlot(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSlot", arg0)
}

// SetSlot indicates an expected call of SetSlot.
func (mr *MockBeaconStateMutatorMockRecorder) SetSlot(arg0 any) *MockBeaconStateMutatorSetSlotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSlot", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetSlot), arg0)
	return &MockBeaconStateMutatorSetSlotCall{Call: call}
}

// MockBeaconStateMutatorSetSlotCall wrap *gomock.Call
type MockBeaconStateMutatorSetSlotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetSlotCall) Return() *MockBeaconStateMutatorSetSlotCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetSlotCall) Do(f func(uint64)) *MockBeaconStateMutatorSetSlotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetSlotCall) DoAndReturn(f func(uint64)) *MockBeaconStateMutatorSetSlotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStateRootAt mocks base method.
func (m *MockBeaconStateMutator) SetStateRootAt(arg0 int, arg1 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStateRootAt", arg0, arg1)
}

// SetStateRootAt indicates an expected call of SetStateRootAt.
func (mr *MockBeaconStateMutatorMockRecorder) SetStateRootAt(arg0, arg1 any) *MockBeaconStateMutatorSetStateRootAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStateRootAt", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetStateRootAt), arg0, arg1)
	return &MockBeaconStateMutatorSetStateRootAtCall{Call: call}
}

// MockBeaconStateMutatorSetStateRootAtCall wrap *gomock.Call
type MockBeaconStateMutatorSetStateRootAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetStateRootAtCall) Return() *MockBeaconStateMutatorSetStateRootAtCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetStateRootAtCall) Do(f func(int, common.Hash)) *MockBeaconStateMutatorSetStateRootAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetStateRootAtCall) DoAndReturn(f func(int, common.Hash)) *MockBeaconStateMutatorSetStateRootAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValidatorAtIndex mocks base method.
func (m *MockBeaconStateMutator) SetValidatorAtIndex(arg0 int, arg1 solid.Validator) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetValidatorAtIndex", arg0, arg1)
}

// SetValidatorAtIndex indicates an expected call of SetValidatorAtIndex.
func (mr *MockBeaconStateMutatorMockRecorder) SetValidatorAtIndex(arg0, arg1 any) *MockBeaconStateMutatorSetValidatorAtIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorAtIndex", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetValidatorAtIndex), arg0, arg1)
	return &MockBeaconStateMutatorSetValidatorAtIndexCall{Call: call}
}

// MockBeaconStateMutatorSetValidatorAtIndexCall wrap *gomock.Call
type MockBeaconStateMutatorSetValidatorAtIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetValidatorAtIndexCall) Return() *MockBeaconStateMutatorSetValidatorAtIndexCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetValidatorAtIndexCall) Do(f func(int, solid.Validator)) *MockBeaconStateMutatorSetValidatorAtIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetValidatorAtIndexCall) DoAndReturn(f func(int, solid.Validator)) *MockBeaconStateMutatorSetValidatorAtIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValidatorBalance mocks base method.
func (m *MockBeaconStateMutator) SetValidatorBalance(arg0 int, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorBalance indicates an expected call of SetValidatorBalance.
func (mr *MockBeaconStateMutatorMockRecorder) SetValidatorBalance(arg0, arg1 any) *MockBeaconStateMutatorSetValidatorBalanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorBalance", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetValidatorBalance), arg0, arg1)
	return &MockBeaconStateMutatorSetValidatorBalanceCall{Call: call}
}

// MockBeaconStateMutatorSetValidatorBalanceCall wrap *gomock.Call
type MockBeaconStateMutatorSetValidatorBalanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetValidatorBalanceCall) Return(arg0 error) *MockBeaconStateMutatorSetValidatorBalanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetValidatorBalanceCall) Do(f func(int, uint64) error) *MockBeaconStateMutatorSetValidatorBalanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetValidatorBalanceCall) DoAndReturn(f func(int, uint64) error) *MockBeaconStateMutatorSetValidatorBalanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValidatorInactivityScore mocks base method.
func (m *MockBeaconStateMutator) SetValidatorInactivityScore(arg0 int, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorInactivityScore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorInactivityScore indicates an expected call of SetValidatorInactivityScore.
func (mr *MockBeaconStateMutatorMockRecorder) SetValidatorInactivityScore(arg0, arg1 any) *MockBeaconStateMutatorSetValidatorInactivityScoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorInactivityScore", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetValidatorInactivityScore), arg0, arg1)
	return &MockBeaconStateMutatorSetValidatorInactivityScoreCall{Call: call}
}

// MockBeaconStateMutatorSetValidatorInactivityScoreCall wrap *gomock.Call
type MockBeaconStateMutatorSetValidatorInactivityScoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetValidatorInactivityScoreCall) Return(arg0 error) *MockBeaconStateMutatorSetValidatorInactivityScoreCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetValidatorInactivityScoreCall) Do(f func(int, uint64) error) *MockBeaconStateMutatorSetValidatorInactivityScoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetValidatorInactivityScoreCall) DoAndReturn(f func(int, uint64) error) *MockBeaconStateMutatorSetValidatorInactivityScoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValidatorIsCurrentMatchingHeadAttester mocks base method.
func (m *MockBeaconStateMutator) SetValidatorIsCurrentMatchingHeadAttester(arg0 int, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorIsCurrentMatchingHeadAttester", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorIsCurrentMatchingHeadAttester indicates an expected call of SetValidatorIsCurrentMatchingHeadAttester.
func (mr *MockBeaconStateMutatorMockRecorder) SetValidatorIsCurrentMatchingHeadAttester(arg0, arg1 any) *MockBeaconStateMutatorSetValidatorIsCurrentMatchingHeadAttesterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorIsCurrentMatchingHeadAttester", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetValidatorIsCurrentMatchingHeadAttester), arg0, arg1)
	return &MockBeaconStateMutatorSetValidatorIsCurrentMatchingHeadAttesterCall{Call: call}
}

// MockBeaconStateMutatorSetValidatorIsCurrentMatchingHeadAttesterCall wrap *gomock.Call
type MockBeaconStateMutatorSetValidatorIsCurrentMatchingHeadAttesterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetValidatorIsCurrentMatchingHeadAttesterCall) Return(arg0 error) *MockBeaconStateMutatorSetValidatorIsCurrentMatchingHeadAttesterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetValidatorIsCurrentMatchingHeadAttesterCall) Do(f func(int, bool) error) *MockBeaconStateMutatorSetValidatorIsCurrentMatchingHeadAttesterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetValidatorIsCurrentMatchingHeadAttesterCall) DoAndReturn(f func(int, bool) error) *MockBeaconStateMutatorSetValidatorIsCurrentMatchingHeadAttesterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValidatorIsCurrentMatchingSourceAttester mocks base method.
func (m *MockBeaconStateMutator) SetValidatorIsCurrentMatchingSourceAttester(arg0 int, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorIsCurrentMatchingSourceAttester", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorIsCurrentMatchingSourceAttester indicates an expected call of SetValidatorIsCurrentMatchingSourceAttester.
func (mr *MockBeaconStateMutatorMockRecorder) SetValidatorIsCurrentMatchingSourceAttester(arg0, arg1 any) *MockBeaconStateMutatorSetValidatorIsCurrentMatchingSourceAttesterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorIsCurrentMatchingSourceAttester", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetValidatorIsCurrentMatchingSourceAttester), arg0, arg1)
	return &MockBeaconStateMutatorSetValidatorIsCurrentMatchingSourceAttesterCall{Call: call}
}

// MockBeaconStateMutatorSetValidatorIsCurrentMatchingSourceAttesterCall wrap *gomock.Call
type MockBeaconStateMutatorSetValidatorIsCurrentMatchingSourceAttesterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetValidatorIsCurrentMatchingSourceAttesterCall) Return(arg0 error) *MockBeaconStateMutatorSetValidatorIsCurrentMatchingSourceAttesterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetValidatorIsCurrentMatchingSourceAttesterCall) Do(f func(int, bool) error) *MockBeaconStateMutatorSetValidatorIsCurrentMatchingSourceAttesterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetValidatorIsCurrentMatchingSourceAttesterCall) DoAndReturn(f func(int, bool) error) *MockBeaconStateMutatorSetValidatorIsCurrentMatchingSourceAttesterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValidatorIsCurrentMatchingTargetAttester mocks base method.
func (m *MockBeaconStateMutator) SetValidatorIsCurrentMatchingTargetAttester(arg0 int, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorIsCurrentMatchingTargetAttester", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorIsCurrentMatchingTargetAttester indicates an expected call of SetValidatorIsCurrentMatchingTargetAttester.
func (mr *MockBeaconStateMutatorMockRecorder) SetValidatorIsCurrentMatchingTargetAttester(arg0, arg1 any) *MockBeaconStateMutatorSetValidatorIsCurrentMatchingTargetAttesterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorIsCurrentMatchingTargetAttester", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetValidatorIsCurrentMatchingTargetAttester), arg0, arg1)
	return &MockBeaconStateMutatorSetValidatorIsCurrentMatchingTargetAttesterCall{Call: call}
}

// MockBeaconStateMutatorSetValidatorIsCurrentMatchingTargetAttesterCall wrap *gomock.Call
type MockBeaconStateMutatorSetValidatorIsCurrentMatchingTargetAttesterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetValidatorIsCurrentMatchingTargetAttesterCall) Return(arg0 error) *MockBeaconStateMutatorSetValidatorIsCurrentMatchingTargetAttesterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetValidatorIsCurrentMatchingTargetAttesterCall) Do(f func(int, bool) error) *MockBeaconStateMutatorSetValidatorIsCurrentMatchingTargetAttesterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetValidatorIsCurrentMatchingTargetAttesterCall) DoAndReturn(f func(int, bool) error) *MockBeaconStateMutatorSetValidatorIsCurrentMatchingTargetAttesterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValidatorIsPreviousMatchingHeadAttester mocks base method.
func (m *MockBeaconStateMutator) SetValidatorIsPreviousMatchingHeadAttester(arg0 int, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorIsPreviousMatchingHeadAttester", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorIsPreviousMatchingHeadAttester indicates an expected call of SetValidatorIsPreviousMatchingHeadAttester.
func (mr *MockBeaconStateMutatorMockRecorder) SetValidatorIsPreviousMatchingHeadAttester(arg0, arg1 any) *MockBeaconStateMutatorSetValidatorIsPreviousMatchingHeadAttesterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorIsPreviousMatchingHeadAttester", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetValidatorIsPreviousMatchingHeadAttester), arg0, arg1)
	return &MockBeaconStateMutatorSetValidatorIsPreviousMatchingHeadAttesterCall{Call: call}
}

// MockBeaconStateMutatorSetValidatorIsPreviousMatchingHeadAttesterCall wrap *gomock.Call
type MockBeaconStateMutatorSetValidatorIsPreviousMatchingHeadAttesterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetValidatorIsPreviousMatchingHeadAttesterCall) Return(arg0 error) *MockBeaconStateMutatorSetValidatorIsPreviousMatchingHeadAttesterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetValidatorIsPreviousMatchingHeadAttesterCall) Do(f func(int, bool) error) *MockBeaconStateMutatorSetValidatorIsPreviousMatchingHeadAttesterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetValidatorIsPreviousMatchingHeadAttesterCall) DoAndReturn(f func(int, bool) error) *MockBeaconStateMutatorSetValidatorIsPreviousMatchingHeadAttesterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValidatorIsPreviousMatchingSourceAttester mocks base method.
func (m *MockBeaconStateMutator) SetValidatorIsPreviousMatchingSourceAttester(arg0 int, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorIsPreviousMatchingSourceAttester", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorIsPreviousMatchingSourceAttester indicates an expected call of SetValidatorIsPreviousMatchingSourceAttester.
func (mr *MockBeaconStateMutatorMockRecorder) SetValidatorIsPreviousMatchingSourceAttester(arg0, arg1 any) *MockBeaconStateMutatorSetValidatorIsPreviousMatchingSourceAttesterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorIsPreviousMatchingSourceAttester", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetValidatorIsPreviousMatchingSourceAttester), arg0, arg1)
	return &MockBeaconStateMutatorSetValidatorIsPreviousMatchingSourceAttesterCall{Call: call}
}

// MockBeaconStateMutatorSetValidatorIsPreviousMatchingSourceAttesterCall wrap *gomock.Call
type MockBeaconStateMutatorSetValidatorIsPreviousMatchingSourceAttesterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetValidatorIsPreviousMatchingSourceAttesterCall) Return(arg0 error) *MockBeaconStateMutatorSetValidatorIsPreviousMatchingSourceAttesterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetValidatorIsPreviousMatchingSourceAttesterCall) Do(f func(int, bool) error) *MockBeaconStateMutatorSetValidatorIsPreviousMatchingSourceAttesterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetValidatorIsPreviousMatchingSourceAttesterCall) DoAndReturn(f func(int, bool) error) *MockBeaconStateMutatorSetValidatorIsPreviousMatchingSourceAttesterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValidatorIsPreviousMatchingTargetAttester mocks base method.
func (m *MockBeaconStateMutator) SetValidatorIsPreviousMatchingTargetAttester(arg0 int, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorIsPreviousMatchingTargetAttester", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorIsPreviousMatchingTargetAttester indicates an expected call of SetValidatorIsPreviousMatchingTargetAttester.
func (mr *MockBeaconStateMutatorMockRecorder) SetValidatorIsPreviousMatchingTargetAttester(arg0, arg1 any) *MockBeaconStateMutatorSetValidatorIsPreviousMatchingTargetAttesterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorIsPreviousMatchingTargetAttester", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetValidatorIsPreviousMatchingTargetAttester), arg0, arg1)
	return &MockBeaconStateMutatorSetValidatorIsPreviousMatchingTargetAttesterCall{Call: call}
}

// MockBeaconStateMutatorSetValidatorIsPreviousMatchingTargetAttesterCall wrap *gomock.Call
type MockBeaconStateMutatorSetValidatorIsPreviousMatchingTargetAttesterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetValidatorIsPreviousMatchingTargetAttesterCall) Return(arg0 error) *MockBeaconStateMutatorSetValidatorIsPreviousMatchingTargetAttesterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetValidatorIsPreviousMatchingTargetAttesterCall) Do(f func(int, bool) error) *MockBeaconStateMutatorSetValidatorIsPreviousMatchingTargetAttesterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetValidatorIsPreviousMatchingTargetAttesterCall) DoAndReturn(f func(int, bool) error) *MockBeaconStateMutatorSetValidatorIsPreviousMatchingTargetAttesterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValidatorMinCurrentInclusionDelayAttestation mocks base method.
func (m *MockBeaconStateMutator) SetValidatorMinCurrentInclusionDelayAttestation(arg0 int, arg1 *solid.PendingAttestation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorMinCurrentInclusionDelayAttestation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorMinCurrentInclusionDelayAttestation indicates an expected call of SetValidatorMinCurrentInclusionDelayAttestation.
func (mr *MockBeaconStateMutatorMockRecorder) SetValidatorMinCurrentInclusionDelayAttestation(arg0, arg1 any) *MockBeaconStateMutatorSetValidatorMinCurrentInclusionDelayAttestationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorMinCurrentInclusionDelayAttestation", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetValidatorMinCurrentInclusionDelayAttestation), arg0, arg1)
	return &MockBeaconStateMutatorSetValidatorMinCurrentInclusionDelayAttestationCall{Call: call}
}

// MockBeaconStateMutatorSetValidatorMinCurrentInclusionDelayAttestationCall wrap *gomock.Call
type MockBeaconStateMutatorSetValidatorMinCurrentInclusionDelayAttestationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetValidatorMinCurrentInclusionDelayAttestationCall) Return(arg0 error) *MockBeaconStateMutatorSetValidatorMinCurrentInclusionDelayAttestationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetValidatorMinCurrentInclusionDelayAttestationCall) Do(f func(int, *solid.PendingAttestation) error) *MockBeaconStateMutatorSetValidatorMinCurrentInclusionDelayAttestationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetValidatorMinCurrentInclusionDelayAttestationCall) DoAndReturn(f func(int, *solid.PendingAttestation) error) *MockBeaconStateMutatorSetValidatorMinCurrentInclusionDelayAttestationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValidatorMinPreviousInclusionDelayAttestation mocks base method.
func (m *MockBeaconStateMutator) SetValidatorMinPreviousInclusionDelayAttestation(arg0 int, arg1 *solid.PendingAttestation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorMinPreviousInclusionDelayAttestation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorMinPreviousInclusionDelayAttestation indicates an expected call of SetValidatorMinPreviousInclusionDelayAttestation.
func (mr *MockBeaconStateMutatorMockRecorder) SetValidatorMinPreviousInclusionDelayAttestation(arg0, arg1 any) *MockBeaconStateMutatorSetValidatorMinPreviousInclusionDelayAttestationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorMinPreviousInclusionDelayAttestation", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetValidatorMinPreviousInclusionDelayAttestation), arg0, arg1)
	return &MockBeaconStateMutatorSetValidatorMinPreviousInclusionDelayAttestationCall{Call: call}
}

// MockBeaconStateMutatorSetValidatorMinPreviousInclusionDelayAttestationCall wrap *gomock.Call
type MockBeaconStateMutatorSetValidatorMinPreviousInclusionDelayAttestationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetValidatorMinPreviousInclusionDelayAttestationCall) Return(arg0 error) *MockBeaconStateMutatorSetValidatorMinPreviousInclusionDelayAttestationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetValidatorMinPreviousInclusionDelayAttestationCall) Do(f func(int, *solid.PendingAttestation) error) *MockBeaconStateMutatorSetValidatorMinPreviousInclusionDelayAttestationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetValidatorMinPreviousInclusionDelayAttestationCall) DoAndReturn(f func(int, *solid.PendingAttestation) error) *MockBeaconStateMutatorSetValidatorMinPreviousInclusionDelayAttestationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetValidatorSlashed mocks base method.
func (m *MockBeaconStateMutator) SetValidatorSlashed(arg0 int, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorSlashed", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorSlashed indicates an expected call of SetValidatorSlashed.
func (mr *MockBeaconStateMutatorMockRecorder) SetValidatorSlashed(arg0, arg1 any) *MockBeaconStateMutatorSetValidatorSlashedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorSlashed", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetValidatorSlashed), arg0, arg1)
	return &MockBeaconStateMutatorSetValidatorSlashedCall{Call: call}
}

// MockBeaconStateMutatorSetValidatorSlashedCall wrap *gomock.Call
type MockBeaconStateMutatorSetValidatorSlashedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetValidatorSlashedCall) Return(arg0 error) *MockBeaconStateMutatorSetValidatorSlashedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetValidatorSlashedCall) Do(f func(int, bool) error) *MockBeaconStateMutatorSetValidatorSlashedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetValidatorSlashedCall) DoAndReturn(f func(int, bool) error) *MockBeaconStateMutatorSetValidatorSlashedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetVersion mocks base method.
func (m *MockBeaconStateMutator) SetVersion(arg0 clparams.StateVersion) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVersion", arg0)
}

// SetVersion indicates an expected call of SetVersion.
func (mr *MockBeaconStateMutatorMockRecorder) SetVersion(arg0 any) *MockBeaconStateMutatorSetVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVersion", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetVersion), arg0)
	return &MockBeaconStateMutatorSetVersionCall{Call: call}
}

// MockBeaconStateMutatorSetVersionCall wrap *gomock.Call
type MockBeaconStateMutatorSetVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetVersionCall) Return() *MockBeaconStateMutatorSetVersionCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetVersionCall) Do(f func(clparams.StateVersion)) *MockBeaconStateMutatorSetVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetVersionCall) DoAndReturn(f func(clparams.StateVersion)) *MockBeaconStateMutatorSetVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetWithdrawableEpochForValidatorAtIndex mocks base method.
func (m *MockBeaconStateMutator) SetWithdrawableEpochForValidatorAtIndex(arg0 int, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithdrawableEpochForValidatorAtIndex", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithdrawableEpochForValidatorAtIndex indicates an expected call of SetWithdrawableEpochForValidatorAtIndex.
func (mr *MockBeaconStateMutatorMockRecorder) SetWithdrawableEpochForValidatorAtIndex(arg0, arg1 any) *MockBeaconStateMutatorSetWithdrawableEpochForValidatorAtIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithdrawableEpochForValidatorAtIndex", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetWithdrawableEpochForValidatorAtIndex), arg0, arg1)
	return &MockBeaconStateMutatorSetWithdrawableEpochForValidatorAtIndexCall{Call: call}
}

// MockBeaconStateMutatorSetWithdrawableEpochForValidatorAtIndexCall wrap *gomock.Call
type MockBeaconStateMutatorSetWithdrawableEpochForValidatorAtIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetWithdrawableEpochForValidatorAtIndexCall) Return(arg0 error) *MockBeaconStateMutatorSetWithdrawableEpochForValidatorAtIndexCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetWithdrawableEpochForValidatorAtIndexCall) Do(f func(int, uint64) error) *MockBeaconStateMutatorSetWithdrawableEpochForValidatorAtIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetWithdrawableEpochForValidatorAtIndexCall) DoAndReturn(f func(int, uint64) error) *MockBeaconStateMutatorSetWithdrawableEpochForValidatorAtIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetWithdrawalCredentialForValidatorAtIndex mocks base method.
func (m *MockBeaconStateMutator) SetWithdrawalCredentialForValidatorAtIndex(arg0 int, arg1 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWithdrawalCredentialForValidatorAtIndex", arg0, arg1)
}

// SetWithdrawalCredentialForValidatorAtIndex indicates an expected call of SetWithdrawalCredentialForValidatorAtIndex.
func (mr *MockBeaconStateMutatorMockRecorder) SetWithdrawalCredentialForValidatorAtIndex(arg0, arg1 any) *MockBeaconStateMutatorSetWithdrawalCredentialForValidatorAtIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithdrawalCredentialForValidatorAtIndex", reflect.TypeOf((*MockBeaconStateMutator)(nil).SetWithdrawalCredentialForValidatorAtIndex), arg0, arg1)
	return &MockBeaconStateMutatorSetWithdrawalCredentialForValidatorAtIndexCall{Call: call}
}

// MockBeaconStateMutatorSetWithdrawalCredentialForValidatorAtIndexCall wrap *gomock.Call
type MockBeaconStateMutatorSetWithdrawalCredentialForValidatorAtIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBeaconStateMutatorSetWithdrawalCredentialForValidatorAtIndexCall) Return() *MockBeaconStateMutatorSetWithdrawalCredentialForValidatorAtIndexCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBeaconStateMutatorSetWithdrawalCredentialForValidatorAtIndexCall) Do(f func(int, common.Hash)) *MockBeaconStateMutatorSetWithdrawalCredentialForValidatorAtIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBeaconStateMutatorSetWithdrawalCredentialForValidatorAtIndexCall) DoAndReturn(f func(int, common.Hash)) *MockBeaconStateMutatorSetWithdrawalCredentialForValidatorAtIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

func (c *MockBeaconStateMutator) SetPreviousEpochAttestations(attestations *solid.ListSSZ[*solid.PendingAttestation]) {

}
