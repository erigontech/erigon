// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erigontech/erigon/cl/monitor (interfaces: ValidatorMonitor)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=mock_services/validator_monitor_mock.go -package=mock_services . ValidatorMonitor
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	cltypes "github.com/erigontech/erigon/cl/cltypes"
	gomock "go.uber.org/mock/gomock"
)

// MockValidatorMonitor is a mock of ValidatorMonitor interface.
type MockValidatorMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMonitorMockRecorder
}

// MockValidatorMonitorMockRecorder is the mock recorder for MockValidatorMonitor.
type MockValidatorMonitorMockRecorder struct {
	mock *MockValidatorMonitor
}

// NewMockValidatorMonitor creates a new mock instance.
func NewMockValidatorMonitor(ctrl *gomock.Controller) *MockValidatorMonitor {
	mock := &MockValidatorMonitor{ctrl: ctrl}
	mock.recorder = &MockValidatorMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorMonitor) EXPECT() *MockValidatorMonitorMockRecorder {
	return m.recorder
}

// AddValidator mocks base method.
func (m *MockValidatorMonitor) AddValidator(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddValidator", arg0)
}

// AddValidator indicates an expected call of AddValidator.
func (mr *MockValidatorMonitorMockRecorder) AddValidator(arg0 any) *MockValidatorMonitorAddValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValidator", reflect.TypeOf((*MockValidatorMonitor)(nil).AddValidator), arg0)
	return &MockValidatorMonitorAddValidatorCall{Call: call}
}

// MockValidatorMonitorAddValidatorCall wrap *gomock.Call
type MockValidatorMonitorAddValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockValidatorMonitorAddValidatorCall) Return() *MockValidatorMonitorAddValidatorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockValidatorMonitorAddValidatorCall) Do(f func(uint64)) *MockValidatorMonitorAddValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockValidatorMonitorAddValidatorCall) DoAndReturn(f func(uint64)) *MockValidatorMonitorAddValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OnNewBlock mocks base method.
func (m *MockValidatorMonitor) OnNewBlock(arg0 *cltypes.BeaconBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnNewBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnNewBlock indicates an expected call of OnNewBlock.
func (mr *MockValidatorMonitorMockRecorder) OnNewBlock(arg0 any) *MockValidatorMonitorOnNewBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewBlock", reflect.TypeOf((*MockValidatorMonitor)(nil).OnNewBlock), arg0)
	return &MockValidatorMonitorOnNewBlockCall{Call: call}
}

// MockValidatorMonitorOnNewBlockCall wrap *gomock.Call
type MockValidatorMonitorOnNewBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockValidatorMonitorOnNewBlockCall) Return(arg0 error) *MockValidatorMonitorOnNewBlockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockValidatorMonitorOnNewBlockCall) Do(f func(*cltypes.BeaconBlock) error) *MockValidatorMonitorOnNewBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockValidatorMonitorOnNewBlockCall) DoAndReturn(f func(*cltypes.BeaconBlock) error) *MockValidatorMonitorOnNewBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveValidator mocks base method.
func (m *MockValidatorMonitor) RemoveValidator(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveValidator", arg0)
}

// RemoveValidator indicates an expected call of RemoveValidator.
func (mr *MockValidatorMonitorMockRecorder) RemoveValidator(arg0 any) *MockValidatorMonitorRemoveValidatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveValidator", reflect.TypeOf((*MockValidatorMonitor)(nil).RemoveValidator), arg0)
	return &MockValidatorMonitorRemoveValidatorCall{Call: call}
}

// MockValidatorMonitorRemoveValidatorCall wrap *gomock.Call
type MockValidatorMonitorRemoveValidatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockValidatorMonitorRemoveValidatorCall) Return() *MockValidatorMonitorRemoveValidatorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockValidatorMonitorRemoveValidatorCall) Do(f func(uint64)) *MockValidatorMonitorRemoveValidatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockValidatorMonitorRemoveValidatorCall) DoAndReturn(f func(uint64)) *MockValidatorMonitorRemoveValidatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
