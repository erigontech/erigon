// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	solid "github.com/ledgerwatch/erigon/cl/cltypes/solid"
	mock "github.com/stretchr/testify/mock"
)

// AggregationPool is an autogenerated mock type for the AggregationPool type
type AggregationPool struct {
	mock.Mock
}

// AddAttestation provides a mock function with given fields: att
func (_m *AggregationPool) AddAttestation(att *solid.Attestation) error {
	ret := _m.Called(att)

	if len(ret) == 0 {
		panic("no return value specified for AddAttestation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*solid.Attestation) error); ok {
		r0 = rf(att)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAggregatationByRoot provides a mock function with given fields: root
func (_m *AggregationPool) GetAggregatationByRoot(root [32]byte) *solid.Attestation {
	ret := _m.Called(root)

	if len(ret) == 0 {
		panic("no return value specified for GetAggregatationByRoot")
	}

	var r0 *solid.Attestation
	if rf, ok := ret.Get(0).(func([32]byte) *solid.Attestation); ok {
		r0 = rf(root)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*solid.Attestation)
		}
	}

	return r0
}

// NewAggregationPool creates a new instance of AggregationPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAggregationPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *AggregationPool {
	mock := &AggregationPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
