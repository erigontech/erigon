// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erigontech/erigon/cl/beacon/synced_data (interfaces: SyncedData)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./mock_services/synced_data_mock.go -package=mock_services . SyncedData
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	common "github.com/erigontech/erigon-lib/common"
	synced_data "github.com/erigontech/erigon/cl/beacon/synced_data"
	state "github.com/erigontech/erigon/cl/phase1/core/state"
	gomock "go.uber.org/mock/gomock"
)

// MockSyncedData is a mock of SyncedData interface.
type MockSyncedData struct {
	ctrl     *gomock.Controller
	recorder *MockSyncedDataMockRecorder
}

// MockSyncedDataMockRecorder is the mock recorder for MockSyncedData.
type MockSyncedDataMockRecorder struct {
	mock *MockSyncedData
}

// NewMockSyncedData creates a new mock instance.
func NewMockSyncedData(ctrl *gomock.Controller) *MockSyncedData {
	mock := &MockSyncedData{ctrl: ctrl}
	mock.recorder = &MockSyncedDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncedData) EXPECT() *MockSyncedDataMockRecorder {
	return m.recorder
}

// CommitteeCount mocks base method.
func (m *MockSyncedData) CommitteeCount(arg0 uint64) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitteeCount", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// CommitteeCount indicates an expected call of CommitteeCount.
func (mr *MockSyncedDataMockRecorder) CommitteeCount(arg0 any) *MockSyncedDataCommitteeCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitteeCount", reflect.TypeOf((*MockSyncedData)(nil).CommitteeCount), arg0)
	return &MockSyncedDataCommitteeCountCall{Call: call}
}

// MockSyncedDataCommitteeCountCall wrap *gomock.Call
type MockSyncedDataCommitteeCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncedDataCommitteeCountCall) Return(arg0 uint64) *MockSyncedDataCommitteeCountCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncedDataCommitteeCountCall) Do(f func(uint64) uint64) *MockSyncedDataCommitteeCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncedDataCommitteeCountCall) DoAndReturn(f func(uint64) uint64) *MockSyncedDataCommitteeCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HeadRoot mocks base method.
func (m *MockSyncedData) HeadRoot() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadRoot")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// HeadRoot indicates an expected call of HeadRoot.
func (mr *MockSyncedDataMockRecorder) HeadRoot() *MockSyncedDataHeadRootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadRoot", reflect.TypeOf((*MockSyncedData)(nil).HeadRoot))
	return &MockSyncedDataHeadRootCall{Call: call}
}

// MockSyncedDataHeadRootCall wrap *gomock.Call
type MockSyncedDataHeadRootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncedDataHeadRootCall) Return(arg0 common.Hash) *MockSyncedDataHeadRootCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncedDataHeadRootCall) Do(f func() common.Hash) *MockSyncedDataHeadRootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncedDataHeadRootCall) DoAndReturn(f func() common.Hash) *MockSyncedDataHeadRootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HeadSlot mocks base method.
func (m *MockSyncedData) HeadSlot() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadSlot")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// HeadSlot indicates an expected call of HeadSlot.
func (mr *MockSyncedDataMockRecorder) HeadSlot() *MockSyncedDataHeadSlotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadSlot", reflect.TypeOf((*MockSyncedData)(nil).HeadSlot))
	return &MockSyncedDataHeadSlotCall{Call: call}
}

// MockSyncedDataHeadSlotCall wrap *gomock.Call
type MockSyncedDataHeadSlotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncedDataHeadSlotCall) Return(arg0 uint64) *MockSyncedDataHeadSlotCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncedDataHeadSlotCall) Do(f func() uint64) *MockSyncedDataHeadSlotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncedDataHeadSlotCall) DoAndReturn(f func() uint64) *MockSyncedDataHeadSlotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OnHeadState mocks base method.
func (m *MockSyncedData) OnHeadState(arg0 *state.CachingBeaconState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnHeadState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnHeadState indicates an expected call of OnHeadState.
func (mr *MockSyncedDataMockRecorder) OnHeadState(arg0 any) *MockSyncedDataOnHeadStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnHeadState", reflect.TypeOf((*MockSyncedData)(nil).OnHeadState), arg0)
	return &MockSyncedDataOnHeadStateCall{Call: call}
}

// MockSyncedDataOnHeadStateCall wrap *gomock.Call
type MockSyncedDataOnHeadStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncedDataOnHeadStateCall) Return(arg0 error) *MockSyncedDataOnHeadStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncedDataOnHeadStateCall) Do(f func(*state.CachingBeaconState) error) *MockSyncedDataOnHeadStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncedDataOnHeadStateCall) DoAndReturn(f func(*state.CachingBeaconState) error) *MockSyncedDataOnHeadStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Syncing mocks base method.
func (m *MockSyncedData) Syncing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Syncing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Syncing indicates an expected call of Syncing.
func (mr *MockSyncedDataMockRecorder) Syncing() *MockSyncedDataSyncingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Syncing", reflect.TypeOf((*MockSyncedData)(nil).Syncing))
	return &MockSyncedDataSyncingCall{Call: call}
}

// MockSyncedDataSyncingCall wrap *gomock.Call
type MockSyncedDataSyncingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncedDataSyncingCall) Return(arg0 bool) *MockSyncedDataSyncingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncedDataSyncingCall) Do(f func() bool) *MockSyncedDataSyncingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncedDataSyncingCall) DoAndReturn(f func() bool) *MockSyncedDataSyncingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnsetHeadState mocks base method.
func (m *MockSyncedData) UnsetHeadState() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsetHeadState")
}

// UnsetHeadState indicates an expected call of UnsetHeadState.
func (mr *MockSyncedDataMockRecorder) UnsetHeadState() *MockSyncedDataUnsetHeadStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetHeadState", reflect.TypeOf((*MockSyncedData)(nil).UnsetHeadState))
	return &MockSyncedDataUnsetHeadStateCall{Call: call}
}

// MockSyncedDataUnsetHeadStateCall wrap *gomock.Call
type MockSyncedDataUnsetHeadStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncedDataUnsetHeadStateCall) Return() *MockSyncedDataUnsetHeadStateCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncedDataUnsetHeadStateCall) Do(f func()) *MockSyncedDataUnsetHeadStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncedDataUnsetHeadStateCall) DoAndReturn(f func()) *MockSyncedDataUnsetHeadStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ViewHeadState mocks base method.
func (m *MockSyncedData) ViewHeadState(arg0 synced_data.ViewHeadStateFn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewHeadState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ViewHeadState indicates an expected call of ViewHeadState.
func (mr *MockSyncedDataMockRecorder) ViewHeadState(arg0 any) *MockSyncedDataViewHeadStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewHeadState", reflect.TypeOf((*MockSyncedData)(nil).ViewHeadState), arg0)
	return &MockSyncedDataViewHeadStateCall{Call: call}
}

// MockSyncedDataViewHeadStateCall wrap *gomock.Call
type MockSyncedDataViewHeadStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncedDataViewHeadStateCall) Return(arg0 error) *MockSyncedDataViewHeadStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncedDataViewHeadStateCall) Do(f func(synced_data.ViewHeadStateFn) error) *MockSyncedDataViewHeadStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncedDataViewHeadStateCall) DoAndReturn(f func(synced_data.ViewHeadStateFn) error) *MockSyncedDataViewHeadStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
