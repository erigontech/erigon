// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ledgerwatch/erigon/cl/beacon/synced_data (interfaces: SyncedData)
//
// Generated by this command:
//
//	mockgen -destination=./mock_services/synced_data_mock.go -package=mock_services . SyncedData
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	state "github.com/ledgerwatch/erigon/cl/phase1/core/state"
	gomock "go.uber.org/mock/gomock"
)

// MockSyncedData is a mock of SyncedData interface.
type MockSyncedData struct {
	ctrl     *gomock.Controller
	recorder *MockSyncedDataMockRecorder
}

// MockSyncedDataMockRecorder is the mock recorder for MockSyncedData.
type MockSyncedDataMockRecorder struct {
	mock *MockSyncedData
}

// NewMockSyncedData creates a new mock instance.
func NewMockSyncedData(ctrl *gomock.Controller) *MockSyncedData {
	mock := &MockSyncedData{ctrl: ctrl}
	mock.recorder = &MockSyncedDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncedData) EXPECT() *MockSyncedDataMockRecorder {
	return m.recorder
}

// HeadSlot mocks base method.
func (m *MockSyncedData) HeadSlot() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadSlot")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// HeadSlot indicates an expected call of HeadSlot.
func (mr *MockSyncedDataMockRecorder) HeadSlot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadSlot", reflect.TypeOf((*MockSyncedData)(nil).HeadSlot))
}

// HeadState mocks base method.
func (m *MockSyncedData) HeadState() *state.CachingBeaconState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadState")
	ret0, _ := ret[0].(*state.CachingBeaconState)
	return ret0
}

// HeadState indicates an expected call of HeadState.
func (mr *MockSyncedDataMockRecorder) HeadState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadState", reflect.TypeOf((*MockSyncedData)(nil).HeadState))
}

// HeadStateReader mocks base method.
func (m *MockSyncedData) HeadStateReader() state.BeaconStateReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadStateReader")
	ret0, _ := ret[0].(state.BeaconStateReader)
	return ret0
}

// HeadStateReader indicates an expected call of HeadStateReader.
func (mr *MockSyncedDataMockRecorder) HeadStateReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadStateReader", reflect.TypeOf((*MockSyncedData)(nil).HeadStateReader))
}

// OnHeadState mocks base method.
func (m *MockSyncedData) OnHeadState(arg0 *state.CachingBeaconState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnHeadState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnHeadState indicates an expected call of OnHeadState.
func (mr *MockSyncedDataMockRecorder) OnHeadState(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnHeadState", reflect.TypeOf((*MockSyncedData)(nil).OnHeadState), arg0)
}

// Syncing mocks base method.
func (m *MockSyncedData) Syncing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Syncing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Syncing indicates an expected call of Syncing.
func (mr *MockSyncedDataMockRecorder) Syncing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Syncing", reflect.TypeOf((*MockSyncedData)(nil).Syncing))
}
