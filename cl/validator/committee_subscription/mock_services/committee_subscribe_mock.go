// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ledgerwatch/erigon/cl/validator/committee_subscription (interfaces: CommitteeSubscribe)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./mock_services/committee_subscribe_mock.go -package=mock_services . CommitteeSubscribe
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	cltypes "github.com/ledgerwatch/erigon/cl/cltypes"
	solid "github.com/ledgerwatch/erigon/cl/cltypes/solid"
	gomock "go.uber.org/mock/gomock"
)

// MockCommitteeSubscribe is a mock of CommitteeSubscribe interface.
type MockCommitteeSubscribe struct {
	ctrl     *gomock.Controller
	recorder *MockCommitteeSubscribeMockRecorder
}

// MockCommitteeSubscribeMockRecorder is the mock recorder for MockCommitteeSubscribe.
type MockCommitteeSubscribeMockRecorder struct {
	mock *MockCommitteeSubscribe
}

// NewMockCommitteeSubscribe creates a new mock instance.
func NewMockCommitteeSubscribe(ctrl *gomock.Controller) *MockCommitteeSubscribe {
	mock := &MockCommitteeSubscribe{ctrl: ctrl}
	mock.recorder = &MockCommitteeSubscribeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitteeSubscribe) EXPECT() *MockCommitteeSubscribeMockRecorder {
	return m.recorder
}

// AddAttestationSubscription mocks base method.
func (m *MockCommitteeSubscribe) AddAttestationSubscription(arg0 context.Context, arg1 *cltypes.BeaconCommitteeSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAttestationSubscription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAttestationSubscription indicates an expected call of AddAttestationSubscription.
func (mr *MockCommitteeSubscribeMockRecorder) AddAttestationSubscription(arg0, arg1 any) *MockCommitteeSubscribeAddAttestationSubscriptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttestationSubscription", reflect.TypeOf((*MockCommitteeSubscribe)(nil).AddAttestationSubscription), arg0, arg1)
	return &MockCommitteeSubscribeAddAttestationSubscriptionCall{Call: call}
}

// MockCommitteeSubscribeAddAttestationSubscriptionCall wrap *gomock.Call
type MockCommitteeSubscribeAddAttestationSubscriptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommitteeSubscribeAddAttestationSubscriptionCall) Return(arg0 error) *MockCommitteeSubscribeAddAttestationSubscriptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommitteeSubscribeAddAttestationSubscriptionCall) Do(f func(context.Context, *cltypes.BeaconCommitteeSubscription) error) *MockCommitteeSubscribeAddAttestationSubscriptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommitteeSubscribeAddAttestationSubscriptionCall) DoAndReturn(f func(context.Context, *cltypes.BeaconCommitteeSubscription) error) *MockCommitteeSubscribeAddAttestationSubscriptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckAggregateAttestation mocks base method.
func (m *MockCommitteeSubscribe) CheckAggregateAttestation(arg0 *solid.Attestation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAggregateAttestation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAggregateAttestation indicates an expected call of CheckAggregateAttestation.
func (mr *MockCommitteeSubscribeMockRecorder) CheckAggregateAttestation(arg0 any) *MockCommitteeSubscribeCheckAggregateAttestationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAggregateAttestation", reflect.TypeOf((*MockCommitteeSubscribe)(nil).CheckAggregateAttestation), arg0)
	return &MockCommitteeSubscribeCheckAggregateAttestationCall{Call: call}
}

// MockCommitteeSubscribeCheckAggregateAttestationCall wrap *gomock.Call
type MockCommitteeSubscribeCheckAggregateAttestationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommitteeSubscribeCheckAggregateAttestationCall) Return(arg0 error) *MockCommitteeSubscribeCheckAggregateAttestationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommitteeSubscribeCheckAggregateAttestationCall) Do(f func(*solid.Attestation) error) *MockCommitteeSubscribeCheckAggregateAttestationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommitteeSubscribeCheckAggregateAttestationCall) DoAndReturn(f func(*solid.Attestation) error) *MockCommitteeSubscribeCheckAggregateAttestationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
