// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock.go -package=sync_contribution_pool
//

// Package sync_contribution_pool is a generated GoMock package.
package sync_contribution_pool

import (
	reflect "reflect"

	common "github.com/ledgerwatch/erigon-lib/common"
	cltypes "github.com/ledgerwatch/erigon/cl/cltypes"
	state "github.com/ledgerwatch/erigon/cl/phase1/core/state"
	gomock "go.uber.org/mock/gomock"
)

// MockSyncContributionPool is a mock of SyncContributionPool interface.
type MockSyncContributionPool struct {
	ctrl     *gomock.Controller
	recorder *MockSyncContributionPoolMockRecorder
}

// MockSyncContributionPoolMockRecorder is the mock recorder for MockSyncContributionPool.
type MockSyncContributionPoolMockRecorder struct {
	mock *MockSyncContributionPool
}

// NewMockSyncContributionPool creates a new mock instance.
func NewMockSyncContributionPool(ctrl *gomock.Controller) *MockSyncContributionPool {
	mock := &MockSyncContributionPool{ctrl: ctrl}
	mock.recorder = &MockSyncContributionPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncContributionPool) EXPECT() *MockSyncContributionPoolMockRecorder {
	return m.recorder
}

// AddSyncCommitteeMessage mocks base method.
func (m *MockSyncContributionPool) AddSyncCommitteeMessage(headState *state.CachingBeaconState, subCommitee uint64, message *cltypes.SyncCommitteeMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSyncCommitteeMessage", headState, subCommitee, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSyncCommitteeMessage indicates an expected call of AddSyncCommitteeMessage.
func (mr *MockSyncContributionPoolMockRecorder) AddSyncCommitteeMessage(headState, subCommitee, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSyncCommitteeMessage", reflect.TypeOf((*MockSyncContributionPool)(nil).AddSyncCommitteeMessage), headState, subCommitee, message)
}

// AddSyncContribution mocks base method.
func (m *MockSyncContributionPool) AddSyncContribution(headState *state.CachingBeaconState, contribution *cltypes.Contribution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSyncContribution", headState, contribution)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSyncContribution indicates an expected call of AddSyncContribution.
func (mr *MockSyncContributionPoolMockRecorder) AddSyncContribution(headState, contribution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSyncContribution", reflect.TypeOf((*MockSyncContributionPool)(nil).AddSyncContribution), headState, contribution)
}

// GetSyncContribution mocks base method.
func (m *MockSyncContributionPool) GetSyncContribution(slot, subcommitteeIndex uint64, beaconBlockRoot common.Hash) *cltypes.Contribution {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncContribution", slot, subcommitteeIndex, beaconBlockRoot)
	ret0, _ := ret[0].(*cltypes.Contribution)
	return ret0
}

// GetSyncContribution indicates an expected call of GetSyncContribution.
func (mr *MockSyncContributionPoolMockRecorder) GetSyncContribution(slot, subcommitteeIndex, beaconBlockRoot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncContribution", reflect.TypeOf((*MockSyncContributionPool)(nil).GetSyncContribution), slot, subcommitteeIndex, beaconBlockRoot)
}
