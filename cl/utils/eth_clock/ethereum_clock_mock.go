// Code generated by MockGen. DO NOT EDIT.
// Source: ./ethereum_clock.go
//
// Generated by this command:
//
//	mockgen -source=./ethereum_clock.go -destination=./ethereum_clock_mock.go -package=eth_clock . EthereumClock
//

// Package eth_clock is a generated GoMock package.
package eth_clock

import (
	reflect "reflect"
	time "time"

	common "github.com/ledgerwatch/erigon-lib/common"
	clparams "github.com/ledgerwatch/erigon/cl/clparams"
	gomock "go.uber.org/mock/gomock"
)

// MockEthereumClock is a mock of EthereumClock interface.
type MockEthereumClock struct {
	ctrl     *gomock.Controller
	recorder *MockEthereumClockMockRecorder
}

// MockEthereumClockMockRecorder is the mock recorder for MockEthereumClock.
type MockEthereumClockMockRecorder struct {
	mock *MockEthereumClock
}

// NewMockEthereumClock creates a new mock instance.
func NewMockEthereumClock(ctrl *gomock.Controller) *MockEthereumClock {
	mock := &MockEthereumClock{ctrl: ctrl}
	mock.recorder = &MockEthereumClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthereumClock) EXPECT() *MockEthereumClockMockRecorder {
	return m.recorder
}

// ComputeForkDigestForVersion mocks base method.
func (m *MockEthereumClock) ComputeForkDigestForVersion(currentVersion common.Bytes4) (common.Bytes4, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeForkDigestForVersion", currentVersion)
	ret0, _ := ret[0].(common.Bytes4)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeForkDigestForVersion indicates an expected call of ComputeForkDigestForVersion.
func (mr *MockEthereumClockMockRecorder) ComputeForkDigestForVersion(currentVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeForkDigestForVersion", reflect.TypeOf((*MockEthereumClock)(nil).ComputeForkDigestForVersion), currentVersion)
}

// CurrentForkDigest mocks base method.
func (m *MockEthereumClock) CurrentForkDigest() (common.Bytes4, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentForkDigest")
	ret0, _ := ret[0].(common.Bytes4)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentForkDigest indicates an expected call of CurrentForkDigest.
func (mr *MockEthereumClockMockRecorder) CurrentForkDigest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentForkDigest", reflect.TypeOf((*MockEthereumClock)(nil).CurrentForkDigest))
}

// ForkId mocks base method.
func (m *MockEthereumClock) ForkId() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForkId")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForkId indicates an expected call of ForkId.
func (mr *MockEthereumClockMockRecorder) ForkId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForkId", reflect.TypeOf((*MockEthereumClock)(nil).ForkId))
}

// GenesisTime mocks base method.
func (m *MockEthereumClock) GenesisTime() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenesisTime")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GenesisTime indicates an expected call of GenesisTime.
func (mr *MockEthereumClockMockRecorder) GenesisTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenesisTime", reflect.TypeOf((*MockEthereumClock)(nil).GenesisTime))
}

// GenesisValidatorsRoot mocks base method.
func (m *MockEthereumClock) GenesisValidatorsRoot() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenesisValidatorsRoot")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GenesisValidatorsRoot indicates an expected call of GenesisValidatorsRoot.
func (mr *MockEthereumClockMockRecorder) GenesisValidatorsRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenesisValidatorsRoot", reflect.TypeOf((*MockEthereumClock)(nil).GenesisValidatorsRoot))
}

// GetCurrentEpoch mocks base method.
func (m *MockEthereumClock) GetCurrentEpoch() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentEpoch")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCurrentEpoch indicates an expected call of GetCurrentEpoch.
func (mr *MockEthereumClockMockRecorder) GetCurrentEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentEpoch", reflect.TypeOf((*MockEthereumClock)(nil).GetCurrentEpoch))
}

// GetCurrentSlot mocks base method.
func (m *MockEthereumClock) GetCurrentSlot() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSlot")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCurrentSlot indicates an expected call of GetCurrentSlot.
func (mr *MockEthereumClockMockRecorder) GetCurrentSlot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSlot", reflect.TypeOf((*MockEthereumClock)(nil).GetCurrentSlot))
}

// GetSlotByTime mocks base method.
func (m *MockEthereumClock) GetSlotByTime(time time.Time) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotByTime", time)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetSlotByTime indicates an expected call of GetSlotByTime.
func (mr *MockEthereumClockMockRecorder) GetSlotByTime(time any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotByTime", reflect.TypeOf((*MockEthereumClock)(nil).GetSlotByTime), time)
}

// GetSlotTime mocks base method.
func (m *MockEthereumClock) GetSlotTime(slot uint64) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotTime", slot)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetSlotTime indicates an expected call of GetSlotTime.
func (mr *MockEthereumClockMockRecorder) GetSlotTime(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotTime", reflect.TypeOf((*MockEthereumClock)(nil).GetSlotTime), slot)
}

// IsSlotCurrentSlotWithMaximumClockDisparity mocks base method.
func (m *MockEthereumClock) IsSlotCurrentSlotWithMaximumClockDisparity(slot uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSlotCurrentSlotWithMaximumClockDisparity", slot)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSlotCurrentSlotWithMaximumClockDisparity indicates an expected call of IsSlotCurrentSlotWithMaximumClockDisparity.
func (mr *MockEthereumClockMockRecorder) IsSlotCurrentSlotWithMaximumClockDisparity(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSlotCurrentSlotWithMaximumClockDisparity", reflect.TypeOf((*MockEthereumClock)(nil).IsSlotCurrentSlotWithMaximumClockDisparity), slot)
}

// LastFork mocks base method.
func (m *MockEthereumClock) LastFork() (common.Bytes4, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastFork")
	ret0, _ := ret[0].(common.Bytes4)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastFork indicates an expected call of LastFork.
func (mr *MockEthereumClockMockRecorder) LastFork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastFork", reflect.TypeOf((*MockEthereumClock)(nil).LastFork))
}

// NextForkDigest mocks base method.
func (m *MockEthereumClock) NextForkDigest() (common.Bytes4, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextForkDigest")
	ret0, _ := ret[0].(common.Bytes4)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextForkDigest indicates an expected call of NextForkDigest.
func (mr *MockEthereumClockMockRecorder) NextForkDigest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextForkDigest", reflect.TypeOf((*MockEthereumClock)(nil).NextForkDigest))
}

// StateVersionByForkDigest mocks base method.
func (m *MockEthereumClock) StateVersionByForkDigest(arg0 common.Bytes4) (clparams.StateVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateVersionByForkDigest", arg0)
	ret0, _ := ret[0].(clparams.StateVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateVersionByForkDigest indicates an expected call of StateVersionByForkDigest.
func (mr *MockEthereumClockMockRecorder) StateVersionByForkDigest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateVersionByForkDigest", reflect.TypeOf((*MockEthereumClock)(nil).StateVersionByForkDigest), arg0)
}
