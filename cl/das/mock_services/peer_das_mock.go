// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erigontech/erigon/cl/das (interfaces: PeerDas)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=mock_services/peer_das_mock.go -package=mock_services . PeerDas
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	common "github.com/erigontech/erigon-lib/common"
	cltypes "github.com/erigontech/erigon/cl/cltypes"
	enode "github.com/erigontech/erigon/p2p/enode"
	gomock "go.uber.org/mock/gomock"
)

// MockPeerDas is a mock of PeerDas interface.
type MockPeerDas struct {
	ctrl     *gomock.Controller
	recorder *MockPeerDasMockRecorder
	isgomock struct{}
}

// MockPeerDasMockRecorder is the mock recorder for MockPeerDas.
type MockPeerDasMockRecorder struct {
	mock *MockPeerDas
}

// NewMockPeerDas creates a new mock instance.
func NewMockPeerDas(ctrl *gomock.Controller) *MockPeerDas {
	mock := &MockPeerDas{ctrl: ctrl}
	mock.recorder = &MockPeerDasMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerDas) EXPECT() *MockPeerDasMockRecorder {
	return m.recorder
}

// CustodyGroupCount mocks base method.
func (m *MockPeerDas) CustodyGroupCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustodyGroupCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// CustodyGroupCount indicates an expected call of CustodyGroupCount.
func (mr *MockPeerDasMockRecorder) CustodyGroupCount() *MockPeerDasCustodyGroupCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustodyGroupCount", reflect.TypeOf((*MockPeerDas)(nil).CustodyGroupCount))
	return &MockPeerDasCustodyGroupCountCall{Call: call}
}

// MockPeerDasCustodyGroupCountCall wrap *gomock.Call
type MockPeerDasCustodyGroupCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPeerDasCustodyGroupCountCall) Return(arg0 uint64) *MockPeerDasCustodyGroupCountCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPeerDasCustodyGroupCountCall) Do(f func() uint64) *MockPeerDasCustodyGroupCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPeerDasCustodyGroupCountCall) DoAndReturn(f func() uint64) *MockPeerDasCustodyGroupCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DataRecoverAndPrune mocks base method.
func (m *MockPeerDas) DataRecoverAndPrune(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataRecoverAndPrune", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DataRecoverAndPrune indicates an expected call of DataRecoverAndPrune.
func (mr *MockPeerDasMockRecorder) DataRecoverAndPrune(ctx any) *MockPeerDasDataRecoverAndPruneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataRecoverAndPrune", reflect.TypeOf((*MockPeerDas)(nil).DataRecoverAndPrune), ctx)
	return &MockPeerDasDataRecoverAndPruneCall{Call: call}
}

// MockPeerDasDataRecoverAndPruneCall wrap *gomock.Call
type MockPeerDasDataRecoverAndPruneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPeerDasDataRecoverAndPruneCall) Return(arg0 error) *MockPeerDasDataRecoverAndPruneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPeerDasDataRecoverAndPruneCall) Do(f func(context.Context) error) *MockPeerDasDataRecoverAndPruneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPeerDasDataRecoverAndPruneCall) DoAndReturn(f func(context.Context) error) *MockPeerDasDataRecoverAndPruneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DownloadMissingColumnsByBlocks mocks base method.
func (m *MockPeerDas) DownloadMissingColumnsByBlocks(ctx context.Context, blocks []*cltypes.SignedBeaconBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadMissingColumnsByBlocks", ctx, blocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadMissingColumnsByBlocks indicates an expected call of DownloadMissingColumnsByBlocks.
func (mr *MockPeerDasMockRecorder) DownloadMissingColumnsByBlocks(ctx, blocks any) *MockPeerDasDownloadMissingColumnsByBlocksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadMissingColumnsByBlocks", reflect.TypeOf((*MockPeerDas)(nil).DownloadMissingColumnsByBlocks), ctx, blocks)
	return &MockPeerDasDownloadMissingColumnsByBlocksCall{Call: call}
}

// MockPeerDasDownloadMissingColumnsByBlocksCall wrap *gomock.Call
type MockPeerDasDownloadMissingColumnsByBlocksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPeerDasDownloadMissingColumnsByBlocksCall) Return(arg0 error) *MockPeerDasDownloadMissingColumnsByBlocksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPeerDasDownloadMissingColumnsByBlocksCall) Do(f func(context.Context, []*cltypes.SignedBeaconBlock) error) *MockPeerDasDownloadMissingColumnsByBlocksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPeerDasDownloadMissingColumnsByBlocksCall) DoAndReturn(f func(context.Context, []*cltypes.SignedBeaconBlock) error) *MockPeerDasDownloadMissingColumnsByBlocksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitLocalNodeId mocks base method.
func (m *MockPeerDas) InitLocalNodeId(nodeId enode.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitLocalNodeId", nodeId)
}

// InitLocalNodeId indicates an expected call of InitLocalNodeId.
func (mr *MockPeerDasMockRecorder) InitLocalNodeId(nodeId any) *MockPeerDasInitLocalNodeIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitLocalNodeId", reflect.TypeOf((*MockPeerDas)(nil).InitLocalNodeId), nodeId)
	return &MockPeerDasInitLocalNodeIdCall{Call: call}
}

// MockPeerDasInitLocalNodeIdCall wrap *gomock.Call
type MockPeerDasInitLocalNodeIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPeerDasInitLocalNodeIdCall) Return() *MockPeerDasInitLocalNodeIdCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPeerDasInitLocalNodeIdCall) Do(f func(enode.ID)) *MockPeerDasInitLocalNodeIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPeerDasInitLocalNodeIdCall) DoAndReturn(f func(enode.ID)) *MockPeerDasInitLocalNodeIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsDataAvailable mocks base method.
func (m *MockPeerDas) IsDataAvailable(ctx context.Context, blockRoot common.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDataAvailable", ctx, blockRoot)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDataAvailable indicates an expected call of IsDataAvailable.
func (mr *MockPeerDasMockRecorder) IsDataAvailable(ctx, blockRoot any) *MockPeerDasIsDataAvailableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDataAvailable", reflect.TypeOf((*MockPeerDas)(nil).IsDataAvailable), ctx, blockRoot)
	return &MockPeerDasIsDataAvailableCall{Call: call}
}

// MockPeerDasIsDataAvailableCall wrap *gomock.Call
type MockPeerDasIsDataAvailableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPeerDasIsDataAvailableCall) Return(arg0 bool, arg1 error) *MockPeerDasIsDataAvailableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPeerDasIsDataAvailableCall) Do(f func(context.Context, common.Hash) (bool, error)) *MockPeerDasIsDataAvailableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPeerDasIsDataAvailableCall) DoAndReturn(f func(context.Context, common.Hash) (bool, error)) *MockPeerDasIsDataAvailableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
