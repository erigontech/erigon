// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erigontech/erigon/cl/das/state (interfaces: PeerDasStateReader)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=mock_services/peer_das_state_reader_mock.go -package=mock_services . PeerDasStateReader
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPeerDasStateReader is a mock of PeerDasStateReader interface.
type MockPeerDasStateReader struct {
	ctrl     *gomock.Controller
	recorder *MockPeerDasStateReaderMockRecorder
	isgomock struct{}
}

// MockPeerDasStateReaderMockRecorder is the mock recorder for MockPeerDasStateReader.
type MockPeerDasStateReaderMockRecorder struct {
	mock *MockPeerDasStateReader
}

// NewMockPeerDasStateReader creates a new mock instance.
func NewMockPeerDasStateReader(ctrl *gomock.Controller) *MockPeerDasStateReader {
	mock := &MockPeerDasStateReader{ctrl: ctrl}
	mock.recorder = &MockPeerDasStateReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerDasStateReader) EXPECT() *MockPeerDasStateReaderMockRecorder {
	return m.recorder
}

// GetAdvertisedCgc mocks base method.
func (m *MockPeerDasStateReader) GetAdvertisedCgc() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertisedCgc")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetAdvertisedCgc indicates an expected call of GetAdvertisedCgc.
func (mr *MockPeerDasStateReaderMockRecorder) GetAdvertisedCgc() *MockPeerDasStateReaderGetAdvertisedCgcCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertisedCgc", reflect.TypeOf((*MockPeerDasStateReader)(nil).GetAdvertisedCgc))
	return &MockPeerDasStateReaderGetAdvertisedCgcCall{Call: call}
}

// MockPeerDasStateReaderGetAdvertisedCgcCall wrap *gomock.Call
type MockPeerDasStateReaderGetAdvertisedCgcCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPeerDasStateReaderGetAdvertisedCgcCall) Return(arg0 uint64) *MockPeerDasStateReaderGetAdvertisedCgcCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPeerDasStateReaderGetAdvertisedCgcCall) Do(f func() uint64) *MockPeerDasStateReaderGetAdvertisedCgcCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPeerDasStateReaderGetAdvertisedCgcCall) DoAndReturn(f func() uint64) *MockPeerDasStateReaderGetAdvertisedCgcCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEarliestAvailableSlot mocks base method.
func (m *MockPeerDasStateReader) GetEarliestAvailableSlot() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEarliestAvailableSlot")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetEarliestAvailableSlot indicates an expected call of GetEarliestAvailableSlot.
func (mr *MockPeerDasStateReaderMockRecorder) GetEarliestAvailableSlot() *MockPeerDasStateReaderGetEarliestAvailableSlotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarliestAvailableSlot", reflect.TypeOf((*MockPeerDasStateReader)(nil).GetEarliestAvailableSlot))
	return &MockPeerDasStateReaderGetEarliestAvailableSlotCall{Call: call}
}

// MockPeerDasStateReaderGetEarliestAvailableSlotCall wrap *gomock.Call
type MockPeerDasStateReaderGetEarliestAvailableSlotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPeerDasStateReaderGetEarliestAvailableSlotCall) Return(arg0 uint64) *MockPeerDasStateReaderGetEarliestAvailableSlotCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPeerDasStateReaderGetEarliestAvailableSlotCall) Do(f func() uint64) *MockPeerDasStateReaderGetEarliestAvailableSlotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPeerDasStateReaderGetEarliestAvailableSlotCall) DoAndReturn(f func() uint64) *MockPeerDasStateReaderGetEarliestAvailableSlotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMyCustodyColumns mocks base method.
func (m *MockPeerDasStateReader) GetMyCustodyColumns() (map[uint64]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyCustodyColumns")
	ret0, _ := ret[0].(map[uint64]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyCustodyColumns indicates an expected call of GetMyCustodyColumns.
func (mr *MockPeerDasStateReaderMockRecorder) GetMyCustodyColumns() *MockPeerDasStateReaderGetMyCustodyColumnsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyCustodyColumns", reflect.TypeOf((*MockPeerDasStateReader)(nil).GetMyCustodyColumns))
	return &MockPeerDasStateReaderGetMyCustodyColumnsCall{Call: call}
}

// MockPeerDasStateReaderGetMyCustodyColumnsCall wrap *gomock.Call
type MockPeerDasStateReaderGetMyCustodyColumnsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPeerDasStateReaderGetMyCustodyColumnsCall) Return(arg0 map[uint64]bool, arg1 error) *MockPeerDasStateReaderGetMyCustodyColumnsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPeerDasStateReaderGetMyCustodyColumnsCall) Do(f func() (map[uint64]bool, error)) *MockPeerDasStateReaderGetMyCustodyColumnsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPeerDasStateReaderGetMyCustodyColumnsCall) DoAndReturn(f func() (map[uint64]bool, error)) *MockPeerDasStateReaderGetMyCustodyColumnsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRealCgc mocks base method.
func (m *MockPeerDasStateReader) GetRealCgc() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealCgc")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRealCgc indicates an expected call of GetRealCgc.
func (mr *MockPeerDasStateReaderMockRecorder) GetRealCgc() *MockPeerDasStateReaderGetRealCgcCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealCgc", reflect.TypeOf((*MockPeerDasStateReader)(nil).GetRealCgc))
	return &MockPeerDasStateReaderGetRealCgcCall{Call: call}
}

// MockPeerDasStateReaderGetRealCgcCall wrap *gomock.Call
type MockPeerDasStateReaderGetRealCgcCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPeerDasStateReaderGetRealCgcCall) Return(arg0 uint64) *MockPeerDasStateReaderGetRealCgcCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPeerDasStateReaderGetRealCgcCall) Do(f func() uint64) *MockPeerDasStateReaderGetRealCgcCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPeerDasStateReaderGetRealCgcCall) DoAndReturn(f func() uint64) *MockPeerDasStateReaderGetRealCgcCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
