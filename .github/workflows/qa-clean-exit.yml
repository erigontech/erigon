name: QA - Erigon clean exit on Ctrl-C

on:
  push:
    branches:
      - devel
      - alpha
      - 'release/**'
      - workflow_clean_exit
  #pull_request:
  #  branches:
  #    - devel
  #    - alpha
  #    - 'release/**'
  #  types:
  #    - opened
  #    - reopened
  #    - synchronize
  #    - ready_for_review

jobs:
  long-running-test:
    #if: ${{ github.event_name == 'push' || !github.event.pull_request.draft }}
    #strategy:
    #  matrix:
    #    os: [ ubuntu-22.04, macos-13-xlarge ]
    #runs-on: ${{ matrix.os }}
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    #- name: Install dependencies
    #  run: |
    #    sudo apt-get update
    #    sudo apt-get install -y build-essential make gcc

    - name: Build Erigon
      run: |
        make erigon
      working-directory: ${{ github.workspace }}

    #- name: Download Python Script for Logs Checking
    #  run: |
    #    curl -o check_erigon_exit.py 'https://gist.githubusercontent.com/mriccobene/8db4030a745de34d527f136f2caa104f/raw/3c1a860cb87d61075e78ce399e17f0ab157cacc6/check_erigon_exit.py'

    - name: Run Erigon, send ctrl-c and check for clean exiting
      run: |
        # Run Erigon in background, send ctrl-c and check logs
        
        # Run Erigon in background
        ./build/bin/erigon & 
        ERIGON_PID=$!
        
        # Start the log monitoring script in the background
        python3 ./tests/qa/check_clean_exit.py $ERIGON_PID /home/runner/.local/share/erigon/logs/erigon.log
       
        # Capture monitoring script exit status
        monitoring_exit_status=$?
        
        # Clean up Erigon process if it's still running
        if kill -0 $ERIGON_PID 2> /dev/null; then
          echo "Terminating Erigon"
          kill $ERIGON_PID
          wait $ERIGON_PID
        else
          echo "Erigon has already terminated"
        fi
        
        # Check monitoring script exit status
        if [ $monitoring_exit_status -eq 0 ]; then
          echo "Monitoring completed successfully"
        else
          echo "Error detected in Erigon logs or monitoring script exited unexpectedly"
          exit 1
        fi
