name: QA - TxPool performance test

on:
  workflow_call:
  workflow_dispatch:
  # push:
  #   branches:
  #       - main
  #       - release/*
  #       - docker_pectra

jobs:
  assertoor_test:
    runs-on: [self-hosted, qa, long-running]
    env:
      ERIGON_QA_PATH: /home/qarunner/erigon-qa

    steps:
      - name: Fast checkout git repository
        uses: actions/checkout@v4

      # - name: Docker build current branch
      #   run: |
      #     docker build -t test/erigon:current .

      - name: Docker build noku-team/assertoor image
        run: |
          git clone https://github.com/noku-team/assertoor.git
          cd assertoor
          docker build -t test/assertoor:current .
          cd ..

      - name: Run regular Kurtosis + assertoor tests
        id: kurtosis_test
        uses: noku-team/kurtosis-assertoor-github-action
        with:
            enclave_name: "kurtosis-run1-${{ github.run_id }}"
            ethereum_package_args: ".github/workflows/kurtosis/txpool-assertoor.io"
            kurtosis_extra_args: --verbosity detailed --cli-log-level trace
            persistent_logs: "true"

      - name: Parse Kurtosis output log and create JSON
        if: ${{ steps.kurtosis_test.outputs.test_result != 'failure' }}
        run: |
          # Download the Kurtosis artifact
          echo "Downloading artifact enclave-dump-kurtosis-run1-${{ github.run_id }}"
          mkdir -p kurtosis_artifacts
          
          # Download the artifact (specify the name of the artifact you uploaded)
          curl -L -o kurtosis_artifacts/enclave-dump-kurtosis-run1-${{ github.run_id }}.zip https://github.com/${{ github.repository }}/actions/artifacts/${{ github.run_id }}/enclave-dump-kurtosis-run1-${{ github.run_id }}.zip

          # Extract the zip content
          unzip kurtosis_artifacts/enclave-dump-kurtosis-run1-${{ github.run_id }}.zip -d kurtosis_artifacts

          # Find the folder starting with 'assertoor--'
          assertoor_folder=$(find kurtosis_artifacts -type d -name 'assertoor--*' | head -n 1)

          # Parse the output.log file within the assertoor-- folder
          output_log="${assertoor_folder}/output.log"
          echo "Parsing file: $output_log"
          
          # Create an empty JSON file if there are no results
          output_json="${{ github.workspace }}/outputs_kurtosis.json"
          echo "{}" > $output_json
          
          # Initialize an empty JSON object
          result_json={}

          # Parse the output.log file to find lines with msg="outputs_json"
          while IFS= read -r line; do
            if [[ "$line" == *'msg="outputs_json:'* ]]; then
              # Extract the JSON object
              json_obj=$(echo "$line" | sed 's/.*msg="outputs_json: \(.*\)"/\1/')
              
              # Extract the task value from the JSON
              task=$(echo "$json_obj" | jq -r '.task')
              
              # Add the JSON object to the task's key
              if [ -z "${result_json[$task]}" ]; then
                result_json[$task]="[]"
              fi
              result_json[$task]+=",$json_obj"
            fi
          done < "$output_log"

          # Write the JSON object to the final file
          echo "{ $(for key in "${!result_json[@]}"; do echo "\"$key\": [${result_json[$key]}]"; done) }" > $output_json

      # If the test fails, create an empty JSON object
      - name: Create empty JSON if test fails
        if: ${{ steps.kurtosis_test.outputs.test_result == 'failure' }}
        run: |
          output_json="${{ github.workspace }}/outputs_kurtosis.json"
          echo "{}" > $output_json

      - name: Save test results
        env:
          TEST_RESULT: ${{ steps.kurtosis_test.outputs.test_result }}
        run: |
          python3 $ERIGON_QA_PATH/test_system/qa-tests/uploads/upload_test_results.py \
            --repo erigon \
            --commit $(git rev-parse HEAD) \
            --branch ${{ github.ref_name }} \
            --test_name txpool-performance \
            --runner ${{ runner.name }} \
            --outcome $TEST_RESULT \
            --result_file ${{ github.workspace }}/outputs_kurtosis.json

      # Clean up, always
      - name: Clean test results
        if: always()
        run: |
          rm -rf kurtosis_artifacts
          rm -rf outputs_kurtosis.json

      - name: Clean docker containers and images
        if: always()
        run: |
          docker rm -f $(docker ps -a -q)
          docker rmi -f $(docker images -q)
          docker system prune -a -f
          docker volume rm $(docker volume ls -q)
          docker network rm $(docker network ls -q)
