name: CI
on:
  push:
    branches:
      - zkevm
      - zkevm-2.60
      - stable/**
      - project/**
      - release/**
  pull_request:
    branches:
      - zkevm
      - zkevm-2.60
      - stable/**
      - project/**
      - release/**
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  tests:
    strategy:
      max-parallel: 2
      fail-fast: true
      matrix:
        os: [ ubuntu-22.04, macos-14-xlarge ] # list of os: https://github.com/actions/virtual-environments
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ matrix.os == 'macos-14-xlarge' && 40 || 30 }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.25'
      
      - name: Set Go toolchain
        run: go env -w GOTOOLCHAIN=go1.25.0+auto
      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: sudo apt update && sudo apt install build-essential

      - name: Build
        run: make BUILD_TAGS=nosqlite,noboltdb,nosilkworm cdk-erigon

      - name: Reproducible build test
        run: |
          make cdk-erigon
          shasum -a256 ./build/bin/cdk-erigon > erigon1.sha256
          make cdk-erigon
          shasum -a256 ./build/bin/cdk-erigon > erigon2.sha256
          if ! cmp -s erigon1.sha256 erigon2.sha256; then
            echo >&2 "Reproducible build broken"; cat erigon1.sha256; cat erigon2.sha256; exit 1
          fi

#      - name: Lint
#        if: runner.os == 'Linux'
#        uses: golangci/golangci-lint-action@v4
#        with:
#          version: v1.54

      - name: Test
        run: make test
      
      - name: SonarCloud Scan
      # pinned to v5 commit
        uses: SonarSource/sonarcloud-github-action@ffc3010689be73b8e5ae0c57ce35968afd7909e8
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  kurtosis-cdk-type-1-pectra-pmt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cdk-erigon
        uses: actions/checkout@v4

      - name: Setup kurtosis
        uses: ./.github/actions/setup-kurtosis-type1

      - name: Run polycli load test
        run: /usr/local/bin/polycli loadtest --rpc-url $(kurtosis port print cdk-v1 cdk-erigon-rpc-001 rpc) --private-key "0x12d7de8621a77640c9241b2595ba78ce443d05e94090365ab3bb5e19df82c625" --verbosity 700 --requests 500 --rate-limit 50 --concurrency 2 --mode t

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up envs
        run: |
          kurtosis files download cdk-v1 bridge-config-artifact
          echo "BRIDGE_ADDRESS=$(/usr/local/bin/yq '.NetworkConfig.PolygonBridgeAddress' bridge-config-artifact/bridge-config.toml)" >> $GITHUB_ENV
          echo "BridgeAddress: $BRIDGE_ADDRESS"
          echo "ETH_RPC_URL=$(kurtosis port print cdk-v1 el-1-geth-lighthouse rpc)" >> $GITHUB_ENV
          echo "BRIDGE_API_URL=$(kurtosis port print cdk-v1 zkevm-bridge-service-001 rpc)" >> $GITHUB_ENV
          echo "L2_RPC_URL=$(kurtosis port print cdk-v1 cdk-erigon-rpc-001 rpc)" >> $GITHUB_ENV

      - name: Clone bridge repository
        run:  git clone --recurse-submodules -j8 https://github.com/0xPolygonHermez/zkevm-bridge-service.git -b develop  bridge

      - name: Build docker image
        run: |
          cd bridge
          make build-docker-e2e-real_network

      - name: Run test ERC20 Bridge
        run: |
          #!/bin/bash
          cd bridge
          mkdir tmp
          cat <<EOF > ./tmp/test.toml
          TestL1AddrPrivate="0x12d7de8621a77640c9241b2595ba78ce443d05e94090365ab3bb5e19df82c625"
          TestL2AddrPrivate="0x12d7de8621a77640c9241b2595ba78ce443d05e94090365ab3bb5e19df82c625"
          [ConnectionConfig]
          L1NodeURL="http://${ETH_RPC_URL}"
          L2NodeURL="${L2_RPC_URL}"
          BridgeURL="${BRIDGE_API_URL}"
          L1BridgeAddr="${BRIDGE_ADDRESS}"
          L2BridgeAddr="${BRIDGE_ADDRESS}"
          EOF
          echo "Running test with config:"
          cat ./tmp/test.toml
          docker run --network=host  --volume "./tmp/:/config/" --env BRIDGE_TEST_CONFIG_FILE=/config/test.toml bridge-e2e-realnetwork-erc20

      - name: Prepare logs
        working-directory: ./kurtosis-cdk
        if: failure()
        run: |
          mkdir -p ci_logs
          cd ci_logs
          kurtosis service logs cdk-v1 cdk-erigon-rpc-001 --all > cdk-erigon-rpc-001.log
          kurtosis service logs cdk-v1 cdk-erigon-sequencer-001 --all > cdk-erigon-sequencer-001.log
          kurtosis service logs cdk-v1 zkevm-agglayer-001 --all > zkevm-agglayer-001.log
          kurtosis service logs cdk-v1 zkevm-prover-001 --all > zkevm-prover-001.log
          kurtosis service logs cdk-v1 cdk-node-001 --all > cdk-node-001.log
          kurtosis service logs cdk-v1 zkevm-bridge-service-001 --all > zkevm-bridge-service-001.log

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs_${{ github.run_id }}
          path: ./kurtosis-cdk/ci_logs

