name: QA - Tip tracking

on:
  schedule:
    - cron: '0 0 * * *'  # Run every day at 00:00 AM UTC

jobs:
  long-running-test:
    runs-on: self-hosted
    env:
      ERIGON_REFERENCE_DATA_DIR: /opt/erigon-release/datadir
      ERIGON_TESTBED_DATA_DIR: /opt/erigon-testbed/datadir
      WORKING_TIME_SECONDS: 14400 # 4 hours

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Restore Erigon Testbed Data Directory
      run: |
        rm -rf $ERIGON_TESTBED_DATA_DIR/chaindata
        rsync -a --delete $ERIGON_REFERENCE_DATA_DIR/ $ERIGON_TESTBED_DATA_DIR/

    - name: Clean Erigon Build Directory
      run: |
        make clean

    - name: Build Erigon
      run: |
        make erigon
      working-directory: ${{ github.workspace }}

    - name: Run Erigon, wait sync and check ability to maintain sync
      id: test_step
      run: |
        set +e # Disable exit on error
        
        # 1. Pause the Erigon instance dedicated to db maintenance
        # 2. Launch the testbed Erigon instance
        # 3. Allow time for the Erigon to achieve synchronization
        # 4. Begin timing the duration that Erigon maintains synchronization
        python3 ${{ github.workspace }}/../../../../erigon-qa/test_system/qa-tests/tip-tracking/run_and_check_tip-tracking.py ${{ github.workspace }}/build/bin $ERIGON_TESTBED_DATA_DIR $WORKING_TIME_SECONDS
  
        # Capture monitoring script exit status
        test_exit_status=$?
        
        # Clean up Erigon process if it's still running
        if kill -0 $ERIGON_PID 2> /dev/null; then
          echo "Terminating Erigon"
          kill $ERIGON_PID
          wait $ERIGON_PID
        else
          echo "Erigon has already terminated"
        fi

        # Check test runner script exit status
        if [ test_exit_status -eq 0 ]; then
          echo "Tests completed successfully"
          echo "TEST_RESULT=success" >> "$GITHUB_OUTPUT"
        else
          echo "Error detected during tests"
          echo "TEST_RESULT=failure" >> "$GITHUB_OUTPUT"
        fi
        
    - name: Action for Success
      if: steps.test_step.outputs.TEST_RESULT == 'success'
      run: echo "::notice::Tests completed successfully"

    - name: Action for Not Success
      if: steps.test_step.outputs.TEST_RESULT != 'success'
      run: |
        echo "::error::Error detected during tests"
        exit 1