name: CI
on:
  push:
    branches:
      - devel
      - alpha
      - stable
  pull_request:
    branches:
      - devel
      - alpha
      - stable
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

jobs:
  tests:
    if: ${{ github.event_name == 'push' || !github.event.pull_request.draft }}
    strategy:
      matrix:
        os: [ ubuntu-20.04, macos-11 ] # list of os: https://github.com/actions/virtual-environments
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - run: git submodule update --init --recursive --force
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18.x
      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: sudo apt update && sudo apt install build-essential

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: go-${{ matrix.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: go-${{ matrix.os }}-

      - name: Build
        run: make all

      - name: Reproducible build test
        run: |
          make erigon
          shasum -a256 ./build/bin/erigon > erigon1.sha256
          make erigon
          shasum -a256 ./build/bin/erigon > erigon2.sha256
          if ! cmp -s erigon1.sha256 erigon2.sha256; then
            echo >&2 "Reproducible build broken"; cat erigon1.sha256; cat erigon2.sha256; exit 1
          fi

      - name: Lint
        if: runner.os == 'Linux'
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.49

      - name: Test
        run: make test

  tests-windows:
    if: ${{ github.event_name == 'push' || !github.event.pull_request.draft }}
    strategy:
      matrix:
        os: [ windows-2022 ]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - run: git submodule update --init --recursive --force
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18.x

      - uses: actions/cache@v3
        with:
          path: |
            C:\ProgramData\chocolatey\lib\mingw
            C:\ProgramData\chocolatey\lib\cmake
          key: chocolatey-${{ matrix.os }}
      - name: Install dependencies
        run: |
          choco upgrade mingw -y --no-progress --version 11.2.0.07112021
          choco install cmake -y --no-progress --version 3.23.1

      - uses: actions/cache@v3
        with:
          path: |
            ~\AppData\Local\go-build
            ~\go\pkg\mod
          key: go-${{ matrix.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: go-${{ matrix.os }}-

      - name: Build
        run: .\wmake.ps1 all

      - name: Test
        run: .\wmake.ps1 test

  docker:
    if: ${{ github.event_name == 'push' || !github.event.pull_request.draft }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch git tags for "git describe"

      - name: make docker
        run: DOCKER_TAG=thorax/erigon:ci-$GITHUB_SHA DOCKER_UID=$(id -u) DOCKER_GID=$(id -g) make docker

      # check with root permissions, should be cached from previous build
      - name: sudo make docker
        run: sudo DOCKER_TAG=thorax/erigon:ci-$GITHUB_SHA DOCKER_UID=$(id -u) DOCKER_GID=$(id -g) make docker

  hive:
     needs:
       - tests
       - tests-windows
       - docker
     runs-on: ubuntu-20.04
     if: ${{ github.event_name == 'push' || !github.event.pull_request.draft }}
     steps:
       - uses: actions/checkout@v3
         with:
           fetch-depth: 0 # fetch git tags for "git describe"

       - name: build erigon image
         run: DOCKER_TAG=thorax/erigon:ci-$GITHUB_SHA DOCKER_UID=$(id -u) DOCKER_GID=$(id -g) make docker

       # check with root permissions, should be cached from previous build
       - name: build erigon image (root permissions)
         run: sudo DOCKER_TAG=thorax/erigon:ci-$GITHUB_SHA DOCKER_UID=$(id -u) DOCKER_GID=$(id -g) make docker

       - name: run hive and parse output
         run: |
          sudo mkdir /results && docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ${{ github.workspace }}:/work thorax/hive:latest --sim ethereum/engine --results-root=/work/results --client erigon_ci-$GITHUB_SHA --exit.fail=false
          docker run --rm --pull always -v /var/run/docker.sock:/var/run/docker.sock -v ${{ github.workspace }}:/work --entrypoint /app/hivecioutput thorax/hive:latest --resultsdir=/work/results --outdir=/work/results --exclusionsfile=/work/hive/exclusions.json

       - name: archive hive results
         uses: actions/upload-artifact@v3
         if: always()
         with:
           name: test-results
           path: results/*.xml
