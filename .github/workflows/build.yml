name: Build and Push Docker

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  # Docker Hub credentials
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  # Docker Hub image name
  IMAGE_NAME: hermeznetwork/cdk-erigon

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prep.outputs.version }}
      latest_tag: ${{ env.LATEST_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare version and flags
        id: prep
        run: |
          # Compute a branch-safe name and short SHA
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/[^a-zA-Z0-9._-]/-/g')
          SHORT_SHA=$(echo ${{ github.sha }} | head -c 7)
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_ENV

          # Choose tag based on event type
          TAG=$BRANCH_NAME-$SHORT_SHA
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # NOTE: This uses the short SHA when pushing tags
            TAG=$SHORT_SHA
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            TAG=${{ github.event.release.tag_name }}
          fi
          echo "version=$TAG" >> $GITHUB_OUTPUT

          # Control whether to also publish :latest
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "LATEST_TAG=false" >> $GITHUB_ENV
          else
            echo "LATEST_TAG=true" >> $GITHUB_ENV
          fi

  build-amd64:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU (recommended for cross-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Normalize GHCR image name (lowercase owner)
        run: |
          GHCR_OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "GHCR_IMAGE_NAME=ghcr.io/${GHCR_OWNER_LC}/cdk-erigon" >> $GITHUB_ENV

      - name: Build and push AMD64 image (Docker Hub + GHCR)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64
          # Publish the same build to both registries
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.version }}-amd64
            ${{ env.GHCR_IMAGE_NAME }}:${{ needs.prepare.outputs.version }}-amd64
          # Optional: BuildKit cache to speed up repeated builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

  build-arm64:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU (recommended for cross-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Normalize GHCR image name (lowercase owner)
        run: |
          GHCR_OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "GHCR_IMAGE_NAME=ghcr.io/${GHCR_OWNER_LC}/cdk-erigon" >> $GITHUB_ENV
