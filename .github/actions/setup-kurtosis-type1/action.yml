
name: "Setup Kurtosis type-1"
description: "Setup Kurtosis CDK for type-1 tests"

inputs:
  enable-pectra:
    description: "Enable Pectra for this workflow"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Checkout cdk-erigon
      if: env.SKIP_ENCLAVE_SETUP != 'true'
      uses: actions/checkout@v4
      with:
        path: cdk-erigon

    - name: Checkout kurtosis-cdk
      if: env.SKIP_ENCLAVE_SETUP != 'true'
      uses: actions/checkout@v4
      with:
        repository: 0xPolygon/kurtosis-cdk
        ref: v0.4.7
        path: kurtosis-cdk

    - name: Install Kurtosis CDK tools
      if: env.SKIP_ENCLAVE_SETUP != 'true'
      uses: ./kurtosis-cdk/.github/actions/kurtosis-pre-run

    - name: Install Foundry
      if: env.SKIP_ENCLAVE_SETUP != 'true'
      uses: foundry-rs/foundry-toolchain@v1

    - name: Install polycli
      shell: bash
      run: |
        tmp_dir=$(mktemp -d) && curl -L https://github.com/0xPolygon/polygon-cli/releases/download/v0.1.48/polycli_v0.1.48_linux_amd64.tar.gz | tar -xz -C "$tmp_dir" && mv "$tmp_dir"/* /usr/local/bin/polycli && rm -rf "$tmp_dir"
        sudo chmod +x /usr/local/bin/polycli
        /usr/local/bin/polycli version

    - name: Install yq
      shell: bash
      run: |
        sudo curl -L https://github.com/mikefarah/yq/releases/download/v4.44.2/yq_linux_amd64 -o /usr/local/bin/yq
        sudo chmod +x /usr/local/bin/yq
        /usr/local/bin/yq --version

    # Cleanup before running Kurtosis to have more space. Those dirs are claimed to be universal and safe to remove
    - name: Cleanup Disk Space
      shell: bash
      run: |
        echo "Disk usage before cleanup:"
        df -h
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        docker system prune -af
        echo "Disk usage after cleanup:"
        df -h

    - name: Build docker image
      working-directory: ${{ github.workspace }}
      shell: bash
      run: docker build -t cdk-erigon-type1:local --file Dockerfile .

    - name: Edit config.yml
      if: env.SKIP_ENCLAVE_SETUP != 'true'
      working-directory: ./kurtosis-cdk
      shell: bash
      run: |
        sed -i '/zkevm.sequencer-batch-seal-time:/d' templates/cdk-erigon/config.yml
        sed -i '/zkevm.sequencer-non-empty-batch-seal-time:/d' templates/cdk-erigon/config.yml
        sed -i '/zkevm\.sequencer-initial-fork-id/d' ./templates/cdk-erigon/config.yml
        sed -i '/sentry.drop-useless-peers:/d' templates/cdk-erigon/config.yml
        sed -i '/zkevm\.pool-manager-url/d' ./templates/cdk-erigon/config.yml
        sed -i '/zkevm.datastream-version:/d' ./templates/cdk-erigon/config.yml
        sed -i 's/zkevm\.disable-virtual-counters: false/zkevm.disable-virtual-counters: true/' ./templates/cdk-erigon/config.yml
        sed -i '$a\zkevm.honour-chainspec: true' ./templates/cdk-erigon/config.yml
        sed -i 's/"pmtEnabledBlock": [0-9]\+/"pmtEnabledBlock": 0/' ./templates/cdk-erigon/chainspec.json
        sed -i 's/"londonBlock": [0-9]\+/"londonBlock": 0/' ./templates/cdk-erigon/chainspec.json
        sed -i 's/"normalcyBlock": [0-9]\+/"normalcyBlock": 0/' ./templates/cdk-erigon/chainspec.json
        sed -i 's/"shanghaiTime": [0-9]\+/"shanghaiTime": 0/' ./templates/cdk-erigon/chainspec.json
        sed -i 's/"cancunTime": [0-9]\+/"cancunTime": 0/' ./templates/cdk-erigon/chainspec.json
        if [ "${{ inputs.enable-pectra }}" = 'true' ]; then
          sed -i 's/"pragueTime": [0-9]\+/"pragueTime": 0/' ./templates/cdk-erigon/chainspec.json
        else
          sed -i 's/"pragueTime": [0-9]\+/"pragueTime": 9999999999999999999999999999999999999999999999999/' ./templates/cdk-erigon/chainspec.json
        fi
        sed -i '/"terminalTotalDifficulty"/d' ./templates/cdk-erigon/chainspec.json
        echo "Zkevm config file:"
        cat ./templates/cdk-erigon/config.yml

    - name: Create params.yml overrides
      if: env.SKIP_ENCLAVE_SETUP != 'true'
      working-directory: ./kurtosis-cdk
      shell: bash
      run: |
        echo 'deployment_stages:' > params.yml
        echo '  deploy_l2_contracts: true' >> params.yml
        echo '  deploy_optimism_rollup: false' >> params.yml
        echo '  deploy_op_succinct: false' >> params.yml
        echo 'args:' >> params.yml
        echo '  cdk_erigon_node_image: cdk-erigon-type1:local' >> params.yml
        echo '  el-1-geth-lighthouse: ethpandaops/lighthouse@sha256:4902d9e4a6b6b8d4c136ea54f0e51582a32f356f3dec7194a1adee13ed2d662e' >> params.yml
        echo '  consensus_contract_type: pessimistic' >> params.yml
        echo '  pp_vkey_hash: 0x00d6e4bdab9cac75a50d58262bb4e60b3107a6b61131ccdff649576c624b6fb7' >> params.yml
        echo '  agglayer_prover_primary_prover: mock-prover' >> params.yml
        echo '  erigon_strict_mode: false' >> params.yml
        echo '  gas_token_enabled: false' >> params.yml
        echo '  zkevm_use_real_verifier: false' >> params.yml
        echo '  enable_normalcy: true' >> params.yml
        echo '  sequencer_type: erigon' >> params.yml
        echo "Kurtosis params file:"
        cat params.yml

    - name: Teardown existing enclave
      if: env.SKIP_ENCLAVE_SETUP == 'true'
      shell: bash
      run: |
        kurtosis enclave stop cdk-v1 || true
        kurtosis enclave rm   cdk-v1 || true

    - name: Deploy Kurtosis CDK package
      working-directory: ./kurtosis-cdk
      shell: bash
      run: |
        kurtosis run --enclave cdk-v1 --args-file params.yml --image-download always .
