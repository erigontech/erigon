// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TxpoolControlClient is the client API for TxpoolControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TxpoolControlClient interface {
	AccountInfo(ctx context.Context, in *AccountInfoRequest, opts ...grpc.CallOption) (*AccountInfoReply, error)
	BlockStream(ctx context.Context, in *BlockStreamRequest, opts ...grpc.CallOption) (TxpoolControl_BlockStreamClient, error)
}

type txpoolControlClient struct {
	cc grpc.ClientConnInterface
}

func NewTxpoolControlClient(cc grpc.ClientConnInterface) TxpoolControlClient {
	return &txpoolControlClient{cc}
}

func (c *txpoolControlClient) AccountInfo(ctx context.Context, in *AccountInfoRequest, opts ...grpc.CallOption) (*AccountInfoReply, error) {
	out := new(AccountInfoReply)
	err := c.cc.Invoke(ctx, "/txpool_control.TxpoolControl/AccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txpoolControlClient) BlockStream(ctx context.Context, in *BlockStreamRequest, opts ...grpc.CallOption) (TxpoolControl_BlockStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TxpoolControl_serviceDesc.Streams[0], "/txpool_control.TxpoolControl/BlockStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &txpoolControlBlockStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TxpoolControl_BlockStreamClient interface {
	Recv() (*BlockDiff, error)
	grpc.ClientStream
}

type txpoolControlBlockStreamClient struct {
	grpc.ClientStream
}

func (x *txpoolControlBlockStreamClient) Recv() (*BlockDiff, error) {
	m := new(BlockDiff)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TxpoolControlServer is the server API for TxpoolControl service.
// All implementations must embed UnimplementedTxpoolControlServer
// for forward compatibility
type TxpoolControlServer interface {
	AccountInfo(context.Context, *AccountInfoRequest) (*AccountInfoReply, error)
	BlockStream(*BlockStreamRequest, TxpoolControl_BlockStreamServer) error
	mustEmbedUnimplementedTxpoolControlServer()
}

// UnimplementedTxpoolControlServer must be embedded to have forward compatible implementations.
type UnimplementedTxpoolControlServer struct {
}

func (UnimplementedTxpoolControlServer) AccountInfo(context.Context, *AccountInfoRequest) (*AccountInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInfo not implemented")
}
func (UnimplementedTxpoolControlServer) BlockStream(*BlockStreamRequest, TxpoolControl_BlockStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BlockStream not implemented")
}
func (UnimplementedTxpoolControlServer) mustEmbedUnimplementedTxpoolControlServer() {}

// UnsafeTxpoolControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TxpoolControlServer will
// result in compilation errors.
type UnsafeTxpoolControlServer interface {
	mustEmbedUnimplementedTxpoolControlServer()
}

func RegisterTxpoolControlServer(s grpc.ServiceRegistrar, srv TxpoolControlServer) {
	s.RegisterService(&_TxpoolControl_serviceDesc, srv)
}

func _TxpoolControl_AccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxpoolControlServer).AccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpool_control.TxpoolControl/AccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxpoolControlServer).AccountInfo(ctx, req.(*AccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxpoolControl_BlockStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TxpoolControlServer).BlockStream(m, &txpoolControlBlockStreamServer{stream})
}

type TxpoolControl_BlockStreamServer interface {
	Send(*BlockDiff) error
	grpc.ServerStream
}

type txpoolControlBlockStreamServer struct {
	grpc.ServerStream
}

func (x *txpoolControlBlockStreamServer) Send(m *BlockDiff) error {
	return x.ServerStream.SendMsg(m)
}

var _TxpoolControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "txpool_control.TxpoolControl",
	HandlerType: (*TxpoolControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountInfo",
			Handler:    _TxpoolControl_AccountInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BlockStream",
			Handler:       _TxpoolControl_BlockStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "txpool_control.proto",
}
