// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.2
// source: p2psentry/sentry.proto

package sentry

import (
	types "github.com/ledgerwatch/erigon-lib/gointerfaces/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageId int32

const (
	MessageId_STATUS_65                        MessageId = 0
	MessageId_GET_BLOCK_HEADERS_65             MessageId = 1
	MessageId_BLOCK_HEADERS_65                 MessageId = 2
	MessageId_BLOCK_HASHES_65                  MessageId = 3
	MessageId_GET_BLOCK_BODIES_65              MessageId = 4
	MessageId_BLOCK_BODIES_65                  MessageId = 5
	MessageId_GET_NODE_DATA_65                 MessageId = 6
	MessageId_NODE_DATA_65                     MessageId = 7
	MessageId_GET_RECEIPTS_65                  MessageId = 8
	MessageId_RECEIPTS_65                      MessageId = 9
	MessageId_NEW_BLOCK_HASHES_65              MessageId = 10
	MessageId_NEW_BLOCK_65                     MessageId = 11
	MessageId_TRANSACTIONS_65                  MessageId = 12
	MessageId_NEW_POOLED_TRANSACTION_HASHES_65 MessageId = 13
	MessageId_GET_POOLED_TRANSACTIONS_65       MessageId = 14
	MessageId_POOLED_TRANSACTIONS_65           MessageId = 15
	// eth64 announcement messages (no id)
	MessageId_STATUS_66           MessageId = 17
	MessageId_NEW_BLOCK_HASHES_66 MessageId = 18
	MessageId_NEW_BLOCK_66        MessageId = 19
	MessageId_TRANSACTIONS_66     MessageId = 20
	// eth65 announcement messages (no id)
	MessageId_NEW_POOLED_TRANSACTION_HASHES_66 MessageId = 21
	// eth66 messages with request-id
	MessageId_GET_BLOCK_HEADERS_66       MessageId = 22
	MessageId_GET_BLOCK_BODIES_66        MessageId = 23
	MessageId_GET_NODE_DATA_66           MessageId = 24
	MessageId_GET_RECEIPTS_66            MessageId = 25
	MessageId_GET_POOLED_TRANSACTIONS_66 MessageId = 26
	MessageId_BLOCK_HEADERS_66           MessageId = 27
	MessageId_BLOCK_BODIES_66            MessageId = 28
	MessageId_NODE_DATA_66               MessageId = 29
	MessageId_RECEIPTS_66                MessageId = 30
	MessageId_POOLED_TRANSACTIONS_66     MessageId = 31
	// ======= eth 68 protocol ===========
	MessageId_NEW_POOLED_TRANSACTION_HASHES_68 MessageId = 32
)

// Enum value maps for MessageId.
var (
	MessageId_name = map[int32]string{
		0:  "STATUS_65",
		1:  "GET_BLOCK_HEADERS_65",
		2:  "BLOCK_HEADERS_65",
		3:  "BLOCK_HASHES_65",
		4:  "GET_BLOCK_BODIES_65",
		5:  "BLOCK_BODIES_65",
		6:  "GET_NODE_DATA_65",
		7:  "NODE_DATA_65",
		8:  "GET_RECEIPTS_65",
		9:  "RECEIPTS_65",
		10: "NEW_BLOCK_HASHES_65",
		11: "NEW_BLOCK_65",
		12: "TRANSACTIONS_65",
		13: "NEW_POOLED_TRANSACTION_HASHES_65",
		14: "GET_POOLED_TRANSACTIONS_65",
		15: "POOLED_TRANSACTIONS_65",
		17: "STATUS_66",
		18: "NEW_BLOCK_HASHES_66",
		19: "NEW_BLOCK_66",
		20: "TRANSACTIONS_66",
		21: "NEW_POOLED_TRANSACTION_HASHES_66",
		22: "GET_BLOCK_HEADERS_66",
		23: "GET_BLOCK_BODIES_66",
		24: "GET_NODE_DATA_66",
		25: "GET_RECEIPTS_66",
		26: "GET_POOLED_TRANSACTIONS_66",
		27: "BLOCK_HEADERS_66",
		28: "BLOCK_BODIES_66",
		29: "NODE_DATA_66",
		30: "RECEIPTS_66",
		31: "POOLED_TRANSACTIONS_66",
		32: "NEW_POOLED_TRANSACTION_HASHES_68",
	}
	MessageId_value = map[string]int32{
		"STATUS_65":                        0,
		"GET_BLOCK_HEADERS_65":             1,
		"BLOCK_HEADERS_65":                 2,
		"BLOCK_HASHES_65":                  3,
		"GET_BLOCK_BODIES_65":              4,
		"BLOCK_BODIES_65":                  5,
		"GET_NODE_DATA_65":                 6,
		"NODE_DATA_65":                     7,
		"GET_RECEIPTS_65":                  8,
		"RECEIPTS_65":                      9,
		"NEW_BLOCK_HASHES_65":              10,
		"NEW_BLOCK_65":                     11,
		"TRANSACTIONS_65":                  12,
		"NEW_POOLED_TRANSACTION_HASHES_65": 13,
		"GET_POOLED_TRANSACTIONS_65":       14,
		"POOLED_TRANSACTIONS_65":           15,
		"STATUS_66":                        17,
		"NEW_BLOCK_HASHES_66":              18,
		"NEW_BLOCK_66":                     19,
		"TRANSACTIONS_66":                  20,
		"NEW_POOLED_TRANSACTION_HASHES_66": 21,
		"GET_BLOCK_HEADERS_66":             22,
		"GET_BLOCK_BODIES_66":              23,
		"GET_NODE_DATA_66":                 24,
		"GET_RECEIPTS_66":                  25,
		"GET_POOLED_TRANSACTIONS_66":       26,
		"BLOCK_HEADERS_66":                 27,
		"BLOCK_BODIES_66":                  28,
		"NODE_DATA_66":                     29,
		"RECEIPTS_66":                      30,
		"POOLED_TRANSACTIONS_66":           31,
		"NEW_POOLED_TRANSACTION_HASHES_68": 32,
	}
)

func (x MessageId) Enum() *MessageId {
	p := new(MessageId)
	*p = x
	return p
}

func (x MessageId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageId) Descriptor() protoreflect.EnumDescriptor {
	return file_p2psentry_sentry_proto_enumTypes[0].Descriptor()
}

func (MessageId) Type() protoreflect.EnumType {
	return &file_p2psentry_sentry_proto_enumTypes[0]
}

func (x MessageId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageId.Descriptor instead.
func (MessageId) EnumDescriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{0}
}

type PenaltyKind int32

const (
	PenaltyKind_Kick PenaltyKind = 0
)

// Enum value maps for PenaltyKind.
var (
	PenaltyKind_name = map[int32]string{
		0: "Kick",
	}
	PenaltyKind_value = map[string]int32{
		"Kick": 0,
	}
)

func (x PenaltyKind) Enum() *PenaltyKind {
	p := new(PenaltyKind)
	*p = x
	return p
}

func (x PenaltyKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PenaltyKind) Descriptor() protoreflect.EnumDescriptor {
	return file_p2psentry_sentry_proto_enumTypes[1].Descriptor()
}

func (PenaltyKind) Type() protoreflect.EnumType {
	return &file_p2psentry_sentry_proto_enumTypes[1]
}

func (x PenaltyKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PenaltyKind.Descriptor instead.
func (PenaltyKind) EnumDescriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{1}
}

type Protocol int32

const (
	Protocol_ETH65 Protocol = 0
	Protocol_ETH66 Protocol = 1
	Protocol_ETH67 Protocol = 2
	Protocol_ETH68 Protocol = 3
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "ETH65",
		1: "ETH66",
		2: "ETH67",
		3: "ETH68",
	}
	Protocol_value = map[string]int32{
		"ETH65": 0,
		"ETH66": 1,
		"ETH67": 2,
		"ETH68": 3,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_p2psentry_sentry_proto_enumTypes[2].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_p2psentry_sentry_proto_enumTypes[2]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{2}
}

type PeerEvent_PeerEventId int32

const (
	// Happens after after a successful sub-protocol handshake.
	PeerEvent_Connect    PeerEvent_PeerEventId = 0
	PeerEvent_Disconnect PeerEvent_PeerEventId = 1
)

// Enum value maps for PeerEvent_PeerEventId.
var (
	PeerEvent_PeerEventId_name = map[int32]string{
		0: "Connect",
		1: "Disconnect",
	}
	PeerEvent_PeerEventId_value = map[string]int32{
		"Connect":    0,
		"Disconnect": 1,
	}
)

func (x PeerEvent_PeerEventId) Enum() *PeerEvent_PeerEventId {
	p := new(PeerEvent_PeerEventId)
	*p = x
	return p
}

func (x PeerEvent_PeerEventId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerEvent_PeerEventId) Descriptor() protoreflect.EnumDescriptor {
	return file_p2psentry_sentry_proto_enumTypes[3].Descriptor()
}

func (PeerEvent_PeerEventId) Type() protoreflect.EnumType {
	return &file_p2psentry_sentry_proto_enumTypes[3]
}

func (x PeerEvent_PeerEventId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerEvent_PeerEventId.Descriptor instead.
func (PeerEvent_PeerEventId) EnumDescriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{21, 0}
}

type OutboundMessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   MessageId `protobuf:"varint,1,opt,name=id,proto3,enum=sentry.MessageId" json:"id,omitempty"`
	Data []byte    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OutboundMessageData) Reset() {
	*x = OutboundMessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundMessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundMessageData) ProtoMessage() {}

func (x *OutboundMessageData) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundMessageData.ProtoReflect.Descriptor instead.
func (*OutboundMessageData) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{0}
}

func (x *OutboundMessageData) GetId() MessageId {
	if x != nil {
		return x.Id
	}
	return MessageId_STATUS_65
}

func (x *OutboundMessageData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SendMessageByMinBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *OutboundMessageData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MinBlock uint64               `protobuf:"varint,2,opt,name=min_block,json=minBlock,proto3" json:"min_block,omitempty"`
	MaxPeers uint64               `protobuf:"varint,3,opt,name=max_peers,json=maxPeers,proto3" json:"max_peers,omitempty"`
}

func (x *SendMessageByMinBlockRequest) Reset() {
	*x = SendMessageByMinBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageByMinBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageByMinBlockRequest) ProtoMessage() {}

func (x *SendMessageByMinBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageByMinBlockRequest.ProtoReflect.Descriptor instead.
func (*SendMessageByMinBlockRequest) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{1}
}

func (x *SendMessageByMinBlockRequest) GetData() *OutboundMessageData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendMessageByMinBlockRequest) GetMinBlock() uint64 {
	if x != nil {
		return x.MinBlock
	}
	return 0
}

func (x *SendMessageByMinBlockRequest) GetMaxPeers() uint64 {
	if x != nil {
		return x.MaxPeers
	}
	return 0
}

type SendMessageByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   *OutboundMessageData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	PeerId *types.H512          `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *SendMessageByIdRequest) Reset() {
	*x = SendMessageByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageByIdRequest) ProtoMessage() {}

func (x *SendMessageByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageByIdRequest.ProtoReflect.Descriptor instead.
func (*SendMessageByIdRequest) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{2}
}

func (x *SendMessageByIdRequest) GetData() *OutboundMessageData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendMessageByIdRequest) GetPeerId() *types.H512 {
	if x != nil {
		return x.PeerId
	}
	return nil
}

type SendMessageToRandomPeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *OutboundMessageData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MaxPeers uint64               `protobuf:"varint,2,opt,name=max_peers,json=maxPeers,proto3" json:"max_peers,omitempty"`
}

func (x *SendMessageToRandomPeersRequest) Reset() {
	*x = SendMessageToRandomPeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageToRandomPeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageToRandomPeersRequest) ProtoMessage() {}

func (x *SendMessageToRandomPeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageToRandomPeersRequest.ProtoReflect.Descriptor instead.
func (*SendMessageToRandomPeersRequest) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{3}
}

func (x *SendMessageToRandomPeersRequest) GetData() *OutboundMessageData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendMessageToRandomPeersRequest) GetMaxPeers() uint64 {
	if x != nil {
		return x.MaxPeers
	}
	return 0
}

type SentPeers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*types.H512 `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *SentPeers) Reset() {
	*x = SentPeers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentPeers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentPeers) ProtoMessage() {}

func (x *SentPeers) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentPeers.ProtoReflect.Descriptor instead.
func (*SentPeers) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{4}
}

func (x *SentPeers) GetPeers() []*types.H512 {
	if x != nil {
		return x.Peers
	}
	return nil
}

type PenalizePeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId  *types.H512 `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Penalty PenaltyKind `protobuf:"varint,2,opt,name=penalty,proto3,enum=sentry.PenaltyKind" json:"penalty,omitempty"`
}

func (x *PenalizePeerRequest) Reset() {
	*x = PenalizePeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PenalizePeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PenalizePeerRequest) ProtoMessage() {}

func (x *PenalizePeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PenalizePeerRequest.ProtoReflect.Descriptor instead.
func (*PenalizePeerRequest) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{5}
}

func (x *PenalizePeerRequest) GetPeerId() *types.H512 {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *PenalizePeerRequest) GetPenalty() PenaltyKind {
	if x != nil {
		return x.Penalty
	}
	return PenaltyKind_Kick
}

type PeerMinBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId   *types.H512 `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	MinBlock uint64      `protobuf:"varint,2,opt,name=min_block,json=minBlock,proto3" json:"min_block,omitempty"`
}

func (x *PeerMinBlockRequest) Reset() {
	*x = PeerMinBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerMinBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerMinBlockRequest) ProtoMessage() {}

func (x *PeerMinBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerMinBlockRequest.ProtoReflect.Descriptor instead.
func (*PeerMinBlockRequest) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{6}
}

func (x *PeerMinBlockRequest) GetPeerId() *types.H512 {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *PeerMinBlockRequest) GetMinBlock() uint64 {
	if x != nil {
		return x.MinBlock
	}
	return 0
}

type AddPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *AddPeerRequest) Reset() {
	*x = AddPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeerRequest) ProtoMessage() {}

func (x *AddPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeerRequest.ProtoReflect.Descriptor instead.
func (*AddPeerRequest) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{7}
}

func (x *AddPeerRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type InboundMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     MessageId   `protobuf:"varint,1,opt,name=id,proto3,enum=sentry.MessageId" json:"id,omitempty"`
	Data   []byte      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	PeerId *types.H512 `protobuf:"bytes,3,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *InboundMessage) Reset() {
	*x = InboundMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundMessage) ProtoMessage() {}

func (x *InboundMessage) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundMessage.ProtoReflect.Descriptor instead.
func (*InboundMessage) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{8}
}

func (x *InboundMessage) GetId() MessageId {
	if x != nil {
		return x.Id
	}
	return MessageId_STATUS_65
}

func (x *InboundMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InboundMessage) GetPeerId() *types.H512 {
	if x != nil {
		return x.PeerId
	}
	return nil
}

type Forks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genesis     *types.H256 `protobuf:"bytes,1,opt,name=genesis,proto3" json:"genesis,omitempty"`
	HeightForks []uint64    `protobuf:"varint,2,rep,packed,name=height_forks,json=heightForks,proto3" json:"height_forks,omitempty"`
	TimeForks   []uint64    `protobuf:"varint,3,rep,packed,name=time_forks,json=timeForks,proto3" json:"time_forks,omitempty"`
}

func (x *Forks) Reset() {
	*x = Forks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forks) ProtoMessage() {}

func (x *Forks) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forks.ProtoReflect.Descriptor instead.
func (*Forks) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{9}
}

func (x *Forks) GetGenesis() *types.H256 {
	if x != nil {
		return x.Genesis
	}
	return nil
}

func (x *Forks) GetHeightForks() []uint64 {
	if x != nil {
		return x.HeightForks
	}
	return nil
}

func (x *Forks) GetTimeForks() []uint64 {
	if x != nil {
		return x.TimeForks
	}
	return nil
}

type StatusData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId       uint64      `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	TotalDifficulty *types.H256 `protobuf:"bytes,2,opt,name=total_difficulty,json=totalDifficulty,proto3" json:"total_difficulty,omitempty"`
	BestHash        *types.H256 `protobuf:"bytes,3,opt,name=best_hash,json=bestHash,proto3" json:"best_hash,omitempty"`
	ForkData        *Forks      `protobuf:"bytes,4,opt,name=fork_data,json=forkData,proto3" json:"fork_data,omitempty"`
	MaxBlockHeight  uint64      `protobuf:"varint,5,opt,name=max_block_height,json=maxBlockHeight,proto3" json:"max_block_height,omitempty"`
	MaxBlockTime    uint64      `protobuf:"varint,6,opt,name=max_block_time,json=maxBlockTime,proto3" json:"max_block_time,omitempty"`
}

func (x *StatusData) Reset() {
	*x = StatusData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusData) ProtoMessage() {}

func (x *StatusData) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusData.ProtoReflect.Descriptor instead.
func (*StatusData) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{10}
}

func (x *StatusData) GetNetworkId() uint64 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *StatusData) GetTotalDifficulty() *types.H256 {
	if x != nil {
		return x.TotalDifficulty
	}
	return nil
}

func (x *StatusData) GetBestHash() *types.H256 {
	if x != nil {
		return x.BestHash
	}
	return nil
}

func (x *StatusData) GetForkData() *Forks {
	if x != nil {
		return x.ForkData
	}
	return nil
}

func (x *StatusData) GetMaxBlockHeight() uint64 {
	if x != nil {
		return x.MaxBlockHeight
	}
	return 0
}

func (x *StatusData) GetMaxBlockTime() uint64 {
	if x != nil {
		return x.MaxBlockTime
	}
	return 0
}

type SetStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetStatusReply) Reset() {
	*x = SetStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStatusReply) ProtoMessage() {}

func (x *SetStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStatusReply.ProtoReflect.Descriptor instead.
func (*SetStatusReply) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{11}
}

type HandShakeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=sentry.Protocol" json:"protocol,omitempty"`
}

func (x *HandShakeReply) Reset() {
	*x = HandShakeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandShakeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandShakeReply) ProtoMessage() {}

func (x *HandShakeReply) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandShakeReply.ProtoReflect.Descriptor instead.
func (*HandShakeReply) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{12}
}

func (x *HandShakeReply) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_ETH65
}

type MessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []MessageId `protobuf:"varint,1,rep,packed,name=ids,proto3,enum=sentry.MessageId" json:"ids,omitempty"`
}

func (x *MessagesRequest) Reset() {
	*x = MessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesRequest) ProtoMessage() {}

func (x *MessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesRequest.ProtoReflect.Descriptor instead.
func (*MessagesRequest) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{13}
}

func (x *MessagesRequest) GetIds() []MessageId {
	if x != nil {
		return x.Ids
	}
	return nil
}

type PeersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*types.PeerInfo `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *PeersReply) Reset() {
	*x = PeersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersReply) ProtoMessage() {}

func (x *PeersReply) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersReply.ProtoReflect.Descriptor instead.
func (*PeersReply) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{14}
}

func (x *PeersReply) GetPeers() []*types.PeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

type PeerCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PeerCountRequest) Reset() {
	*x = PeerCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerCountRequest) ProtoMessage() {}

func (x *PeerCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerCountRequest.ProtoReflect.Descriptor instead.
func (*PeerCountRequest) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{15}
}

type PeerCountPerProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=sentry.Protocol" json:"protocol,omitempty"`
	Count    uint64   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PeerCountPerProtocol) Reset() {
	*x = PeerCountPerProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerCountPerProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerCountPerProtocol) ProtoMessage() {}

func (x *PeerCountPerProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerCountPerProtocol.ProtoReflect.Descriptor instead.
func (*PeerCountPerProtocol) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{16}
}

func (x *PeerCountPerProtocol) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_ETH65
}

func (x *PeerCountPerProtocol) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PeerCountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count             uint64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	CountsPerProtocol []*PeerCountPerProtocol `protobuf:"bytes,2,rep,name=counts_per_protocol,json=countsPerProtocol,proto3" json:"counts_per_protocol,omitempty"`
}

func (x *PeerCountReply) Reset() {
	*x = PeerCountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerCountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerCountReply) ProtoMessage() {}

func (x *PeerCountReply) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerCountReply.ProtoReflect.Descriptor instead.
func (*PeerCountReply) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{17}
}

func (x *PeerCountReply) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PeerCountReply) GetCountsPerProtocol() []*PeerCountPerProtocol {
	if x != nil {
		return x.CountsPerProtocol
	}
	return nil
}

type PeerByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *types.H512 `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *PeerByIdRequest) Reset() {
	*x = PeerByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerByIdRequest) ProtoMessage() {}

func (x *PeerByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerByIdRequest.ProtoReflect.Descriptor instead.
func (*PeerByIdRequest) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{18}
}

func (x *PeerByIdRequest) GetPeerId() *types.H512 {
	if x != nil {
		return x.PeerId
	}
	return nil
}

type PeerByIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer *types.PeerInfo `protobuf:"bytes,1,opt,name=peer,proto3,oneof" json:"peer,omitempty"`
}

func (x *PeerByIdReply) Reset() {
	*x = PeerByIdReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerByIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerByIdReply) ProtoMessage() {}

func (x *PeerByIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerByIdReply.ProtoReflect.Descriptor instead.
func (*PeerByIdReply) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{19}
}

func (x *PeerByIdReply) GetPeer() *types.PeerInfo {
	if x != nil {
		return x.Peer
	}
	return nil
}

type PeerEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PeerEventsRequest) Reset() {
	*x = PeerEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerEventsRequest) ProtoMessage() {}

func (x *PeerEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerEventsRequest.ProtoReflect.Descriptor instead.
func (*PeerEventsRequest) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{20}
}

type PeerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId  *types.H512           `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	EventId PeerEvent_PeerEventId `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3,enum=sentry.PeerEvent_PeerEventId" json:"event_id,omitempty"`
}

func (x *PeerEvent) Reset() {
	*x = PeerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerEvent) ProtoMessage() {}

func (x *PeerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerEvent.ProtoReflect.Descriptor instead.
func (*PeerEvent) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{21}
}

func (x *PeerEvent) GetPeerId() *types.H512 {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *PeerEvent) GetEventId() PeerEvent_PeerEventId {
	if x != nil {
		return x.EventId
	}
	return PeerEvent_Connect
}

type AddPeerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AddPeerReply) Reset() {
	*x = AddPeerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2psentry_sentry_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPeerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeerReply) ProtoMessage() {}

func (x *AddPeerReply) ProtoReflect() protoreflect.Message {
	mi := &file_p2psentry_sentry_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeerReply.ProtoReflect.Descriptor instead.
func (*AddPeerReply) Descriptor() ([]byte, []int) {
	return file_p2psentry_sentry_proto_rawDescGZIP(), []int{22}
}

func (x *AddPeerReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_p2psentry_sentry_proto protoreflect.FileDescriptor

var file_p2psentry_sentry_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x32, 0x70, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x4c, 0x0a, 0x13, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89,
	0x01, 0x0a, 0x1c, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x4d, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x65, 0x72, 0x73, 0x22, 0x6f, 0x0a, 0x16, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48,
	0x35, 0x31, 0x32, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x1f, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x65, 0x72, 0x73, 0x22, 0x2e, 0x0a, 0x09,
	0x53, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x48, 0x35, 0x31, 0x32, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x6a, 0x0a, 0x13,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x35, 0x31,
	0x32, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x22, 0x58, 0x0a, 0x13, 0x50, 0x65, 0x65, 0x72,
	0x4d, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x35, 0x31, 0x32, 0x52, 0x06, 0x70,
	0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x22, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x6d, 0x0a, 0x0e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x35, 0x31, 0x32, 0x52, 0x06, 0x70,
	0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x05, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x25,
	0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x32, 0x35, 0x36, 0x52, 0x07, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x32, 0x35, 0x36, 0x52, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x28, 0x0a,
	0x09, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x32, 0x35, 0x36, 0x52, 0x08, 0x62,
	0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6b, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3e, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x36, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x33, 0x0a,
	0x0a, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x14, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2c,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x74, 0x0a, 0x0e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x37, 0x0a, 0x0f, 0x50, 0x65, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x35, 0x31, 0x32, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x42, 0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x65, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x50,
	0x65, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x48, 0x35, 0x31, 0x32, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x10, 0x01, 0x22, 0x28, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0x80,
	0x06, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x36, 0x35, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x47,
	0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53,
	0x5f, 0x36, 0x35, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48,
	0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x36, 0x35, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x45, 0x53, 0x5f, 0x36, 0x35, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x4f,
	0x44, 0x49, 0x45, 0x53, 0x5f, 0x36, 0x35, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x42, 0x4f, 0x44, 0x49, 0x45, 0x53, 0x5f, 0x36, 0x35, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x36, 0x35, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x36, 0x35, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x50, 0x54, 0x53, 0x5f, 0x36, 0x35, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x53, 0x5f, 0x36, 0x35, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13,
	0x4e, 0x45, 0x57, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x45, 0x53,
	0x5f, 0x36, 0x35, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x57, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x36, 0x35, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x36, 0x35, 0x10, 0x0c, 0x12, 0x24, 0x0a, 0x20,
	0x4e, 0x45, 0x57, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x45, 0x53, 0x5f, 0x36, 0x35,
	0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x45, 0x44,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x36, 0x35,
	0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x4f, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x36, 0x35, 0x10, 0x0f, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x36, 0x36, 0x10, 0x11, 0x12, 0x17, 0x0a,
	0x13, 0x4e, 0x45, 0x57, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x45,
	0x53, 0x5f, 0x36, 0x36, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x57, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x36, 0x36, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x36, 0x36, 0x10, 0x14, 0x12, 0x24, 0x0a,
	0x20, 0x4e, 0x45, 0x57, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x45, 0x53, 0x5f, 0x36,
	0x36, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x36, 0x36, 0x10, 0x16, 0x12, 0x17, 0x0a,
	0x13, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x4f, 0x44, 0x49, 0x45,
	0x53, 0x5f, 0x36, 0x36, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x36, 0x36, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x53, 0x5f, 0x36, 0x36, 0x10,
	0x19, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x45, 0x44, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x36, 0x36, 0x10,
	0x1a, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x53, 0x5f, 0x36, 0x36, 0x10, 0x1b, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x42, 0x4f, 0x44, 0x49, 0x45, 0x53, 0x5f, 0x36, 0x36, 0x10, 0x1c, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x36, 0x36, 0x10, 0x1d, 0x12, 0x0f,
	0x0a, 0x0b, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x53, 0x5f, 0x36, 0x36, 0x10, 0x1e, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x4f, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x36, 0x36, 0x10, 0x1f, 0x12, 0x24, 0x0a, 0x20, 0x4e,
	0x45, 0x57, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x45, 0x53, 0x5f, 0x36, 0x38, 0x10,
	0x20, 0x2a, 0x17, 0x0a, 0x0b, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4b, 0x69, 0x63, 0x6b, 0x10, 0x00, 0x2a, 0x36, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x54, 0x48, 0x36, 0x35, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x54, 0x48, 0x36, 0x36, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x54, 0x48, 0x36, 0x37, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x54, 0x48, 0x36, 0x38,
	0x10, 0x03, 0x32, 0xdc, 0x07, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x37, 0x0a,
	0x09, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16,
	0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x50,
	0x65, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x73, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x3b, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x50, 0x0a,
	0x15, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x69,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x69, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12,
	0x44, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a,
	0x10, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x41, 0x6c,
	0x6c, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x11,
	0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x17, 0x2e,
	0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01,
	0x12, 0x33, 0x0a, 0x05, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3c, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19,
	0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x37,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x3b, 0x73, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_p2psentry_sentry_proto_rawDescOnce sync.Once
	file_p2psentry_sentry_proto_rawDescData = file_p2psentry_sentry_proto_rawDesc
)

func file_p2psentry_sentry_proto_rawDescGZIP() []byte {
	file_p2psentry_sentry_proto_rawDescOnce.Do(func() {
		file_p2psentry_sentry_proto_rawDescData = protoimpl.X.CompressGZIP(file_p2psentry_sentry_proto_rawDescData)
	})
	return file_p2psentry_sentry_proto_rawDescData
}

var file_p2psentry_sentry_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_p2psentry_sentry_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_p2psentry_sentry_proto_goTypes = []interface{}{
	(MessageId)(0),                          // 0: sentry.MessageId
	(PenaltyKind)(0),                        // 1: sentry.PenaltyKind
	(Protocol)(0),                           // 2: sentry.Protocol
	(PeerEvent_PeerEventId)(0),              // 3: sentry.PeerEvent.PeerEventId
	(*OutboundMessageData)(nil),             // 4: sentry.OutboundMessageData
	(*SendMessageByMinBlockRequest)(nil),    // 5: sentry.SendMessageByMinBlockRequest
	(*SendMessageByIdRequest)(nil),          // 6: sentry.SendMessageByIdRequest
	(*SendMessageToRandomPeersRequest)(nil), // 7: sentry.SendMessageToRandomPeersRequest
	(*SentPeers)(nil),                       // 8: sentry.SentPeers
	(*PenalizePeerRequest)(nil),             // 9: sentry.PenalizePeerRequest
	(*PeerMinBlockRequest)(nil),             // 10: sentry.PeerMinBlockRequest
	(*AddPeerRequest)(nil),                  // 11: sentry.AddPeerRequest
	(*InboundMessage)(nil),                  // 12: sentry.InboundMessage
	(*Forks)(nil),                           // 13: sentry.Forks
	(*StatusData)(nil),                      // 14: sentry.StatusData
	(*SetStatusReply)(nil),                  // 15: sentry.SetStatusReply
	(*HandShakeReply)(nil),                  // 16: sentry.HandShakeReply
	(*MessagesRequest)(nil),                 // 17: sentry.MessagesRequest
	(*PeersReply)(nil),                      // 18: sentry.PeersReply
	(*PeerCountRequest)(nil),                // 19: sentry.PeerCountRequest
	(*PeerCountPerProtocol)(nil),            // 20: sentry.PeerCountPerProtocol
	(*PeerCountReply)(nil),                  // 21: sentry.PeerCountReply
	(*PeerByIdRequest)(nil),                 // 22: sentry.PeerByIdRequest
	(*PeerByIdReply)(nil),                   // 23: sentry.PeerByIdReply
	(*PeerEventsRequest)(nil),               // 24: sentry.PeerEventsRequest
	(*PeerEvent)(nil),                       // 25: sentry.PeerEvent
	(*AddPeerReply)(nil),                    // 26: sentry.AddPeerReply
	(*types.H512)(nil),                      // 27: types.H512
	(*types.H256)(nil),                      // 28: types.H256
	(*types.PeerInfo)(nil),                  // 29: types.PeerInfo
	(*emptypb.Empty)(nil),                   // 30: google.protobuf.Empty
	(*types.NodeInfoReply)(nil),             // 31: types.NodeInfoReply
}
var file_p2psentry_sentry_proto_depIdxs = []int32{
	0,  // 0: sentry.OutboundMessageData.id:type_name -> sentry.MessageId
	4,  // 1: sentry.SendMessageByMinBlockRequest.data:type_name -> sentry.OutboundMessageData
	4,  // 2: sentry.SendMessageByIdRequest.data:type_name -> sentry.OutboundMessageData
	27, // 3: sentry.SendMessageByIdRequest.peer_id:type_name -> types.H512
	4,  // 4: sentry.SendMessageToRandomPeersRequest.data:type_name -> sentry.OutboundMessageData
	27, // 5: sentry.SentPeers.peers:type_name -> types.H512
	27, // 6: sentry.PenalizePeerRequest.peer_id:type_name -> types.H512
	1,  // 7: sentry.PenalizePeerRequest.penalty:type_name -> sentry.PenaltyKind
	27, // 8: sentry.PeerMinBlockRequest.peer_id:type_name -> types.H512
	0,  // 9: sentry.InboundMessage.id:type_name -> sentry.MessageId
	27, // 10: sentry.InboundMessage.peer_id:type_name -> types.H512
	28, // 11: sentry.Forks.genesis:type_name -> types.H256
	28, // 12: sentry.StatusData.total_difficulty:type_name -> types.H256
	28, // 13: sentry.StatusData.best_hash:type_name -> types.H256
	13, // 14: sentry.StatusData.fork_data:type_name -> sentry.Forks
	2,  // 15: sentry.HandShakeReply.protocol:type_name -> sentry.Protocol
	0,  // 16: sentry.MessagesRequest.ids:type_name -> sentry.MessageId
	29, // 17: sentry.PeersReply.peers:type_name -> types.PeerInfo
	2,  // 18: sentry.PeerCountPerProtocol.protocol:type_name -> sentry.Protocol
	20, // 19: sentry.PeerCountReply.counts_per_protocol:type_name -> sentry.PeerCountPerProtocol
	27, // 20: sentry.PeerByIdRequest.peer_id:type_name -> types.H512
	29, // 21: sentry.PeerByIdReply.peer:type_name -> types.PeerInfo
	27, // 22: sentry.PeerEvent.peer_id:type_name -> types.H512
	3,  // 23: sentry.PeerEvent.event_id:type_name -> sentry.PeerEvent.PeerEventId
	14, // 24: sentry.Sentry.SetStatus:input_type -> sentry.StatusData
	9,  // 25: sentry.Sentry.PenalizePeer:input_type -> sentry.PenalizePeerRequest
	10, // 26: sentry.Sentry.PeerMinBlock:input_type -> sentry.PeerMinBlockRequest
	30, // 27: sentry.Sentry.HandShake:input_type -> google.protobuf.Empty
	5,  // 28: sentry.Sentry.SendMessageByMinBlock:input_type -> sentry.SendMessageByMinBlockRequest
	6,  // 29: sentry.Sentry.SendMessageById:input_type -> sentry.SendMessageByIdRequest
	7,  // 30: sentry.Sentry.SendMessageToRandomPeers:input_type -> sentry.SendMessageToRandomPeersRequest
	4,  // 31: sentry.Sentry.SendMessageToAll:input_type -> sentry.OutboundMessageData
	17, // 32: sentry.Sentry.Messages:input_type -> sentry.MessagesRequest
	30, // 33: sentry.Sentry.Peers:input_type -> google.protobuf.Empty
	19, // 34: sentry.Sentry.PeerCount:input_type -> sentry.PeerCountRequest
	22, // 35: sentry.Sentry.PeerById:input_type -> sentry.PeerByIdRequest
	24, // 36: sentry.Sentry.PeerEvents:input_type -> sentry.PeerEventsRequest
	11, // 37: sentry.Sentry.AddPeer:input_type -> sentry.AddPeerRequest
	30, // 38: sentry.Sentry.NodeInfo:input_type -> google.protobuf.Empty
	15, // 39: sentry.Sentry.SetStatus:output_type -> sentry.SetStatusReply
	30, // 40: sentry.Sentry.PenalizePeer:output_type -> google.protobuf.Empty
	30, // 41: sentry.Sentry.PeerMinBlock:output_type -> google.protobuf.Empty
	16, // 42: sentry.Sentry.HandShake:output_type -> sentry.HandShakeReply
	8,  // 43: sentry.Sentry.SendMessageByMinBlock:output_type -> sentry.SentPeers
	8,  // 44: sentry.Sentry.SendMessageById:output_type -> sentry.SentPeers
	8,  // 45: sentry.Sentry.SendMessageToRandomPeers:output_type -> sentry.SentPeers
	8,  // 46: sentry.Sentry.SendMessageToAll:output_type -> sentry.SentPeers
	12, // 47: sentry.Sentry.Messages:output_type -> sentry.InboundMessage
	18, // 48: sentry.Sentry.Peers:output_type -> sentry.PeersReply
	21, // 49: sentry.Sentry.PeerCount:output_type -> sentry.PeerCountReply
	23, // 50: sentry.Sentry.PeerById:output_type -> sentry.PeerByIdReply
	25, // 51: sentry.Sentry.PeerEvents:output_type -> sentry.PeerEvent
	26, // 52: sentry.Sentry.AddPeer:output_type -> sentry.AddPeerReply
	31, // 53: sentry.Sentry.NodeInfo:output_type -> types.NodeInfoReply
	39, // [39:54] is the sub-list for method output_type
	24, // [24:39] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_p2psentry_sentry_proto_init() }
func file_p2psentry_sentry_proto_init() {
	if File_p2psentry_sentry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_p2psentry_sentry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundMessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageByMinBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageToRandomPeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentPeers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PenalizePeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerMinBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboundMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandShakeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerCountPerProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerCountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerByIdReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2psentry_sentry_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPeerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_p2psentry_sentry_proto_msgTypes[19].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_p2psentry_sentry_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_p2psentry_sentry_proto_goTypes,
		DependencyIndexes: file_p2psentry_sentry_proto_depIdxs,
		EnumInfos:         file_p2psentry_sentry_proto_enumTypes,
		MessageInfos:      file_p2psentry_sentry_proto_msgTypes,
	}.Build()
	File_p2psentry_sentry_proto = out.File
	file_p2psentry_sentry_proto_rawDesc = nil
	file_p2psentry_sentry_proto_goTypes = nil
	file_p2psentry_sentry_proto_depIdxs = nil
}
