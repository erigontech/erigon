// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erigontech/erigon-lib/gointerfaces/downloaderproto (interfaces: DownloaderClient)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./downloader_client_mock.go -package=downloaderproto . DownloaderClient
//

// Package downloaderproto is a generated GoMock package.
package downloaderproto

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockDownloaderClient is a mock of DownloaderClient interface.
type MockDownloaderClient struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderClientMockRecorder
	isgomock struct{}
}

// MockDownloaderClientMockRecorder is the mock recorder for MockDownloaderClient.
type MockDownloaderClientMockRecorder struct {
	mock *MockDownloaderClient
}

// NewMockDownloaderClient creates a new mock instance.
func NewMockDownloaderClient(ctrl *gomock.Controller) *MockDownloaderClient {
	mock := &MockDownloaderClient{ctrl: ctrl}
	mock.recorder = &MockDownloaderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloaderClient) EXPECT() *MockDownloaderClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDownloaderClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockDownloaderClientMockRecorder) Add(ctx, in any, opts ...any) *MockDownloaderClientAddCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDownloaderClient)(nil).Add), varargs...)
	return &MockDownloaderClientAddCall{Call: call}
}

// MockDownloaderClientAddCall wrap *gomock.Call
type MockDownloaderClientAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDownloaderClientAddCall) Return(arg0 *emptypb.Empty, arg1 error) *MockDownloaderClientAddCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDownloaderClientAddCall) Do(f func(context.Context, *AddRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockDownloaderClientAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDownloaderClientAddCall) DoAndReturn(f func(context.Context, *AddRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockDownloaderClientAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Completed mocks base method.
func (m *MockDownloaderClient) Completed(ctx context.Context, in *CompletedRequest, opts ...grpc.CallOption) (*CompletedReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Completed", varargs...)
	ret0, _ := ret[0].(*CompletedReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Completed indicates an expected call of Completed.
func (mr *MockDownloaderClientMockRecorder) Completed(ctx, in any, opts ...any) *MockDownloaderClientCompletedCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Completed", reflect.TypeOf((*MockDownloaderClient)(nil).Completed), varargs...)
	return &MockDownloaderClientCompletedCall{Call: call}
}

// MockDownloaderClientCompletedCall wrap *gomock.Call
type MockDownloaderClientCompletedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDownloaderClientCompletedCall) Return(arg0 *CompletedReply, arg1 error) *MockDownloaderClientCompletedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDownloaderClientCompletedCall) Do(f func(context.Context, *CompletedRequest, ...grpc.CallOption) (*CompletedReply, error)) *MockDownloaderClientCompletedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDownloaderClientCompletedCall) DoAndReturn(f func(context.Context, *CompletedRequest, ...grpc.CallOption) (*CompletedReply, error)) *MockDownloaderClientCompletedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockDownloaderClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDownloaderClientMockRecorder) Delete(ctx, in any, opts ...any) *MockDownloaderClientDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDownloaderClient)(nil).Delete), varargs...)
	return &MockDownloaderClientDeleteCall{Call: call}
}

// MockDownloaderClientDeleteCall wrap *gomock.Call
type MockDownloaderClientDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDownloaderClientDeleteCall) Return(arg0 *emptypb.Empty, arg1 error) *MockDownloaderClientDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDownloaderClientDeleteCall) Do(f func(context.Context, *DeleteRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockDownloaderClientDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDownloaderClientDeleteCall) DoAndReturn(f func(context.Context, *DeleteRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockDownloaderClientDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProhibitNewDownloads mocks base method.
func (m *MockDownloaderClient) ProhibitNewDownloads(ctx context.Context, in *ProhibitNewDownloadsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProhibitNewDownloads", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProhibitNewDownloads indicates an expected call of ProhibitNewDownloads.
func (mr *MockDownloaderClientMockRecorder) ProhibitNewDownloads(ctx, in any, opts ...any) *MockDownloaderClientProhibitNewDownloadsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProhibitNewDownloads", reflect.TypeOf((*MockDownloaderClient)(nil).ProhibitNewDownloads), varargs...)
	return &MockDownloaderClientProhibitNewDownloadsCall{Call: call}
}

// MockDownloaderClientProhibitNewDownloadsCall wrap *gomock.Call
type MockDownloaderClientProhibitNewDownloadsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDownloaderClientProhibitNewDownloadsCall) Return(arg0 *emptypb.Empty, arg1 error) *MockDownloaderClientProhibitNewDownloadsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDownloaderClientProhibitNewDownloadsCall) Do(f func(context.Context, *ProhibitNewDownloadsRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockDownloaderClientProhibitNewDownloadsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDownloaderClientProhibitNewDownloadsCall) DoAndReturn(f func(context.Context, *ProhibitNewDownloadsRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockDownloaderClientProhibitNewDownloadsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetLogPrefix mocks base method.
func (m *MockDownloaderClient) SetLogPrefix(ctx context.Context, in *SetLogPrefixRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetLogPrefix", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLogPrefix indicates an expected call of SetLogPrefix.
func (mr *MockDownloaderClientMockRecorder) SetLogPrefix(ctx, in any, opts ...any) *MockDownloaderClientSetLogPrefixCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogPrefix", reflect.TypeOf((*MockDownloaderClient)(nil).SetLogPrefix), varargs...)
	return &MockDownloaderClientSetLogPrefixCall{Call: call}
}

// MockDownloaderClientSetLogPrefixCall wrap *gomock.Call
type MockDownloaderClientSetLogPrefixCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDownloaderClientSetLogPrefixCall) Return(arg0 *emptypb.Empty, arg1 error) *MockDownloaderClientSetLogPrefixCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDownloaderClientSetLogPrefixCall) Do(f func(context.Context, *SetLogPrefixRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockDownloaderClientSetLogPrefixCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDownloaderClientSetLogPrefixCall) DoAndReturn(f func(context.Context, *SetLogPrefixRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockDownloaderClientSetLogPrefixCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TorrentCompleted mocks base method.
func (m *MockDownloaderClient) TorrentCompleted(ctx context.Context, in *TorrentCompletedRequest, opts ...grpc.CallOption) (Downloader_TorrentCompletedClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TorrentCompleted", varargs...)
	ret0, _ := ret[0].(Downloader_TorrentCompletedClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TorrentCompleted indicates an expected call of TorrentCompleted.
func (mr *MockDownloaderClientMockRecorder) TorrentCompleted(ctx, in any, opts ...any) *MockDownloaderClientTorrentCompletedCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TorrentCompleted", reflect.TypeOf((*MockDownloaderClient)(nil).TorrentCompleted), varargs...)
	return &MockDownloaderClientTorrentCompletedCall{Call: call}
}

// MockDownloaderClientTorrentCompletedCall wrap *gomock.Call
type MockDownloaderClientTorrentCompletedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDownloaderClientTorrentCompletedCall) Return(arg0 Downloader_TorrentCompletedClient, arg1 error) *MockDownloaderClientTorrentCompletedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDownloaderClientTorrentCompletedCall) Do(f func(context.Context, *TorrentCompletedRequest, ...grpc.CallOption) (Downloader_TorrentCompletedClient, error)) *MockDownloaderClientTorrentCompletedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDownloaderClientTorrentCompletedCall) DoAndReturn(f func(context.Context, *TorrentCompletedRequest, ...grpc.CallOption) (Downloader_TorrentCompletedClient, error)) *MockDownloaderClientTorrentCompletedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Verify mocks base method.
func (m *MockDownloaderClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Verify", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockDownloaderClientMockRecorder) Verify(ctx, in any, opts ...any) *MockDownloaderClientVerifyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockDownloaderClient)(nil).Verify), varargs...)
	return &MockDownloaderClientVerifyCall{Call: call}
}

// MockDownloaderClientVerifyCall wrap *gomock.Call
type MockDownloaderClientVerifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDownloaderClientVerifyCall) Return(arg0 *emptypb.Empty, arg1 error) *MockDownloaderClientVerifyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDownloaderClientVerifyCall) Do(f func(context.Context, *VerifyRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockDownloaderClientVerifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDownloaderClientVerifyCall) DoAndReturn(f func(context.Context, *VerifyRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockDownloaderClientVerifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
