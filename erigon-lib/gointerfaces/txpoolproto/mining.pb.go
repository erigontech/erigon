// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: txpool/mining.proto

package txpoolproto

import (
	typesproto "github.com/erigontech/erigon-lib/gointerfaces/typesproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OnPendingBlockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnPendingBlockRequest) Reset() {
	*x = OnPendingBlockRequest{}
	mi := &file_txpool_mining_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnPendingBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnPendingBlockRequest) ProtoMessage() {}

func (x *OnPendingBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnPendingBlockRequest.ProtoReflect.Descriptor instead.
func (*OnPendingBlockRequest) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{0}
}

type OnPendingBlockReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RplBlock      []byte                 `protobuf:"bytes,1,opt,name=rpl_block,json=rplBlock,proto3" json:"rpl_block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnPendingBlockReply) Reset() {
	*x = OnPendingBlockReply{}
	mi := &file_txpool_mining_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnPendingBlockReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnPendingBlockReply) ProtoMessage() {}

func (x *OnPendingBlockReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnPendingBlockReply.ProtoReflect.Descriptor instead.
func (*OnPendingBlockReply) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{1}
}

func (x *OnPendingBlockReply) GetRplBlock() []byte {
	if x != nil {
		return x.RplBlock
	}
	return nil
}

type OnMinedBlockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnMinedBlockRequest) Reset() {
	*x = OnMinedBlockRequest{}
	mi := &file_txpool_mining_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnMinedBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnMinedBlockRequest) ProtoMessage() {}

func (x *OnMinedBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnMinedBlockRequest.ProtoReflect.Descriptor instead.
func (*OnMinedBlockRequest) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{2}
}

type OnMinedBlockReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RplBlock      []byte                 `protobuf:"bytes,1,opt,name=rpl_block,json=rplBlock,proto3" json:"rpl_block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnMinedBlockReply) Reset() {
	*x = OnMinedBlockReply{}
	mi := &file_txpool_mining_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnMinedBlockReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnMinedBlockReply) ProtoMessage() {}

func (x *OnMinedBlockReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnMinedBlockReply.ProtoReflect.Descriptor instead.
func (*OnMinedBlockReply) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{3}
}

func (x *OnMinedBlockReply) GetRplBlock() []byte {
	if x != nil {
		return x.RplBlock
	}
	return nil
}

type OnPendingLogsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnPendingLogsRequest) Reset() {
	*x = OnPendingLogsRequest{}
	mi := &file_txpool_mining_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnPendingLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnPendingLogsRequest) ProtoMessage() {}

func (x *OnPendingLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnPendingLogsRequest.ProtoReflect.Descriptor instead.
func (*OnPendingLogsRequest) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{4}
}

type OnPendingLogsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RplLogs       []byte                 `protobuf:"bytes,1,opt,name=rpl_logs,json=rplLogs,proto3" json:"rpl_logs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnPendingLogsReply) Reset() {
	*x = OnPendingLogsReply{}
	mi := &file_txpool_mining_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnPendingLogsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnPendingLogsReply) ProtoMessage() {}

func (x *OnPendingLogsReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnPendingLogsReply.ProtoReflect.Descriptor instead.
func (*OnPendingLogsReply) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{5}
}

func (x *OnPendingLogsReply) GetRplLogs() []byte {
	if x != nil {
		return x.RplLogs
	}
	return nil
}

type GetWorkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkRequest) Reset() {
	*x = GetWorkRequest{}
	mi := &file_txpool_mining_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkRequest) ProtoMessage() {}

func (x *GetWorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkRequest.ProtoReflect.Descriptor instead.
func (*GetWorkRequest) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{6}
}

type GetWorkReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeaderHash    string                 `protobuf:"bytes,1,opt,name=header_hash,json=headerHash,proto3" json:"header_hash,omitempty"`    // 32 bytes hex encoded current block header pow-hash
	SeedHash      string                 `protobuf:"bytes,2,opt,name=seed_hash,json=seedHash,proto3" json:"seed_hash,omitempty"`          // 32 bytes hex encoded seed hash used for DAG
	Target        string                 `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`                              // 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
	BlockNumber   string                 `protobuf:"bytes,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"` // hex encoded block number
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkReply) Reset() {
	*x = GetWorkReply{}
	mi := &file_txpool_mining_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkReply) ProtoMessage() {}

func (x *GetWorkReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkReply.ProtoReflect.Descriptor instead.
func (*GetWorkReply) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{7}
}

func (x *GetWorkReply) GetHeaderHash() string {
	if x != nil {
		return x.HeaderHash
	}
	return ""
}

func (x *GetWorkReply) GetSeedHash() string {
	if x != nil {
		return x.SeedHash
	}
	return ""
}

func (x *GetWorkReply) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *GetWorkReply) GetBlockNumber() string {
	if x != nil {
		return x.BlockNumber
	}
	return ""
}

type SubmitWorkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockNonce    []byte                 `protobuf:"bytes,1,opt,name=block_nonce,json=blockNonce,proto3" json:"block_nonce,omitempty"`
	PowHash       []byte                 `protobuf:"bytes,2,opt,name=pow_hash,json=powHash,proto3" json:"pow_hash,omitempty"`
	Digest        []byte                 `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitWorkRequest) Reset() {
	*x = SubmitWorkRequest{}
	mi := &file_txpool_mining_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitWorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitWorkRequest) ProtoMessage() {}

func (x *SubmitWorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitWorkRequest.ProtoReflect.Descriptor instead.
func (*SubmitWorkRequest) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{8}
}

func (x *SubmitWorkRequest) GetBlockNonce() []byte {
	if x != nil {
		return x.BlockNonce
	}
	return nil
}

func (x *SubmitWorkRequest) GetPowHash() []byte {
	if x != nil {
		return x.PowHash
	}
	return nil
}

func (x *SubmitWorkRequest) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

type SubmitWorkReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitWorkReply) Reset() {
	*x = SubmitWorkReply{}
	mi := &file_txpool_mining_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitWorkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitWorkReply) ProtoMessage() {}

func (x *SubmitWorkReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitWorkReply.ProtoReflect.Descriptor instead.
func (*SubmitWorkReply) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{9}
}

func (x *SubmitWorkReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type SubmitHashRateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rate          uint64                 `protobuf:"varint,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Id            []byte                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitHashRateRequest) Reset() {
	*x = SubmitHashRateRequest{}
	mi := &file_txpool_mining_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitHashRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitHashRateRequest) ProtoMessage() {}

func (x *SubmitHashRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitHashRateRequest.ProtoReflect.Descriptor instead.
func (*SubmitHashRateRequest) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{10}
}

func (x *SubmitHashRateRequest) GetRate() uint64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *SubmitHashRateRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type SubmitHashRateReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitHashRateReply) Reset() {
	*x = SubmitHashRateReply{}
	mi := &file_txpool_mining_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitHashRateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitHashRateReply) ProtoMessage() {}

func (x *SubmitHashRateReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitHashRateReply.ProtoReflect.Descriptor instead.
func (*SubmitHashRateReply) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{11}
}

func (x *SubmitHashRateReply) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type HashRateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HashRateRequest) Reset() {
	*x = HashRateRequest{}
	mi := &file_txpool_mining_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HashRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashRateRequest) ProtoMessage() {}

func (x *HashRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashRateRequest.ProtoReflect.Descriptor instead.
func (*HashRateRequest) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{12}
}

type HashRateReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HashRate      uint64                 `protobuf:"varint,1,opt,name=hash_rate,json=hashRate,proto3" json:"hash_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HashRateReply) Reset() {
	*x = HashRateReply{}
	mi := &file_txpool_mining_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HashRateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashRateReply) ProtoMessage() {}

func (x *HashRateReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashRateReply.ProtoReflect.Descriptor instead.
func (*HashRateReply) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{13}
}

func (x *HashRateReply) GetHashRate() uint64 {
	if x != nil {
		return x.HashRate
	}
	return 0
}

type MiningRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MiningRequest) Reset() {
	*x = MiningRequest{}
	mi := &file_txpool_mining_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MiningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningRequest) ProtoMessage() {}

func (x *MiningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningRequest.ProtoReflect.Descriptor instead.
func (*MiningRequest) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{14}
}

type MiningReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Running       bool                   `protobuf:"varint,2,opt,name=running,proto3" json:"running,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MiningReply) Reset() {
	*x = MiningReply{}
	mi := &file_txpool_mining_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MiningReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningReply) ProtoMessage() {}

func (x *MiningReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_mining_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningReply.ProtoReflect.Descriptor instead.
func (*MiningReply) Descriptor() ([]byte, []int) {
	return file_txpool_mining_proto_rawDescGZIP(), []int{15}
}

func (x *MiningReply) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MiningReply) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

var File_txpool_mining_proto protoreflect.FileDescriptor

const file_txpool_mining_proto_rawDesc = "" +
	"\n" +
	"\x13txpool/mining.proto\x12\x06txpool\x1a\x1bgoogle/protobuf/empty.proto\x1a\x11types/types.proto\"\x17\n" +
	"\x15OnPendingBlockRequest\"2\n" +
	"\x13OnPendingBlockReply\x12\x1b\n" +
	"\trpl_block\x18\x01 \x01(\fR\brplBlock\"\x15\n" +
	"\x13OnMinedBlockRequest\"0\n" +
	"\x11OnMinedBlockReply\x12\x1b\n" +
	"\trpl_block\x18\x01 \x01(\fR\brplBlock\"\x16\n" +
	"\x14OnPendingLogsRequest\"/\n" +
	"\x12OnPendingLogsReply\x12\x19\n" +
	"\brpl_logs\x18\x01 \x01(\fR\arplLogs\"\x10\n" +
	"\x0eGetWorkRequest\"\x87\x01\n" +
	"\fGetWorkReply\x12\x1f\n" +
	"\vheader_hash\x18\x01 \x01(\tR\n" +
	"headerHash\x12\x1b\n" +
	"\tseed_hash\x18\x02 \x01(\tR\bseedHash\x12\x16\n" +
	"\x06target\x18\x03 \x01(\tR\x06target\x12!\n" +
	"\fblock_number\x18\x04 \x01(\tR\vblockNumber\"g\n" +
	"\x11SubmitWorkRequest\x12\x1f\n" +
	"\vblock_nonce\x18\x01 \x01(\fR\n" +
	"blockNonce\x12\x19\n" +
	"\bpow_hash\x18\x02 \x01(\fR\apowHash\x12\x16\n" +
	"\x06digest\x18\x03 \x01(\fR\x06digest\"!\n" +
	"\x0fSubmitWorkReply\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\";\n" +
	"\x15SubmitHashRateRequest\x12\x12\n" +
	"\x04rate\x18\x01 \x01(\x04R\x04rate\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\fR\x02id\"%\n" +
	"\x13SubmitHashRateReply\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\"\x11\n" +
	"\x0fHashRateRequest\",\n" +
	"\rHashRateReply\x12\x1b\n" +
	"\thash_rate\x18\x01 \x01(\x04R\bhashRate\"\x0f\n" +
	"\rMiningRequest\"A\n" +
	"\vMiningReply\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x18\n" +
	"\arunning\x18\x02 \x01(\bR\arunning2\xe2\x04\n" +
	"\x06Mining\x126\n" +
	"\aVersion\x12\x16.google.protobuf.Empty\x1a\x13.types.VersionReply\x12N\n" +
	"\x0eOnPendingBlock\x12\x1d.txpool.OnPendingBlockRequest\x1a\x1b.txpool.OnPendingBlockReply0\x01\x12H\n" +
	"\fOnMinedBlock\x12\x1b.txpool.OnMinedBlockRequest\x1a\x19.txpool.OnMinedBlockReply0\x01\x12K\n" +
	"\rOnPendingLogs\x12\x1c.txpool.OnPendingLogsRequest\x1a\x1a.txpool.OnPendingLogsReply0\x01\x127\n" +
	"\aGetWork\x12\x16.txpool.GetWorkRequest\x1a\x14.txpool.GetWorkReply\x12@\n" +
	"\n" +
	"SubmitWork\x12\x19.txpool.SubmitWorkRequest\x1a\x17.txpool.SubmitWorkReply\x12L\n" +
	"\x0eSubmitHashRate\x12\x1d.txpool.SubmitHashRateRequest\x1a\x1b.txpool.SubmitHashRateReply\x12:\n" +
	"\bHashRate\x12\x17.txpool.HashRateRequest\x1a\x15.txpool.HashRateReply\x124\n" +
	"\x06Mining\x12\x15.txpool.MiningRequest\x1a\x13.txpool.MiningReplyB\x16Z\x14./txpool;txpoolprotob\x06proto3"

var (
	file_txpool_mining_proto_rawDescOnce sync.Once
	file_txpool_mining_proto_rawDescData []byte
)

func file_txpool_mining_proto_rawDescGZIP() []byte {
	file_txpool_mining_proto_rawDescOnce.Do(func() {
		file_txpool_mining_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_txpool_mining_proto_rawDesc), len(file_txpool_mining_proto_rawDesc)))
	})
	return file_txpool_mining_proto_rawDescData
}

var file_txpool_mining_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_txpool_mining_proto_goTypes = []any{
	(*OnPendingBlockRequest)(nil),   // 0: txpool.OnPendingBlockRequest
	(*OnPendingBlockReply)(nil),     // 1: txpool.OnPendingBlockReply
	(*OnMinedBlockRequest)(nil),     // 2: txpool.OnMinedBlockRequest
	(*OnMinedBlockReply)(nil),       // 3: txpool.OnMinedBlockReply
	(*OnPendingLogsRequest)(nil),    // 4: txpool.OnPendingLogsRequest
	(*OnPendingLogsReply)(nil),      // 5: txpool.OnPendingLogsReply
	(*GetWorkRequest)(nil),          // 6: txpool.GetWorkRequest
	(*GetWorkReply)(nil),            // 7: txpool.GetWorkReply
	(*SubmitWorkRequest)(nil),       // 8: txpool.SubmitWorkRequest
	(*SubmitWorkReply)(nil),         // 9: txpool.SubmitWorkReply
	(*SubmitHashRateRequest)(nil),   // 10: txpool.SubmitHashRateRequest
	(*SubmitHashRateReply)(nil),     // 11: txpool.SubmitHashRateReply
	(*HashRateRequest)(nil),         // 12: txpool.HashRateRequest
	(*HashRateReply)(nil),           // 13: txpool.HashRateReply
	(*MiningRequest)(nil),           // 14: txpool.MiningRequest
	(*MiningReply)(nil),             // 15: txpool.MiningReply
	(*emptypb.Empty)(nil),           // 16: google.protobuf.Empty
	(*typesproto.VersionReply)(nil), // 17: types.VersionReply
}
var file_txpool_mining_proto_depIdxs = []int32{
	16, // 0: txpool.Mining.Version:input_type -> google.protobuf.Empty
	0,  // 1: txpool.Mining.OnPendingBlock:input_type -> txpool.OnPendingBlockRequest
	2,  // 2: txpool.Mining.OnMinedBlock:input_type -> txpool.OnMinedBlockRequest
	4,  // 3: txpool.Mining.OnPendingLogs:input_type -> txpool.OnPendingLogsRequest
	6,  // 4: txpool.Mining.GetWork:input_type -> txpool.GetWorkRequest
	8,  // 5: txpool.Mining.SubmitWork:input_type -> txpool.SubmitWorkRequest
	10, // 6: txpool.Mining.SubmitHashRate:input_type -> txpool.SubmitHashRateRequest
	12, // 7: txpool.Mining.HashRate:input_type -> txpool.HashRateRequest
	14, // 8: txpool.Mining.Mining:input_type -> txpool.MiningRequest
	17, // 9: txpool.Mining.Version:output_type -> types.VersionReply
	1,  // 10: txpool.Mining.OnPendingBlock:output_type -> txpool.OnPendingBlockReply
	3,  // 11: txpool.Mining.OnMinedBlock:output_type -> txpool.OnMinedBlockReply
	5,  // 12: txpool.Mining.OnPendingLogs:output_type -> txpool.OnPendingLogsReply
	7,  // 13: txpool.Mining.GetWork:output_type -> txpool.GetWorkReply
	9,  // 14: txpool.Mining.SubmitWork:output_type -> txpool.SubmitWorkReply
	11, // 15: txpool.Mining.SubmitHashRate:output_type -> txpool.SubmitHashRateReply
	13, // 16: txpool.Mining.HashRate:output_type -> txpool.HashRateReply
	15, // 17: txpool.Mining.Mining:output_type -> txpool.MiningReply
	9,  // [9:18] is the sub-list for method output_type
	0,  // [0:9] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_txpool_mining_proto_init() }
func file_txpool_mining_proto_init() {
	if File_txpool_mining_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_txpool_mining_proto_rawDesc), len(file_txpool_mining_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_txpool_mining_proto_goTypes,
		DependencyIndexes: file_txpool_mining_proto_depIdxs,
		MessageInfos:      file_txpool_mining_proto_msgTypes,
	}.Build()
	File_txpool_mining_proto = out.File
	file_txpool_mining_proto_goTypes = nil
	file_txpool_mining_proto_depIdxs = nil
}
