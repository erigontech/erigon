// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: txpool/txpool.proto

package txpoolproto

import (
	typesproto "github.com/erigontech/erigon-lib/gointerfaces/typesproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImportResult int32

const (
	ImportResult_SUCCESS        ImportResult = 0
	ImportResult_ALREADY_EXISTS ImportResult = 1
	ImportResult_FEE_TOO_LOW    ImportResult = 2
	ImportResult_STALE          ImportResult = 3
	ImportResult_INVALID        ImportResult = 4
	ImportResult_INTERNAL_ERROR ImportResult = 5
)

// Enum value maps for ImportResult.
var (
	ImportResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ALREADY_EXISTS",
		2: "FEE_TOO_LOW",
		3: "STALE",
		4: "INVALID",
		5: "INTERNAL_ERROR",
	}
	ImportResult_value = map[string]int32{
		"SUCCESS":        0,
		"ALREADY_EXISTS": 1,
		"FEE_TOO_LOW":    2,
		"STALE":          3,
		"INVALID":        4,
		"INTERNAL_ERROR": 5,
	}
)

func (x ImportResult) Enum() *ImportResult {
	p := new(ImportResult)
	*p = x
	return p
}

func (x ImportResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImportResult) Descriptor() protoreflect.EnumDescriptor {
	return file_txpool_txpool_proto_enumTypes[0].Descriptor()
}

func (ImportResult) Type() protoreflect.EnumType {
	return &file_txpool_txpool_proto_enumTypes[0]
}

func (x ImportResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImportResult.Descriptor instead.
func (ImportResult) EnumDescriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{0}
}

type AllReply_TxnType int32

const (
	AllReply_PENDING  AllReply_TxnType = 0 // All currently processable transactions
	AllReply_QUEUED   AllReply_TxnType = 1 // Queued but non-processable transactions
	AllReply_BASE_FEE AllReply_TxnType = 2 // BaseFee not enough baseFee non-processable transactions
)

// Enum value maps for AllReply_TxnType.
var (
	AllReply_TxnType_name = map[int32]string{
		0: "PENDING",
		1: "QUEUED",
		2: "BASE_FEE",
	}
	AllReply_TxnType_value = map[string]int32{
		"PENDING":  0,
		"QUEUED":   1,
		"BASE_FEE": 2,
	}
)

func (x AllReply_TxnType) Enum() *AllReply_TxnType {
	p := new(AllReply_TxnType)
	*p = x
	return p
}

func (x AllReply_TxnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllReply_TxnType) Descriptor() protoreflect.EnumDescriptor {
	return file_txpool_txpool_proto_enumTypes[1].Descriptor()
}

func (AllReply_TxnType) Type() protoreflect.EnumType {
	return &file_txpool_txpool_proto_enumTypes[1]
}

func (x AllReply_TxnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllReply_TxnType.Descriptor instead.
func (AllReply_TxnType) EnumDescriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{8, 0}
}

type TxHashes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hashes        []*typesproto.H256     `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxHashes) Reset() {
	*x = TxHashes{}
	mi := &file_txpool_txpool_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxHashes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxHashes) ProtoMessage() {}

func (x *TxHashes) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxHashes.ProtoReflect.Descriptor instead.
func (*TxHashes) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{0}
}

func (x *TxHashes) GetHashes() []*typesproto.H256 {
	if x != nil {
		return x.Hashes
	}
	return nil
}

type AddRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RlpTxs        [][]byte               `protobuf:"bytes,1,rep,name=rlp_txs,json=rlpTxs,proto3" json:"rlp_txs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRequest) Reset() {
	*x = AddRequest{}
	mi := &file_txpool_txpool_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequest) ProtoMessage() {}

func (x *AddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRequest.ProtoReflect.Descriptor instead.
func (*AddRequest) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{1}
}

func (x *AddRequest) GetRlpTxs() [][]byte {
	if x != nil {
		return x.RlpTxs
	}
	return nil
}

type AddReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imported      []ImportResult         `protobuf:"varint,1,rep,packed,name=imported,proto3,enum=txpool.ImportResult" json:"imported,omitempty"`
	Errors        []string               `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddReply) Reset() {
	*x = AddReply{}
	mi := &file_txpool_txpool_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReply) ProtoMessage() {}

func (x *AddReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReply.ProtoReflect.Descriptor instead.
func (*AddReply) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{2}
}

func (x *AddReply) GetImported() []ImportResult {
	if x != nil {
		return x.Imported
	}
	return nil
}

func (x *AddReply) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type TransactionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hashes        []*typesproto.H256     `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionsRequest) Reset() {
	*x = TransactionsRequest{}
	mi := &file_txpool_txpool_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsRequest) ProtoMessage() {}

func (x *TransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsRequest.ProtoReflect.Descriptor instead.
func (*TransactionsRequest) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionsRequest) GetHashes() []*typesproto.H256 {
	if x != nil {
		return x.Hashes
	}
	return nil
}

type TransactionsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RlpTxs        [][]byte               `protobuf:"bytes,1,rep,name=rlp_txs,json=rlpTxs,proto3" json:"rlp_txs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionsReply) Reset() {
	*x = TransactionsReply{}
	mi := &file_txpool_txpool_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsReply) ProtoMessage() {}

func (x *TransactionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsReply.ProtoReflect.Descriptor instead.
func (*TransactionsReply) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionsReply) GetRlpTxs() [][]byte {
	if x != nil {
		return x.RlpTxs
	}
	return nil
}

type OnAddRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnAddRequest) Reset() {
	*x = OnAddRequest{}
	mi := &file_txpool_txpool_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnAddRequest) ProtoMessage() {}

func (x *OnAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnAddRequest.ProtoReflect.Descriptor instead.
func (*OnAddRequest) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{5}
}

type OnAddReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RplTxs        [][]byte               `protobuf:"bytes,1,rep,name=rpl_txs,json=rplTxs,proto3" json:"rpl_txs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnAddReply) Reset() {
	*x = OnAddReply{}
	mi := &file_txpool_txpool_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnAddReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnAddReply) ProtoMessage() {}

func (x *OnAddReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnAddReply.ProtoReflect.Descriptor instead.
func (*OnAddReply) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{6}
}

func (x *OnAddReply) GetRplTxs() [][]byte {
	if x != nil {
		return x.RplTxs
	}
	return nil
}

type AllRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllRequest) Reset() {
	*x = AllRequest{}
	mi := &file_txpool_txpool_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllRequest) ProtoMessage() {}

func (x *AllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllRequest.ProtoReflect.Descriptor instead.
func (*AllRequest) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{7}
}

type AllReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Txs           []*AllReply_Tx         `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllReply) Reset() {
	*x = AllReply{}
	mi := &file_txpool_txpool_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllReply) ProtoMessage() {}

func (x *AllReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllReply.ProtoReflect.Descriptor instead.
func (*AllReply) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{8}
}

func (x *AllReply) GetTxs() []*AllReply_Tx {
	if x != nil {
		return x.Txs
	}
	return nil
}

type PendingReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Txs           []*PendingReply_Tx     `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PendingReply) Reset() {
	*x = PendingReply{}
	mi := &file_txpool_txpool_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PendingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingReply) ProtoMessage() {}

func (x *PendingReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingReply.ProtoReflect.Descriptor instead.
func (*PendingReply) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{9}
}

func (x *PendingReply) GetTxs() []*PendingReply_Tx {
	if x != nil {
		return x.Txs
	}
	return nil
}

type StatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	mi := &file_txpool_txpool_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{10}
}

type StatusReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PendingCount  uint32                 `protobuf:"varint,1,opt,name=pending_count,json=pendingCount,proto3" json:"pending_count,omitempty"`
	QueuedCount   uint32                 `protobuf:"varint,2,opt,name=queued_count,json=queuedCount,proto3" json:"queued_count,omitempty"`
	BaseFeeCount  uint32                 `protobuf:"varint,3,opt,name=base_fee_count,json=baseFeeCount,proto3" json:"base_fee_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusReply) Reset() {
	*x = StatusReply{}
	mi := &file_txpool_txpool_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReply) ProtoMessage() {}

func (x *StatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReply.ProtoReflect.Descriptor instead.
func (*StatusReply) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{11}
}

func (x *StatusReply) GetPendingCount() uint32 {
	if x != nil {
		return x.PendingCount
	}
	return 0
}

func (x *StatusReply) GetQueuedCount() uint32 {
	if x != nil {
		return x.QueuedCount
	}
	return 0
}

func (x *StatusReply) GetBaseFeeCount() uint32 {
	if x != nil {
		return x.BaseFeeCount
	}
	return 0
}

type NonceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       *typesproto.H160       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NonceRequest) Reset() {
	*x = NonceRequest{}
	mi := &file_txpool_txpool_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceRequest) ProtoMessage() {}

func (x *NonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceRequest.ProtoReflect.Descriptor instead.
func (*NonceRequest) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{12}
}

func (x *NonceRequest) GetAddress() *typesproto.H160 {
	if x != nil {
		return x.Address
	}
	return nil
}

type NonceReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Found         bool                   `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	Nonce         uint64                 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NonceReply) Reset() {
	*x = NonceReply{}
	mi := &file_txpool_txpool_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NonceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceReply) ProtoMessage() {}

func (x *NonceReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceReply.ProtoReflect.Descriptor instead.
func (*NonceReply) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{13}
}

func (x *NonceReply) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *NonceReply) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type GetBlobsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlobHashes    []*typesproto.H256     `protobuf:"bytes,1,rep,name=blob_hashes,json=blobHashes,proto3" json:"blob_hashes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlobsRequest) Reset() {
	*x = GetBlobsRequest{}
	mi := &file_txpool_txpool_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlobsRequest) ProtoMessage() {}

func (x *GetBlobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlobsRequest.ProtoReflect.Descriptor instead.
func (*GetBlobsRequest) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{14}
}

func (x *GetBlobsRequest) GetBlobHashes() []*typesproto.H256 {
	if x != nil {
		return x.BlobHashes
	}
	return nil
}

type GetBlobsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blobs         [][]byte               `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
	Proofs        [][]byte               `protobuf:"bytes,2,rep,name=proofs,proto3" json:"proofs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlobsReply) Reset() {
	*x = GetBlobsReply{}
	mi := &file_txpool_txpool_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlobsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlobsReply) ProtoMessage() {}

func (x *GetBlobsReply) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlobsReply.ProtoReflect.Descriptor instead.
func (*GetBlobsReply) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{15}
}

func (x *GetBlobsReply) GetBlobs() [][]byte {
	if x != nil {
		return x.Blobs
	}
	return nil
}

func (x *GetBlobsReply) GetProofs() [][]byte {
	if x != nil {
		return x.Proofs
	}
	return nil
}

type AllReply_Tx struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxnType       AllReply_TxnType       `protobuf:"varint,1,opt,name=txn_type,json=txnType,proto3,enum=txpool.AllReply_TxnType" json:"txn_type,omitempty"`
	Sender        *typesproto.H160       `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	RlpTx         []byte                 `protobuf:"bytes,3,opt,name=rlp_tx,json=rlpTx,proto3" json:"rlp_tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllReply_Tx) Reset() {
	*x = AllReply_Tx{}
	mi := &file_txpool_txpool_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllReply_Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllReply_Tx) ProtoMessage() {}

func (x *AllReply_Tx) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllReply_Tx.ProtoReflect.Descriptor instead.
func (*AllReply_Tx) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{8, 0}
}

func (x *AllReply_Tx) GetTxnType() AllReply_TxnType {
	if x != nil {
		return x.TxnType
	}
	return AllReply_PENDING
}

func (x *AllReply_Tx) GetSender() *typesproto.H160 {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *AllReply_Tx) GetRlpTx() []byte {
	if x != nil {
		return x.RlpTx
	}
	return nil
}

type PendingReply_Tx struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sender        *typesproto.H160       `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	RlpTx         []byte                 `protobuf:"bytes,2,opt,name=rlp_tx,json=rlpTx,proto3" json:"rlp_tx,omitempty"`
	IsLocal       bool                   `protobuf:"varint,3,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PendingReply_Tx) Reset() {
	*x = PendingReply_Tx{}
	mi := &file_txpool_txpool_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PendingReply_Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingReply_Tx) ProtoMessage() {}

func (x *PendingReply_Tx) ProtoReflect() protoreflect.Message {
	mi := &file_txpool_txpool_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingReply_Tx.ProtoReflect.Descriptor instead.
func (*PendingReply_Tx) Descriptor() ([]byte, []int) {
	return file_txpool_txpool_proto_rawDescGZIP(), []int{9, 0}
}

func (x *PendingReply_Tx) GetSender() *typesproto.H160 {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *PendingReply_Tx) GetRlpTx() []byte {
	if x != nil {
		return x.RlpTx
	}
	return nil
}

func (x *PendingReply_Tx) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

var File_txpool_txpool_proto protoreflect.FileDescriptor

const file_txpool_txpool_proto_rawDesc = "" +
	"\n" +
	"\x13txpool/txpool.proto\x12\x06txpool\x1a\x1bgoogle/protobuf/empty.proto\x1a\x11types/types.proto\"/\n" +
	"\bTxHashes\x12#\n" +
	"\x06hashes\x18\x01 \x03(\v2\v.types.H256R\x06hashes\"%\n" +
	"\n" +
	"AddRequest\x12\x17\n" +
	"\arlp_txs\x18\x01 \x03(\fR\x06rlpTxs\"T\n" +
	"\bAddReply\x120\n" +
	"\bimported\x18\x01 \x03(\x0e2\x14.txpool.ImportResultR\bimported\x12\x16\n" +
	"\x06errors\x18\x02 \x03(\tR\x06errors\":\n" +
	"\x13TransactionsRequest\x12#\n" +
	"\x06hashes\x18\x01 \x03(\v2\v.types.H256R\x06hashes\",\n" +
	"\x11TransactionsReply\x12\x17\n" +
	"\arlp_txs\x18\x01 \x03(\fR\x06rlpTxs\"\x0e\n" +
	"\fOnAddRequest\"%\n" +
	"\n" +
	"OnAddReply\x12\x17\n" +
	"\arpl_txs\x18\x01 \x03(\fR\x06rplTxs\"\f\n" +
	"\n" +
	"AllRequest\"\xda\x01\n" +
	"\bAllReply\x12%\n" +
	"\x03txs\x18\x01 \x03(\v2\x13.txpool.AllReply.TxR\x03txs\x1au\n" +
	"\x02Tx\x123\n" +
	"\btxn_type\x18\x01 \x01(\x0e2\x18.txpool.AllReply.TxnTypeR\atxnType\x12#\n" +
	"\x06sender\x18\x02 \x01(\v2\v.types.H160R\x06sender\x12\x15\n" +
	"\x06rlp_tx\x18\x03 \x01(\fR\x05rlpTx\"0\n" +
	"\aTxnType\x12\v\n" +
	"\aPENDING\x10\x00\x12\n" +
	"\n" +
	"\x06QUEUED\x10\x01\x12\f\n" +
	"\bBASE_FEE\x10\x02\"\x96\x01\n" +
	"\fPendingReply\x12)\n" +
	"\x03txs\x18\x01 \x03(\v2\x17.txpool.PendingReply.TxR\x03txs\x1a[\n" +
	"\x02Tx\x12#\n" +
	"\x06sender\x18\x01 \x01(\v2\v.types.H160R\x06sender\x12\x15\n" +
	"\x06rlp_tx\x18\x02 \x01(\fR\x05rlpTx\x12\x19\n" +
	"\bis_local\x18\x03 \x01(\bR\aisLocal\"\x0f\n" +
	"\rStatusRequest\"{\n" +
	"\vStatusReply\x12#\n" +
	"\rpending_count\x18\x01 \x01(\rR\fpendingCount\x12!\n" +
	"\fqueued_count\x18\x02 \x01(\rR\vqueuedCount\x12$\n" +
	"\x0ebase_fee_count\x18\x03 \x01(\rR\fbaseFeeCount\"5\n" +
	"\fNonceRequest\x12%\n" +
	"\aaddress\x18\x01 \x01(\v2\v.types.H160R\aaddress\"8\n" +
	"\n" +
	"NonceReply\x12\x14\n" +
	"\x05found\x18\x01 \x01(\bR\x05found\x12\x14\n" +
	"\x05nonce\x18\x02 \x01(\x04R\x05nonce\"?\n" +
	"\x0fGetBlobsRequest\x12,\n" +
	"\vblob_hashes\x18\x01 \x03(\v2\v.types.H256R\n" +
	"blobHashes\"=\n" +
	"\rGetBlobsReply\x12\x14\n" +
	"\x05blobs\x18\x01 \x03(\fR\x05blobs\x12\x16\n" +
	"\x06proofs\x18\x02 \x03(\fR\x06proofs*l\n" +
	"\fImportResult\x12\v\n" +
	"\aSUCCESS\x10\x00\x12\x12\n" +
	"\x0eALREADY_EXISTS\x10\x01\x12\x0f\n" +
	"\vFEE_TOO_LOW\x10\x02\x12\t\n" +
	"\x05STALE\x10\x03\x12\v\n" +
	"\aINVALID\x10\x04\x12\x12\n" +
	"\x0eINTERNAL_ERROR\x10\x052\xa8\x04\n" +
	"\x06Txpool\x126\n" +
	"\aVersion\x12\x16.google.protobuf.Empty\x1a\x13.types.VersionReply\x121\n" +
	"\vFindUnknown\x12\x10.txpool.TxHashes\x1a\x10.txpool.TxHashes\x12+\n" +
	"\x03Add\x12\x12.txpool.AddRequest\x1a\x10.txpool.AddReply\x12F\n" +
	"\fTransactions\x12\x1b.txpool.TransactionsRequest\x1a\x19.txpool.TransactionsReply\x12+\n" +
	"\x03All\x12\x12.txpool.AllRequest\x1a\x10.txpool.AllReply\x127\n" +
	"\aPending\x12\x16.google.protobuf.Empty\x1a\x14.txpool.PendingReply\x123\n" +
	"\x05OnAdd\x12\x14.txpool.OnAddRequest\x1a\x12.txpool.OnAddReply0\x01\x124\n" +
	"\x06Status\x12\x15.txpool.StatusRequest\x1a\x13.txpool.StatusReply\x121\n" +
	"\x05Nonce\x12\x14.txpool.NonceRequest\x1a\x12.txpool.NonceReply\x12:\n" +
	"\bGetBlobs\x12\x17.txpool.GetBlobsRequest\x1a\x15.txpool.GetBlobsReplyB\x16Z\x14./txpool;txpoolprotob\x06proto3"

var (
	file_txpool_txpool_proto_rawDescOnce sync.Once
	file_txpool_txpool_proto_rawDescData []byte
)

func file_txpool_txpool_proto_rawDescGZIP() []byte {
	file_txpool_txpool_proto_rawDescOnce.Do(func() {
		file_txpool_txpool_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_txpool_txpool_proto_rawDesc), len(file_txpool_txpool_proto_rawDesc)))
	})
	return file_txpool_txpool_proto_rawDescData
}

var file_txpool_txpool_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_txpool_txpool_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_txpool_txpool_proto_goTypes = []any{
	(ImportResult)(0),               // 0: txpool.ImportResult
	(AllReply_TxnType)(0),           // 1: txpool.AllReply.TxnType
	(*TxHashes)(nil),                // 2: txpool.TxHashes
	(*AddRequest)(nil),              // 3: txpool.AddRequest
	(*AddReply)(nil),                // 4: txpool.AddReply
	(*TransactionsRequest)(nil),     // 5: txpool.TransactionsRequest
	(*TransactionsReply)(nil),       // 6: txpool.TransactionsReply
	(*OnAddRequest)(nil),            // 7: txpool.OnAddRequest
	(*OnAddReply)(nil),              // 8: txpool.OnAddReply
	(*AllRequest)(nil),              // 9: txpool.AllRequest
	(*AllReply)(nil),                // 10: txpool.AllReply
	(*PendingReply)(nil),            // 11: txpool.PendingReply
	(*StatusRequest)(nil),           // 12: txpool.StatusRequest
	(*StatusReply)(nil),             // 13: txpool.StatusReply
	(*NonceRequest)(nil),            // 14: txpool.NonceRequest
	(*NonceReply)(nil),              // 15: txpool.NonceReply
	(*GetBlobsRequest)(nil),         // 16: txpool.GetBlobsRequest
	(*GetBlobsReply)(nil),           // 17: txpool.GetBlobsReply
	(*AllReply_Tx)(nil),             // 18: txpool.AllReply.Tx
	(*PendingReply_Tx)(nil),         // 19: txpool.PendingReply.Tx
	(*typesproto.H256)(nil),         // 20: types.H256
	(*typesproto.H160)(nil),         // 21: types.H160
	(*emptypb.Empty)(nil),           // 22: google.protobuf.Empty
	(*typesproto.VersionReply)(nil), // 23: types.VersionReply
}
var file_txpool_txpool_proto_depIdxs = []int32{
	20, // 0: txpool.TxHashes.hashes:type_name -> types.H256
	0,  // 1: txpool.AddReply.imported:type_name -> txpool.ImportResult
	20, // 2: txpool.TransactionsRequest.hashes:type_name -> types.H256
	18, // 3: txpool.AllReply.txs:type_name -> txpool.AllReply.Tx
	19, // 4: txpool.PendingReply.txs:type_name -> txpool.PendingReply.Tx
	21, // 5: txpool.NonceRequest.address:type_name -> types.H160
	20, // 6: txpool.GetBlobsRequest.blob_hashes:type_name -> types.H256
	1,  // 7: txpool.AllReply.Tx.txn_type:type_name -> txpool.AllReply.TxnType
	21, // 8: txpool.AllReply.Tx.sender:type_name -> types.H160
	21, // 9: txpool.PendingReply.Tx.sender:type_name -> types.H160
	22, // 10: txpool.Txpool.Version:input_type -> google.protobuf.Empty
	2,  // 11: txpool.Txpool.FindUnknown:input_type -> txpool.TxHashes
	3,  // 12: txpool.Txpool.Add:input_type -> txpool.AddRequest
	5,  // 13: txpool.Txpool.Transactions:input_type -> txpool.TransactionsRequest
	9,  // 14: txpool.Txpool.All:input_type -> txpool.AllRequest
	22, // 15: txpool.Txpool.Pending:input_type -> google.protobuf.Empty
	7,  // 16: txpool.Txpool.OnAdd:input_type -> txpool.OnAddRequest
	12, // 17: txpool.Txpool.Status:input_type -> txpool.StatusRequest
	14, // 18: txpool.Txpool.Nonce:input_type -> txpool.NonceRequest
	16, // 19: txpool.Txpool.GetBlobs:input_type -> txpool.GetBlobsRequest
	23, // 20: txpool.Txpool.Version:output_type -> types.VersionReply
	2,  // 21: txpool.Txpool.FindUnknown:output_type -> txpool.TxHashes
	4,  // 22: txpool.Txpool.Add:output_type -> txpool.AddReply
	6,  // 23: txpool.Txpool.Transactions:output_type -> txpool.TransactionsReply
	10, // 24: txpool.Txpool.All:output_type -> txpool.AllReply
	11, // 25: txpool.Txpool.Pending:output_type -> txpool.PendingReply
	8,  // 26: txpool.Txpool.OnAdd:output_type -> txpool.OnAddReply
	13, // 27: txpool.Txpool.Status:output_type -> txpool.StatusReply
	15, // 28: txpool.Txpool.Nonce:output_type -> txpool.NonceReply
	17, // 29: txpool.Txpool.GetBlobs:output_type -> txpool.GetBlobsReply
	20, // [20:30] is the sub-list for method output_type
	10, // [10:20] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_txpool_txpool_proto_init() }
func file_txpool_txpool_proto_init() {
	if File_txpool_txpool_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_txpool_txpool_proto_rawDesc), len(file_txpool_txpool_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_txpool_txpool_proto_goTypes,
		DependencyIndexes: file_txpool_txpool_proto_depIdxs,
		EnumInfos:         file_txpool_txpool_proto_enumTypes,
		MessageInfos:      file_txpool_txpool_proto_msgTypes,
	}.Build()
	File_txpool_txpool_proto = out.File
	file_txpool_txpool_proto_goTypes = nil
	file_txpool_txpool_proto_depIdxs = nil
}
