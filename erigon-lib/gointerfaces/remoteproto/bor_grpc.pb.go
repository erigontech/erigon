// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: remote/bor.proto

package remoteproto

import (
	context "context"
	typesproto "github.com/erigontech/erigon-lib/gointerfaces/typesproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BridgeBackend_Version_FullMethodName      = "/remote.BridgeBackend/Version"
	BridgeBackend_BorTxnLookup_FullMethodName = "/remote.BridgeBackend/BorTxnLookup"
	BridgeBackend_BorEvents_FullMethodName    = "/remote.BridgeBackend/BorEvents"
)

// BridgeBackendClient is the client API for BridgeBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BridgeBackendClient interface {
	// Version returns the service version number
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*typesproto.VersionReply, error)
	BorTxnLookup(ctx context.Context, in *BorTxnLookupRequest, opts ...grpc.CallOption) (*BorTxnLookupReply, error)
	BorEvents(ctx context.Context, in *BorEventsRequest, opts ...grpc.CallOption) (*BorEventsReply, error)
}

type bridgeBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeBackendClient(cc grpc.ClientConnInterface) BridgeBackendClient {
	return &bridgeBackendClient{cc}
}

func (c *bridgeBackendClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*typesproto.VersionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(typesproto.VersionReply)
	err := c.cc.Invoke(ctx, BridgeBackend_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeBackendClient) BorTxnLookup(ctx context.Context, in *BorTxnLookupRequest, opts ...grpc.CallOption) (*BorTxnLookupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorTxnLookupReply)
	err := c.cc.Invoke(ctx, BridgeBackend_BorTxnLookup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeBackendClient) BorEvents(ctx context.Context, in *BorEventsRequest, opts ...grpc.CallOption) (*BorEventsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorEventsReply)
	err := c.cc.Invoke(ctx, BridgeBackend_BorEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgeBackendServer is the server API for BridgeBackend service.
// All implementations must embed UnimplementedBridgeBackendServer
// for forward compatibility
type BridgeBackendServer interface {
	// Version returns the service version number
	Version(context.Context, *emptypb.Empty) (*typesproto.VersionReply, error)
	BorTxnLookup(context.Context, *BorTxnLookupRequest) (*BorTxnLookupReply, error)
	BorEvents(context.Context, *BorEventsRequest) (*BorEventsReply, error)
	mustEmbedUnimplementedBridgeBackendServer()
}

// UnimplementedBridgeBackendServer must be embedded to have forward compatible implementations.
type UnimplementedBridgeBackendServer struct {
}

func (UnimplementedBridgeBackendServer) Version(context.Context, *emptypb.Empty) (*typesproto.VersionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedBridgeBackendServer) BorTxnLookup(context.Context, *BorTxnLookupRequest) (*BorTxnLookupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorTxnLookup not implemented")
}
func (UnimplementedBridgeBackendServer) BorEvents(context.Context, *BorEventsRequest) (*BorEventsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorEvents not implemented")
}
func (UnimplementedBridgeBackendServer) mustEmbedUnimplementedBridgeBackendServer() {}

// UnsafeBridgeBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgeBackendServer will
// result in compilation errors.
type UnsafeBridgeBackendServer interface {
	mustEmbedUnimplementedBridgeBackendServer()
}

func RegisterBridgeBackendServer(s grpc.ServiceRegistrar, srv BridgeBackendServer) {
	s.RegisterService(&BridgeBackend_ServiceDesc, srv)
}

func _BridgeBackend_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeBackendServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeBackend_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeBackendServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeBackend_BorTxnLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorTxnLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeBackendServer).BorTxnLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeBackend_BorTxnLookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeBackendServer).BorTxnLookup(ctx, req.(*BorTxnLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeBackend_BorEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeBackendServer).BorEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeBackend_BorEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeBackendServer).BorEvents(ctx, req.(*BorEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BridgeBackend_ServiceDesc is the grpc.ServiceDesc for BridgeBackend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BridgeBackend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote.BridgeBackend",
	HandlerType: (*BridgeBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _BridgeBackend_Version_Handler,
		},
		{
			MethodName: "BorTxnLookup",
			Handler:    _BridgeBackend_BorTxnLookup_Handler,
		},
		{
			MethodName: "BorEvents",
			Handler:    _BridgeBackend_BorEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remote/bor.proto",
}
