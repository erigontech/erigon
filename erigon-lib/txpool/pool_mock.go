// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erigontech/erigon-lib/txpool (interfaces: Pool)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./pool_mock.go -package=txpool . Pool
//

// Package txpool is a generated GoMock package.
package txpool

import (
	context "context"
	reflect "reflect"

	remoteproto "github.com/erigontech/erigon-lib/gointerfaces/remoteproto"
	kv "github.com/erigontech/erigon-lib/kv"
	txpoolcfg "github.com/erigontech/erigon-lib/txpool/txpoolcfg"
	types "github.com/erigontech/erigon-lib/types"
	gomock "go.uber.org/mock/gomock"
)

// MockPool is a mock of Pool interface.
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
	isgomock struct{}
}

// MockPoolMockRecorder is the mock recorder for MockPool.
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance.
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPool) EXPECT() *MockPoolMockRecorder {
	return m.recorder
}

// AddLocalTxs mocks base method.
func (m *MockPool) AddLocalTxs(ctx context.Context, newTxs types.TxSlots, tx kv.Tx) ([]txpoolcfg.DiscardReason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocalTxs", ctx, newTxs, tx)
	ret0, _ := ret[0].([]txpoolcfg.DiscardReason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocalTxs indicates an expected call of AddLocalTxs.
func (mr *MockPoolMockRecorder) AddLocalTxs(ctx, newTxs, tx any) *MockPoolAddLocalTxsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocalTxs", reflect.TypeOf((*MockPool)(nil).AddLocalTxs), ctx, newTxs, tx)
	return &MockPoolAddLocalTxsCall{Call: call}
}

// MockPoolAddLocalTxsCall wrap *gomock.Call
type MockPoolAddLocalTxsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolAddLocalTxsCall) Return(arg0 []txpoolcfg.DiscardReason, arg1 error) *MockPoolAddLocalTxsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolAddLocalTxsCall) Do(f func(context.Context, types.TxSlots, kv.Tx) ([]txpoolcfg.DiscardReason, error)) *MockPoolAddLocalTxsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolAddLocalTxsCall) DoAndReturn(f func(context.Context, types.TxSlots, kv.Tx) ([]txpoolcfg.DiscardReason, error)) *MockPoolAddLocalTxsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddNewGoodPeer mocks base method.
func (m *MockPool) AddNewGoodPeer(peerID types.PeerID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNewGoodPeer", peerID)
}

// AddNewGoodPeer indicates an expected call of AddNewGoodPeer.
func (mr *MockPoolMockRecorder) AddNewGoodPeer(peerID any) *MockPoolAddNewGoodPeerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewGoodPeer", reflect.TypeOf((*MockPool)(nil).AddNewGoodPeer), peerID)
	return &MockPoolAddNewGoodPeerCall{Call: call}
}

// MockPoolAddNewGoodPeerCall wrap *gomock.Call
type MockPoolAddNewGoodPeerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolAddNewGoodPeerCall) Return() *MockPoolAddNewGoodPeerCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolAddNewGoodPeerCall) Do(f func(types.PeerID)) *MockPoolAddNewGoodPeerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolAddNewGoodPeerCall) DoAndReturn(f func(types.PeerID)) *MockPoolAddNewGoodPeerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddRemoteTxs mocks base method.
func (m *MockPool) AddRemoteTxs(ctx context.Context, newTxs types.TxSlots) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRemoteTxs", ctx, newTxs)
}

// AddRemoteTxs indicates an expected call of AddRemoteTxs.
func (mr *MockPoolMockRecorder) AddRemoteTxs(ctx, newTxs any) *MockPoolAddRemoteTxsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteTxs", reflect.TypeOf((*MockPool)(nil).AddRemoteTxs), ctx, newTxs)
	return &MockPoolAddRemoteTxsCall{Call: call}
}

// MockPoolAddRemoteTxsCall wrap *gomock.Call
type MockPoolAddRemoteTxsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolAddRemoteTxsCall) Return() *MockPoolAddRemoteTxsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolAddRemoteTxsCall) Do(f func(context.Context, types.TxSlots)) *MockPoolAddRemoteTxsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolAddRemoteTxsCall) DoAndReturn(f func(context.Context, types.TxSlots)) *MockPoolAddRemoteTxsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FilterKnownIdHashes mocks base method.
func (m *MockPool) FilterKnownIdHashes(tx kv.Tx, hashes types.Hashes) (types.Hashes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterKnownIdHashes", tx, hashes)
	ret0, _ := ret[0].(types.Hashes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterKnownIdHashes indicates an expected call of FilterKnownIdHashes.
func (mr *MockPoolMockRecorder) FilterKnownIdHashes(tx, hashes any) *MockPoolFilterKnownIdHashesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterKnownIdHashes", reflect.TypeOf((*MockPool)(nil).FilterKnownIdHashes), tx, hashes)
	return &MockPoolFilterKnownIdHashesCall{Call: call}
}

// MockPoolFilterKnownIdHashesCall wrap *gomock.Call
type MockPoolFilterKnownIdHashesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolFilterKnownIdHashesCall) Return(unknownHashes types.Hashes, err error) *MockPoolFilterKnownIdHashesCall {
	c.Call = c.Call.Return(unknownHashes, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolFilterKnownIdHashesCall) Do(f func(kv.Tx, types.Hashes) (types.Hashes, error)) *MockPoolFilterKnownIdHashesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolFilterKnownIdHashesCall) DoAndReturn(f func(kv.Tx, types.Hashes) (types.Hashes, error)) *MockPoolFilterKnownIdHashesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRlp mocks base method.
func (m *MockPool) GetRlp(tx kv.Tx, hash []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRlp", tx, hash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRlp indicates an expected call of GetRlp.
func (mr *MockPoolMockRecorder) GetRlp(tx, hash any) *MockPoolGetRlpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRlp", reflect.TypeOf((*MockPool)(nil).GetRlp), tx, hash)
	return &MockPoolGetRlpCall{Call: call}
}

// MockPoolGetRlpCall wrap *gomock.Call
type MockPoolGetRlpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolGetRlpCall) Return(arg0 []byte, arg1 error) *MockPoolGetRlpCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolGetRlpCall) Do(f func(kv.Tx, []byte) ([]byte, error)) *MockPoolGetRlpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolGetRlpCall) DoAndReturn(f func(kv.Tx, []byte) ([]byte, error)) *MockPoolGetRlpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IdHashKnown mocks base method.
func (m *MockPool) IdHashKnown(tx kv.Tx, hash []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdHashKnown", tx, hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdHashKnown indicates an expected call of IdHashKnown.
func (mr *MockPoolMockRecorder) IdHashKnown(tx, hash any) *MockPoolIdHashKnownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdHashKnown", reflect.TypeOf((*MockPool)(nil).IdHashKnown), tx, hash)
	return &MockPoolIdHashKnownCall{Call: call}
}

// MockPoolIdHashKnownCall wrap *gomock.Call
type MockPoolIdHashKnownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolIdHashKnownCall) Return(arg0 bool, arg1 error) *MockPoolIdHashKnownCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolIdHashKnownCall) Do(f func(kv.Tx, []byte) (bool, error)) *MockPoolIdHashKnownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolIdHashKnownCall) DoAndReturn(f func(kv.Tx, []byte) (bool, error)) *MockPoolIdHashKnownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OnNewBlock mocks base method.
func (m *MockPool) OnNewBlock(ctx context.Context, stateChanges *remoteproto.StateChangeBatch, unwindTxs, unwindBlobTxs, minedTxs types.TxSlots, tx kv.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnNewBlock", ctx, stateChanges, unwindTxs, unwindBlobTxs, minedTxs, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnNewBlock indicates an expected call of OnNewBlock.
func (mr *MockPoolMockRecorder) OnNewBlock(ctx, stateChanges, unwindTxs, unwindBlobTxs, minedTxs, tx any) *MockPoolOnNewBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewBlock", reflect.TypeOf((*MockPool)(nil).OnNewBlock), ctx, stateChanges, unwindTxs, unwindBlobTxs, minedTxs, tx)
	return &MockPoolOnNewBlockCall{Call: call}
}

// MockPoolOnNewBlockCall wrap *gomock.Call
type MockPoolOnNewBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolOnNewBlockCall) Return(arg0 error) *MockPoolOnNewBlockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolOnNewBlockCall) Do(f func(context.Context, *remoteproto.StateChangeBatch, types.TxSlots, types.TxSlots, types.TxSlots, kv.Tx) error) *MockPoolOnNewBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolOnNewBlockCall) DoAndReturn(f func(context.Context, *remoteproto.StateChangeBatch, types.TxSlots, types.TxSlots, types.TxSlots, kv.Tx) error) *MockPoolOnNewBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Started mocks base method.
func (m *MockPool) Started() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Started")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Started indicates an expected call of Started.
func (mr *MockPoolMockRecorder) Started() *MockPoolStartedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Started", reflect.TypeOf((*MockPool)(nil).Started))
	return &MockPoolStartedCall{Call: call}
}

// MockPoolStartedCall wrap *gomock.Call
type MockPoolStartedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolStartedCall) Return(arg0 bool) *MockPoolStartedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolStartedCall) Do(f func() bool) *MockPoolStartedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolStartedCall) DoAndReturn(f func() bool) *MockPoolStartedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateSerializedTxn mocks base method.
func (m *MockPool) ValidateSerializedTxn(serializedTxn []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSerializedTxn", serializedTxn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateSerializedTxn indicates an expected call of ValidateSerializedTxn.
func (mr *MockPoolMockRecorder) ValidateSerializedTxn(serializedTxn any) *MockPoolValidateSerializedTxnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSerializedTxn", reflect.TypeOf((*MockPool)(nil).ValidateSerializedTxn), serializedTxn)
	return &MockPoolValidateSerializedTxnCall{Call: call}
}

// MockPoolValidateSerializedTxnCall wrap *gomock.Call
type MockPoolValidateSerializedTxnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolValidateSerializedTxnCall) Return(arg0 error) *MockPoolValidateSerializedTxnCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolValidateSerializedTxnCall) Do(f func([]byte) error) *MockPoolValidateSerializedTxnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolValidateSerializedTxnCall) DoAndReturn(f func([]byte) error) *MockPoolValidateSerializedTxnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
