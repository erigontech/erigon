// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	common "github.com/erigontech/erigon-lib/common"
	hexutil "github.com/erigontech/erigon-lib/common/hexutil"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson87522162DecodeGithubComErigontechErigonLibTypes(in *jlexer.Lexer, out *LogUnmarshal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				if out.Address == nil {
					out.Address = new(common.Address)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Address).UnmarshalJSON(data))
				}
			}
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]common.Hash, 0, 2)
					} else {
						out.Topics = []common.Hash{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v1 common.Hash
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Topics = append(out.Topics, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(hexutil.Bytes)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Data).UnmarshalJSON(data))
				}
			}
		case "blockNumber":
			if in.IsNull() {
				in.Skip()
				out.BlockNumber = nil
			} else {
				if out.BlockNumber == nil {
					out.BlockNumber = new(hexutil.Uint64)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.BlockNumber).UnmarshalJSON(data))
				}
			}
		case "transactionHash":
			if in.IsNull() {
				in.Skip()
				out.TxHash = nil
			} else {
				if out.TxHash == nil {
					out.TxHash = new(common.Hash)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TxHash).UnmarshalJSON(data))
				}
			}
		case "transactionIndex":
			if in.IsNull() {
				in.Skip()
				out.TxIndex = nil
			} else {
				if out.TxIndex == nil {
					out.TxIndex = new(hexutil.Uint)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TxIndex).UnmarshalJSON(data))
				}
			}
		case "blockHash":
			if in.IsNull() {
				in.Skip()
				out.BlockHash = nil
			} else {
				if out.BlockHash == nil {
					out.BlockHash = new(common.Hash)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.BlockHash).UnmarshalJSON(data))
				}
			}
		case "logIndex":
			if in.IsNull() {
				in.Skip()
				out.Index = nil
			} else {
				if out.Index == nil {
					out.Index = new(hexutil.Uint)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Index).UnmarshalJSON(data))
				}
			}
		case "removed":
			if in.IsNull() {
				in.Skip()
				out.Removed = nil
			} else {
				if out.Removed == nil {
					out.Removed = new(bool)
				}
				*out.Removed = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87522162EncodeGithubComErigontechErigonLibTypes(out *jwriter.Writer, in LogUnmarshal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		if in.Address == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.Address).MarshalText())
		}
	}
	{
		const prefix string = ",\"topics\":"
		out.RawString(prefix)
		if in.Topics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Topics {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.RawText((v3).MarshalText())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.Data).MarshalText())
		}
	}
	{
		const prefix string = ",\"blockNumber\":"
		out.RawString(prefix)
		if in.BlockNumber == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.BlockNumber).MarshalText())
		}
	}
	{
		const prefix string = ",\"transactionHash\":"
		out.RawString(prefix)
		if in.TxHash == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.TxHash).MarshalText())
		}
	}
	{
		const prefix string = ",\"transactionIndex\":"
		out.RawString(prefix)
		if in.TxIndex == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.TxIndex).MarshalText())
		}
	}
	{
		const prefix string = ",\"blockHash\":"
		out.RawString(prefix)
		if in.BlockHash == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.BlockHash).MarshalText())
		}
	}
	{
		const prefix string = ",\"logIndex\":"
		out.RawString(prefix)
		if in.Index == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.Index).MarshalText())
		}
	}
	{
		const prefix string = ",\"removed\":"
		out.RawString(prefix)
		if in.Removed == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Removed))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogUnmarshal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87522162EncodeGithubComErigontechErigonLibTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogUnmarshal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87522162EncodeGithubComErigontechErigonLibTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogUnmarshal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87522162DecodeGithubComErigontechErigonLibTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogUnmarshal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87522162DecodeGithubComErigontechErigonLibTypes(l, v)
}
func easyjson87522162DecodeGithubComErigontechErigonLibTypes1(in *jlexer.Lexer, out *LogMarshal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Address).UnmarshalJSON(data))
			}
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]common.Hash, 0, 2)
					} else {
						out.Topics = []common.Hash{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v4 common.Hash
					if data := in.Raw(); in.Ok() {
						in.AddError((v4).UnmarshalJSON(data))
					}
					out.Topics = append(out.Topics, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		case "blockNumber":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BlockNumber).UnmarshalJSON(data))
			}
		case "transactionHash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TxHash).UnmarshalJSON(data))
			}
		case "transactionIndex":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TxIndex).UnmarshalJSON(data))
			}
		case "blockHash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BlockHash).UnmarshalJSON(data))
			}
		case "logIndex":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Index).UnmarshalJSON(data))
			}
		case "removed":
			out.Removed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87522162EncodeGithubComErigontechErigonLibTypes1(out *jwriter.Writer, in LogMarshal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.RawText((in.Address).MarshalText())
	}
	{
		const prefix string = ",\"topics\":"
		out.RawString(prefix)
		if in.Topics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Topics {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.RawText((v6).MarshalText())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.RawText((in.Data).MarshalText())
	}
	{
		const prefix string = ",\"blockNumber\":"
		out.RawString(prefix)
		out.RawText((in.BlockNumber).MarshalText())
	}
	{
		const prefix string = ",\"transactionHash\":"
		out.RawString(prefix)
		out.RawText((in.TxHash).MarshalText())
	}
	{
		const prefix string = ",\"transactionIndex\":"
		out.RawString(prefix)
		out.RawText((in.TxIndex).MarshalText())
	}
	{
		const prefix string = ",\"blockHash\":"
		out.RawString(prefix)
		out.RawText((in.BlockHash).MarshalText())
	}
	{
		const prefix string = ",\"logIndex\":"
		out.RawString(prefix)
		out.RawText((in.Index).MarshalText())
	}
	{
		const prefix string = ",\"removed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Removed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogMarshal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87522162EncodeGithubComErigontechErigonLibTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogMarshal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87522162EncodeGithubComErigontechErigonLibTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogMarshal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87522162DecodeGithubComErigontechErigonLibTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogMarshal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87522162DecodeGithubComErigontechErigonLibTypes1(l, v)
}
