// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	common "github.com/erigontech/erigon-lib/common"
	hexutil "github.com/erigontech/erigon-lib/common/hexutil"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson382c6774DecodeGithubComErigontechErigonLibTypes(in *jlexer.Lexer, out *ReceiptUnmarshal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(hexutil.Uint64)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Type).UnmarshalJSON(data))
				}
			}
		case "root":
			if in.IsNull() {
				in.Skip()
				out.PostState = nil
			} else {
				if out.PostState == nil {
					out.PostState = new(hexutil.Bytes)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PostState).UnmarshalJSON(data))
				}
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(hexutil.Uint64)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Status).UnmarshalJSON(data))
				}
			}
		case "cumulativeGasUsed":
			if in.IsNull() {
				in.Skip()
				out.CumulativeGasUsed = nil
			} else {
				if out.CumulativeGasUsed == nil {
					out.CumulativeGasUsed = new(hexutil.Uint64)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CumulativeGasUsed).UnmarshalJSON(data))
				}
			}
		case "logsBloom":
			if in.IsNull() {
				in.Skip()
				out.Bloom = nil
			} else {
				if out.Bloom == nil {
					out.Bloom = new(Bloom)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.Bloom).UnmarshalText(data))
				}
			}
		case "logs":
			if in.IsNull() {
				in.Skip()
				out.Logs = nil
			} else {
				in.Delim('[')
				if out.Logs == nil {
					if !in.IsDelim(']') {
						out.Logs = make([]*Log, 0, 8)
					} else {
						out.Logs = []*Log{}
					}
				} else {
					out.Logs = (out.Logs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Log
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Log)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v1).UnmarshalJSON(data))
						}
					}
					out.Logs = append(out.Logs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "transactionHash":
			if in.IsNull() {
				in.Skip()
				out.TxHash = nil
			} else {
				if out.TxHash == nil {
					out.TxHash = new(common.Hash)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TxHash).UnmarshalJSON(data))
				}
			}
		case "contractAddress":
			if in.IsNull() {
				in.Skip()
				out.ContractAddress = nil
			} else {
				if out.ContractAddress == nil {
					out.ContractAddress = new(common.Address)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ContractAddress).UnmarshalJSON(data))
				}
			}
		case "gasUsed":
			if in.IsNull() {
				in.Skip()
				out.GasUsed = nil
			} else {
				if out.GasUsed == nil {
					out.GasUsed = new(hexutil.Uint64)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.GasUsed).UnmarshalJSON(data))
				}
			}
		case "blockHash":
			if in.IsNull() {
				in.Skip()
				out.BlockHash = nil
			} else {
				if out.BlockHash == nil {
					out.BlockHash = new(common.Hash)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.BlockHash).UnmarshalJSON(data))
				}
			}
		case "blockNumber":
			if in.IsNull() {
				in.Skip()
				out.BlockNumber = nil
			} else {
				if out.BlockNumber == nil {
					out.BlockNumber = new(hexutil.Big)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.BlockNumber).UnmarshalJSON(data))
				}
			}
		case "transactionIndex":
			if in.IsNull() {
				in.Skip()
				out.TransactionIndex = nil
			} else {
				if out.TransactionIndex == nil {
					out.TransactionIndex = new(hexutil.Uint)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TransactionIndex).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson382c6774EncodeGithubComErigontechErigonLibTypes(out *jwriter.Writer, in ReceiptUnmarshal) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != nil {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((*in.Type).MarshalText())
	}
	{
		const prefix string = ",\"root\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PostState == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.PostState).MarshalText())
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		if in.Status == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.Status).MarshalText())
		}
	}
	{
		const prefix string = ",\"cumulativeGasUsed\":"
		out.RawString(prefix)
		if in.CumulativeGasUsed == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.CumulativeGasUsed).MarshalText())
		}
	}
	{
		const prefix string = ",\"logsBloom\":"
		out.RawString(prefix)
		if in.Bloom == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.Bloom).MarshalText())
		}
	}
	{
		const prefix string = ",\"logs\":"
		out.RawString(prefix)
		if in.Logs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Logs {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v3).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"transactionHash\":"
		out.RawString(prefix)
		if in.TxHash == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.TxHash).MarshalText())
		}
	}
	{
		const prefix string = ",\"contractAddress\":"
		out.RawString(prefix)
		if in.ContractAddress == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.ContractAddress).MarshalText())
		}
	}
	{
		const prefix string = ",\"gasUsed\":"
		out.RawString(prefix)
		if in.GasUsed == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.GasUsed).MarshalText())
		}
	}
	if in.BlockHash != nil {
		const prefix string = ",\"blockHash\":"
		out.RawString(prefix)
		out.RawText((*in.BlockHash).MarshalText())
	}
	if in.BlockNumber != nil {
		const prefix string = ",\"blockNumber\":"
		out.RawString(prefix)
		out.RawText((*in.BlockNumber).MarshalText())
	}
	{
		const prefix string = ",\"transactionIndex\":"
		out.RawString(prefix)
		if in.TransactionIndex == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.TransactionIndex).MarshalText())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReceiptUnmarshal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson382c6774EncodeGithubComErigontechErigonLibTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReceiptUnmarshal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson382c6774EncodeGithubComErigontechErigonLibTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReceiptUnmarshal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson382c6774DecodeGithubComErigontechErigonLibTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReceiptUnmarshal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson382c6774DecodeGithubComErigontechErigonLibTypes(l, v)
}
func easyjson382c6774DecodeGithubComErigontechErigonLibTypes1(in *jlexer.Lexer, out *ReceiptMarshal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Type).UnmarshalJSON(data))
			}
		case "root":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PostState).UnmarshalJSON(data))
			}
		case "status":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Status).UnmarshalJSON(data))
			}
		case "cumulativeGasUsed":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CumulativeGasUsed).UnmarshalJSON(data))
			}
		case "logsBloom":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Bloom).UnmarshalText(data))
			}
		case "logs":
			if in.IsNull() {
				in.Skip()
				out.Logs = nil
			} else {
				in.Delim('[')
				if out.Logs == nil {
					if !in.IsDelim(']') {
						out.Logs = make([]*Log, 0, 8)
					} else {
						out.Logs = []*Log{}
					}
				} else {
					out.Logs = (out.Logs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Log
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Log)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v4).UnmarshalJSON(data))
						}
					}
					out.Logs = append(out.Logs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "transactionHash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TxHash).UnmarshalJSON(data))
			}
		case "contractAddress":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ContractAddress).UnmarshalJSON(data))
			}
		case "gasUsed":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.GasUsed).UnmarshalJSON(data))
			}
		case "blockHash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BlockHash).UnmarshalJSON(data))
			}
		case "blockNumber":
			if in.IsNull() {
				in.Skip()
				out.BlockNumber = nil
			} else {
				if out.BlockNumber == nil {
					out.BlockNumber = new(hexutil.Big)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.BlockNumber).UnmarshalJSON(data))
				}
			}
		case "transactionIndex":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TransactionIndex).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson382c6774EncodeGithubComErigontechErigonLibTypes1(out *jwriter.Writer, in ReceiptMarshal) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.Type).MarshalText())
	}
	{
		const prefix string = ",\"root\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.PostState).MarshalText())
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.RawText((in.Status).MarshalText())
	}
	{
		const prefix string = ",\"cumulativeGasUsed\":"
		out.RawString(prefix)
		out.RawText((in.CumulativeGasUsed).MarshalText())
	}
	{
		const prefix string = ",\"logsBloom\":"
		out.RawString(prefix)
		out.RawText((in.Bloom).MarshalText())
	}
	{
		const prefix string = ",\"logs\":"
		out.RawString(prefix)
		if in.Logs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Logs {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v6).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"transactionHash\":"
		out.RawString(prefix)
		out.RawText((in.TxHash).MarshalText())
	}
	{
		const prefix string = ",\"contractAddress\":"
		out.RawString(prefix)
		out.RawText((in.ContractAddress).MarshalText())
	}
	{
		const prefix string = ",\"gasUsed\":"
		out.RawString(prefix)
		out.RawText((in.GasUsed).MarshalText())
	}
	if true {
		const prefix string = ",\"blockHash\":"
		out.RawString(prefix)
		out.RawText((in.BlockHash).MarshalText())
	}
	if in.BlockNumber != nil {
		const prefix string = ",\"blockNumber\":"
		out.RawString(prefix)
		out.RawText((*in.BlockNumber).MarshalText())
	}
	{
		const prefix string = ",\"transactionIndex\":"
		out.RawString(prefix)
		out.RawText((in.TransactionIndex).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReceiptMarshal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson382c6774EncodeGithubComErigontechErigonLibTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReceiptMarshal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson382c6774EncodeGithubComErigontechErigonLibTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReceiptMarshal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson382c6774DecodeGithubComErigontechErigonLibTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReceiptMarshal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson382c6774DecodeGithubComErigontechErigonLibTypes1(l, v)
}
