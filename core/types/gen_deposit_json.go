// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ledgerwatch/erigon-lib/common/hexutil"
	"github.com/ledgerwatch/erigon-lib/common/hexutility"
)

var _ = (*depositMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (d Deposit) MarshalJSON() ([]byte, error) {
	type Deposit struct {
		Pubkey                hexutility.Bytes
		WithdrawalCredentials hexutility.Bytes
		Amount                hexutil.Uint64
		Signature             hexutility.Bytes
		Index                 hexutil.Uint64
	}
	var enc Deposit
	enc.Pubkey = d.Pubkey[:]
	enc.WithdrawalCredentials = d.WithdrawalCredentials[:]
	enc.Amount = hexutil.Uint64(d.Amount)
	enc.Signature = d.Signature[:]
	enc.Index = hexutil.Uint64(d.Index)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (d *Deposit) UnmarshalJSON(input []byte) error {
	type Deposit struct {
		Pubkey                *hexutility.Bytes
		WithdrawalCredentials *hexutility.Bytes
		Amount                *hexutil.Uint64
		Signature             *hexutility.Bytes
		Index                 *hexutil.Uint64
	}
	var dec Deposit
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Pubkey != nil {
		if len(*dec.Pubkey) != len(d.Pubkey) {
			return errors.New("field 'pubkey' has wrong length, need 48 items")
		}
		copy(d.Pubkey[:], *dec.Pubkey)
	}
	if dec.WithdrawalCredentials != nil {
		if len(*dec.WithdrawalCredentials) != len(d.WithdrawalCredentials) {
			return errors.New("field 'withdrawalCredentials' has wrong length, need 32 items")
		}
		copy(d.WithdrawalCredentials[:], *dec.WithdrawalCredentials)
	}
	if dec.Amount != nil {
		d.Amount = uint64(*dec.Amount)
	}
	if dec.Signature != nil {
		if len(*dec.Signature) != len(d.Signature) {
			return errors.New("field 'signature' has wrong length, need 96 items")
		}
		copy(d.Signature[:], *dec.Signature)
	}
	if dec.Index != nil {
		d.Index = uint64(*dec.Index)
	}
	return nil
}
