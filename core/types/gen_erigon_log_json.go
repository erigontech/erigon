// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ledgerwatch/erigon/common"
	"github.com/ledgerwatch/erigon/common/hexutil"
)

var _ = (*logMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (l ErigonLog) MarshalJSON() ([]byte, error) {
	type Log struct {
		Address     common.Address `json:"address" gencodec:"required"`
		Topics      []common.Hash  `json:"topics" gencodec:"required"`
		Data        hexutil.Bytes  `json:"data" gencodec:"required"`
		BlockNumber hexutil.Uint64 `json:"blockNumber"`
		TxHash      common.Hash    `json:"transactionHash" gencodec:"required"`
		TxIndex     hexutil.Uint   `json:"transactionIndex"`
		BlockHash   common.Hash    `json:"blockHash"`
		Index       hexutil.Uint   `json:"logIndex"`
		Removed     bool           `json:"removed"`
	}

	type ErigonLog struct {
		Log Log `json:"log" gencoded:"required"`
		Timestamp hexutil.Uint64 `json:"timestamp"`
	}

	var enc Log
	enc.Address = l.Log.Address
	enc.Topics = l.Log.Topics
	enc.Data = l.Log.Data
	enc.BlockNumber = hexutil.Uint64(l.Log.BlockNumber)
	enc.TxHash = l.Log.TxHash
	enc.TxIndex = hexutil.Uint(l.Log.TxIndex)
	enc.BlockHash = l.Log.BlockHash
	enc.Index = hexutil.Uint(l.Log.Index)
	enc.Removed = l.Log.Removed

	var encodedErigonLog ErigonLog
	encodedErigonLog.Log = enc
	encodedErigonLog.Timestamp = hexutil.Uint64(l.Timestamp)


	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (l *ErigonLog) UnmarshalJSON(input []byte) error {
	type Log struct {
		Address     *common.Address `json:"address" gencodec:"required"`
		Topics      []common.Hash   `json:"topics" gencodec:"required"`
		Data        *hexutil.Bytes  `json:"data" gencodec:"required"`
		BlockNumber *hexutil.Uint64 `json:"blockNumber"`
		TxHash      *common.Hash    `json:"transactionHash" gencodec:"required"`
		TxIndex     *hexutil.Uint   `json:"transactionIndex"`
		BlockHash   *common.Hash    `json:"blockHash"`
		Index       *hexutil.Uint   `json:"logIndex"`
		Removed     *bool           `json:"removed"`
	}

	type ErigonLog struct {
		Log Log `json:"log" gencodec:"required"`
		Timestamp *hexutil.Uint64 `json:"timestamp"`
	}

	var dec ErigonLog
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Log.Address == nil {
		return errors.New("missing required field 'address' for Log")
	}
	l.Log.Address = *dec.Log.Address
	if dec.Log.Topics == nil {
		return errors.New("missing required field 'topics' for Log")
	}
	l.Log.Topics = dec.Log.Topics
	if dec.Log.Data == nil {
		return errors.New("missing required field 'data' for Log")
	}
	l.Log.Data = *dec.Log.Data
	if dec.Log.BlockNumber != nil {
		l.Log.BlockNumber = uint64(*dec.Log.BlockNumber)
	}

	if dec.Log.TxHash == nil {
		return errors.New("missing required field 'transactionHash' for Log")
	}
	l.Log.TxHash = *dec.Log.TxHash
	if dec.Log.TxIndex != nil {
		l.Log.TxIndex = uint(*dec.Log.TxIndex)
	}
	if dec.Log.BlockHash != nil {
		l.Log.BlockHash = *dec.Log.BlockHash
	}
	if dec.Log.Index != nil {
		l.Log.Index = uint(*dec.Log.Index)
	}
	if dec.Log.Removed != nil {
		l.Log.Removed = *dec.Log.Removed
	}

	if dec.Timestamp != nil {
		l.Timestamp = uint64(*dec.Timestamp)
	}
	
	return nil
}
