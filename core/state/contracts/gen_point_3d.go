// Code generated by abigen. DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"fmt"
	"math/big"
	"reflect"
	"strings"

	ethereum "github.com/erigontech/erigon"
	"github.com/erigontech/erigon-lib/common"
	"github.com/erigontech/erigon/execution/abi"
	"github.com/erigontech/erigon/execution/abi/bind"
	"github.com/erigontech/erigon/execution/types"
	"github.com/erigontech/erigon/p2p/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = fmt.Errorf
	_ = reflect.ValueOf
)

// Point3dABI is the input ABI used to generate the binding from.
const Point3dABI = "[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_y\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_z\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_pointId\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoordinates\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPointInfo\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointId\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"x\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"y\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"z\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// Point3dBin is the compiled bytecode used for deploying new contracts.
var Point3dBin = "0x6080604052348015600e575f5ffd5b50604051610208380380610208833981016040819052602b916052565b5f93909355600191909155600255600380546001600160a01b031916331790556004556084565b5f5f5f5f608085870312156064575f5ffd5b505082516020840151604085015160609095015191969095509092509050565b610177806100915f395ff3fe608060405234801561000f575f5ffd5b506004361061007a575f3560e01c8063a56dfe4a11610058578063a56dfe4a146100c5578063c45a0155146100ce578063c5d7802e146100f9578063fe13b0a614610102575f5ffd5b806308548d371461007e5780630c55699c1461009a578063750a4937146100a2575b5f5ffd5b61008760045481565b6040519081526020015b60405180910390f35b6100875f5481565b5f5460015460025460408051938452602084019290925290820152606001610091565b61008760015481565b6003546100e1906001600160a01b031681565b6040516001600160a01b039091168152602001610091565b61008760025481565b5f546001546002546004546003546040805195865260208601949094529284019190915260608301526001600160a01b0316608082015260a00161009156fea2646970667358221220bded7db8ba1d7b21fe41704d96e64aeeef69f3c50abf25c91e162f4c40055cda64736f6c634300081e0033"

// DeployPoint3d deploys a new Ethereum contract, binding an instance of Point3d to it.
func DeployPoint3d(auth *bind.TransactOpts, backend bind.ContractBackend, _x *big.Int, _y *big.Int, _z *big.Int, _pointId *big.Int) (common.Address, types.Transaction, *Point3d, error) {
	parsed, err := abi.JSON(strings.NewReader(Point3dABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(Point3dBin), backend, _x, _y, _z, _pointId)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Point3d{Point3dCaller: Point3dCaller{contract: contract}, Point3dTransactor: Point3dTransactor{contract: contract}, Point3dFilterer: Point3dFilterer{contract: contract}}, nil
}

// Point3d is an auto generated Go binding around an Ethereum contract.
type Point3d struct {
	Point3dCaller     // Read-only binding to the contract
	Point3dTransactor // Write-only binding to the contract
	Point3dFilterer   // Log filterer for contract events
}

// Point3dCaller is an auto generated read-only Go binding around an Ethereum contract.
type Point3dCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Point3dTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Point3dTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Point3dFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Point3dFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Point3dSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Point3dSession struct {
	Contract     *Point3d          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Point3dCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Point3dCallerSession struct {
	Contract *Point3dCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// Point3dTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Point3dTransactorSession struct {
	Contract     *Point3dTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// Point3dRaw is an auto generated low-level Go binding around an Ethereum contract.
type Point3dRaw struct {
	Contract *Point3d // Generic contract binding to access the raw methods on
}

// Point3dCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Point3dCallerRaw struct {
	Contract *Point3dCaller // Generic read-only contract binding to access the raw methods on
}

// Point3dTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Point3dTransactorRaw struct {
	Contract *Point3dTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPoint3d creates a new instance of Point3d, bound to a specific deployed contract.
func NewPoint3d(address common.Address, backend bind.ContractBackend) (*Point3d, error) {
	contract, err := bindPoint3d(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Point3d{Point3dCaller: Point3dCaller{contract: contract}, Point3dTransactor: Point3dTransactor{contract: contract}, Point3dFilterer: Point3dFilterer{contract: contract}}, nil
}

// NewPoint3dCaller creates a new read-only instance of Point3d, bound to a specific deployed contract.
func NewPoint3dCaller(address common.Address, caller bind.ContractCaller) (*Point3dCaller, error) {
	contract, err := bindPoint3d(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Point3dCaller{contract: contract}, nil
}

// NewPoint3dTransactor creates a new write-only instance of Point3d, bound to a specific deployed contract.
func NewPoint3dTransactor(address common.Address, transactor bind.ContractTransactor) (*Point3dTransactor, error) {
	contract, err := bindPoint3d(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Point3dTransactor{contract: contract}, nil
}

// NewPoint3dFilterer creates a new log filterer instance of Point3d, bound to a specific deployed contract.
func NewPoint3dFilterer(address common.Address, filterer bind.ContractFilterer) (*Point3dFilterer, error) {
	contract, err := bindPoint3d(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Point3dFilterer{contract: contract}, nil
}

// bindPoint3d binds a generic wrapper to an already deployed contract.
func bindPoint3d(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Point3dABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Point3d *Point3dRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Point3d.Contract.Point3dCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Point3d *Point3dRaw) Transfer(opts *bind.TransactOpts) (types.Transaction, error) {
	return _Point3d.Contract.Point3dTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Point3d *Point3dRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (types.Transaction, error) {
	return _Point3d.Contract.Point3dTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Point3d *Point3dCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Point3d.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Point3d *Point3dTransactorRaw) Transfer(opts *bind.TransactOpts) (types.Transaction, error) {
	return _Point3d.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Point3d *Point3dTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (types.Transaction, error) {
	return _Point3d.Contract.contract.Transact(opts, method, params...)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Point3d *Point3dCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Point3d.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Point3d *Point3dSession) Factory() (common.Address, error) {
	return _Point3d.Contract.Factory(&_Point3d.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Point3d *Point3dCallerSession) Factory() (common.Address, error) {
	return _Point3d.Contract.Factory(&_Point3d.CallOpts)
}

// GetCoordinates is a free data retrieval call binding the contract method 0x750a4937.
//
// Solidity: function getCoordinates() view returns(int256, int256, int256)
func (_Point3d *Point3dCaller) GetCoordinates(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _Point3d.contract.Call(opts, &out, "getCoordinates")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetCoordinates is a free data retrieval call binding the contract method 0x750a4937.
//
// Solidity: function getCoordinates() view returns(int256, int256, int256)
func (_Point3d *Point3dSession) GetCoordinates() (*big.Int, *big.Int, *big.Int, error) {
	return _Point3d.Contract.GetCoordinates(&_Point3d.CallOpts)
}

// GetCoordinates is a free data retrieval call binding the contract method 0x750a4937.
//
// Solidity: function getCoordinates() view returns(int256, int256, int256)
func (_Point3d *Point3dCallerSession) GetCoordinates() (*big.Int, *big.Int, *big.Int, error) {
	return _Point3d.Contract.GetCoordinates(&_Point3d.CallOpts)
}

// GetPointInfo is a free data retrieval call binding the contract method 0xfe13b0a6.
//
// Solidity: function getPointInfo() view returns(int256, int256, int256, int256, address)
func (_Point3d *Point3dCaller) GetPointInfo(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, *big.Int, common.Address, error) {
	var out []interface{}
	err := _Point3d.contract.Call(opts, &out, "getPointInfo")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	out4 := *abi.ConvertType(out[4], new(common.Address)).(*common.Address)

	return out0, out1, out2, out3, out4, err

}

// GetPointInfo is a free data retrieval call binding the contract method 0xfe13b0a6.
//
// Solidity: function getPointInfo() view returns(int256, int256, int256, int256, address)
func (_Point3d *Point3dSession) GetPointInfo() (*big.Int, *big.Int, *big.Int, *big.Int, common.Address, error) {
	return _Point3d.Contract.GetPointInfo(&_Point3d.CallOpts)
}

// GetPointInfo is a free data retrieval call binding the contract method 0xfe13b0a6.
//
// Solidity: function getPointInfo() view returns(int256, int256, int256, int256, address)
func (_Point3d *Point3dCallerSession) GetPointInfo() (*big.Int, *big.Int, *big.Int, *big.Int, common.Address, error) {
	return _Point3d.Contract.GetPointInfo(&_Point3d.CallOpts)
}

// PointId is a free data retrieval call binding the contract method 0x08548d37.
//
// Solidity: function pointId() view returns(int256)
func (_Point3d *Point3dCaller) PointId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Point3d.contract.Call(opts, &out, "pointId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PointId is a free data retrieval call binding the contract method 0x08548d37.
//
// Solidity: function pointId() view returns(int256)
func (_Point3d *Point3dSession) PointId() (*big.Int, error) {
	return _Point3d.Contract.PointId(&_Point3d.CallOpts)
}

// PointId is a free data retrieval call binding the contract method 0x08548d37.
//
// Solidity: function pointId() view returns(int256)
func (_Point3d *Point3dCallerSession) PointId() (*big.Int, error) {
	return _Point3d.Contract.PointId(&_Point3d.CallOpts)
}

// X is a free data retrieval call binding the contract method 0x0c55699c.
//
// Solidity: function x() view returns(int256)
func (_Point3d *Point3dCaller) X(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Point3d.contract.Call(opts, &out, "x")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// X is a free data retrieval call binding the contract method 0x0c55699c.
//
// Solidity: function x() view returns(int256)
func (_Point3d *Point3dSession) X() (*big.Int, error) {
	return _Point3d.Contract.X(&_Point3d.CallOpts)
}

// X is a free data retrieval call binding the contract method 0x0c55699c.
//
// Solidity: function x() view returns(int256)
func (_Point3d *Point3dCallerSession) X() (*big.Int, error) {
	return _Point3d.Contract.X(&_Point3d.CallOpts)
}

// Y is a free data retrieval call binding the contract method 0xa56dfe4a.
//
// Solidity: function y() view returns(int256)
func (_Point3d *Point3dCaller) Y(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Point3d.contract.Call(opts, &out, "y")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Y is a free data retrieval call binding the contract method 0xa56dfe4a.
//
// Solidity: function y() view returns(int256)
func (_Point3d *Point3dSession) Y() (*big.Int, error) {
	return _Point3d.Contract.Y(&_Point3d.CallOpts)
}

// Y is a free data retrieval call binding the contract method 0xa56dfe4a.
//
// Solidity: function y() view returns(int256)
func (_Point3d *Point3dCallerSession) Y() (*big.Int, error) {
	return _Point3d.Contract.Y(&_Point3d.CallOpts)
}

// Z is a free data retrieval call binding the contract method 0xc5d7802e.
//
// Solidity: function z() view returns(int256)
func (_Point3d *Point3dCaller) Z(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Point3d.contract.Call(opts, &out, "z")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Z is a free data retrieval call binding the contract method 0xc5d7802e.
//
// Solidity: function z() view returns(int256)
func (_Point3d *Point3dSession) Z() (*big.Int, error) {
	return _Point3d.Contract.Z(&_Point3d.CallOpts)
}

// Z is a free data retrieval call binding the contract method 0xc5d7802e.
//
// Solidity: function z() view returns(int256)
func (_Point3d *Point3dCallerSession) Z() (*big.Int, error) {
	return _Point3d.Contract.Z(&_Point3d.CallOpts)
}
