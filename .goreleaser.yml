project_name: erigon

release:
  disable: false
  draft: true
  prerelease: auto

builds:
  - id: darwin-amd64-erigon
    main: ./cmd/erigon
    binary: erigon
    goos: [ darwin ]
    goarch: [ amd64 ]
    env:
      - CC=o64-clang
      - CXX=o64-clang++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w

  - id: darwin-arm64
    main: ./cmd/erigon
    binary: erigon
    goos: [ darwin ]
    goarch: [ arm64 ]
    env:
      - CC=oa64-clang
      - CXX=oa64-clang++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w

  - id: linux-amd64-erigon
    main: ./cmd/erigon
    binary: erigon
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-abigen
    main: ./cmd/abigen
    binary: abigen
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-bootnode
    main: ./cmd/bootnode
    binary: bootnode
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-caplin-phase1
    main: ./cmd/caplin-phase1
    binary: caplin-phase1
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-caplin-regression
    main: ./cmd/caplin-regression
    binary: caplin-regression
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-devnet
    main: ./cmd/devnet
    binary: devnet
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-downloader
    main: ./cmd/downloader
    binary: downloader
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-evm
    main: ./cmd/evm
    binary: evm
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-hack
    main: ./cmd/hack
    binary: hack
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-integration
    main: ./cmd/integration
    binary: integration
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-observer
    main: ./cmd/observer
    binary: observer
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-pics
    main: ./cmd/pics
    binary: pics
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-rlpdump
    main: ./cmd/rlpdump
    binary: rlpdump
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-rpcdaemon
    main: ./cmd/rpcdaemon
    binary: rpcdaemon
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-rpctest
    main: ./cmd/rpctest
    binary: rpctest
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-sentinel
    main: ./cmd/sentinel
    binary: sentinel
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-sentry
    main: ./cmd/sentry
    binary: sentry
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-state
    main: ./cmd/state
    binary: state
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-txpool
    main: ./cmd/txpool
    binary: txpool
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-verkle
    main: ./cmd/verkle
    binary: verkle
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-erigon
    main: ./cmd/erigon
    binary: erigon
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-abigen
    main: ./cmd/abigen
    binary: abigen
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-bootnode
    main: ./cmd/bootnode
    binary: bootnode
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container


  - id: linux-arm64-caplin-phase1
    main: ./cmd/caplin-phase1
    binary: caplin-phase1
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-caplin-regression
    main: ./cmd/caplin-regression
    binary: caplin-regression
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-devnet
    main: ./cmd/devnet
    binary: devnet
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-downloader
    main: ./cmd/downloader
    binary: downloader
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-evm
    main: ./cmd/evm
    binary: evm
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-hack
    main: ./cmd/hack
    binary: hack
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-integration
    main: ./cmd/integration
    binary: integration
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-observer
    main: ./cmd/observer
    binary: observer
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-pics
    main: ./cmd/pics
    binary: pics
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-rlpdump
    main: ./cmd/rlpdump
    binary: rlpdump
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-rpcdaemon
    main: ./cmd/rpcdaemon
    binary: rpcdaemon
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-rpctest
    main: ./cmd/rpctest
    binary: rpctest
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-sentinel
    main: ./cmd/sentinel
    binary: sentinel
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-sentry
    main: ./cmd/sentry
    binary: sentry
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-state
    main: ./cmd/state
    binary: state
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-txpool
    main: ./cmd/txpool
    binary: txpool
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-verkle
    main: ./cmd/verkle
    binary: verkle
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: windows-amd64
    main: ./cmd/erigon
    binary: erigon
    goos: [ windows ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-w64-mingw32-gcc
      - CXX=x86_64-w64-mingw32-g++
    tags: [ nosqlite, noboltdb ]
    ldflags: -s -w

snapshot:
  name_template: "{{ .Tag }}.next"

dockers:
  - image_templates:
      - thorax/{{ .ProjectName }}:{{ .Version }}-amd64
      - ghcr.io/ledgerwatch/{{ .ProjectName }}:{{ .Version }}-amd64
    dockerfile: Dockerfile.release
    use: buildx
    skip_push: true
    goarch: amd64
    ids:
      - linux-amd64-erigon
      - linux-amd64-abigen
      - linux-amd64-caplin-phase1
      - linux-amd64-caplin-regression
      - linux-amd64-devnet
      - linux-amd64-downloader
      - linux-amd64-evm
      - linux-amd64-hack
      - linux-amd64-integration
      - linux-amd64-observer
      - linux-amd64-pics
      - linux-amd64-rpcdaemon
      - linux-amd64-rpctest
      - linux-amd64-sentinel
      - linux-amd64-sentry
      - linux-amd64-state
      - linux-amd64-txpool
      - linux-amd64-verkle
    build_flag_templates:
      - --platform=linux/amd64

  - image_templates:
      - thorax/{{ .ProjectName }}:{{ .Version }}-arm64
      - ghcr.io/ledgerwatch/{{ .ProjectName }}:{{ .Version }}-arm64
    dockerfile: Dockerfile.release
    skip_push: true
    use: buildx
    goarch: arm64
    ids:
      - linux-arm64-erigon
      - linux-arm64-abigen
      - linux-arm64-caplin-phase1
      - linux-arm64-caplin-regression
      - linux-arm64-devnet
      - linux-arm64-downloader
      - linux-arm64-evm
      - linux-arm64-hack
      - linux-arm64-integration
      - linux-arm64-observer
      - linux-arm64-pics
      - linux-arm64-rpcdaemon
      - linux-arm64-rpctest
      - linux-arm64-sentinel
      - linux-arm64-sentry
      - linux-arm64-state
      - linux-arm64-txpool
      - linux-arm64-verkle
    build_flag_templates:
      - --platform=linux/arm64/v8

docker_manifests:
  - name_template: thorax/{{ .ProjectName }}:{{ .Version }}
    skip_push: true
    image_templates:
      - thorax/{{ .ProjectName }}:{{ .Version }}-amd64
      - thorax/{{ .ProjectName }}:{{ .Version }}-arm64

  - name_template: ghcr.io/ledgerwatch/{{ .ProjectName }}:{{ .Version }}
    skip_push: true
    image_templates:
      - ghcr.io/ledgerwatch/{{ .ProjectName }}:{{ .Version }}-amd64
      - ghcr.io/ledgerwatch/{{ .ProjectName }}:{{ .Version }}-arm64

  - name_template: thorax/{{ .ProjectName }}:latest
    skip_push: true
    image_templates:
      - thorax/{{ .ProjectName }}:{{ .Version }}-amd64
      - thorax/{{ .ProjectName }}:{{ .Version }}-arm64

  - name_template: ghcr.io/ledgerwatch/{{ .ProjectName }}:latest
    skip_push: true
    image_templates:
      - ghcr.io/ledgerwatch/{{ .ProjectName }}:{{ .Version }}-amd64
      - ghcr.io/ledgerwatch/{{ .ProjectName }}:{{ .Version }}-arm64

announce:
  slack:
    enabled: false
    # The name of the channel that the user selected as a destination for webhook messages.
    channel: '#code-releases'

archives:
- id: erigon-multiple-build
  allow_different_binary_count: true

