version: '3.4'

# Basic erigon's service
x-erigon-service: &default-erigon-service
  build:
    context: ../../../
    dockerfile: Dockerfile
    args:
      UID: ${DOCKER_UID:-1000}
      GID: ${DOCKER_GID:-1000}
  user: ${DOCKER_UID:-1000}:${DOCKER_GID:-1000}
  volumes:
      - db-volume:/chain-db

services:
  # Needs access to EVMC_URL (canister http endpoint address)
  # Doesn't expose any ports
  # Writes data to db-volume
  blockimporter:
    <<: *default-erigon-service
    network_mode: host
    command: ["blockimporter", "--db", "/chain-db", "--evm", "${EVMC_URL:-http://localhost:8545}"]
    restart: unless-stopped

  # Reads data from db-volume
  # Exposes hhtp service on port 8555
  rpcdaemon:
    <<: *default-erigon-service
    # TODO: we don't need actually to use a host network here
    # But for some reason when using a separate bridge network `otterscan` was unable to connect to `rpcdaemon:8555`
    network_mode: host
    pid: service:blockimporter
    command: ["rpcdaemon", "--http.port", "8555", "--datadir", "/chain-db", "--http.corsdomain", "*", "--http.api=eth,erigon,ots"]
    restart: unless-stopped

  # Connects to `rpcdaemon:8555`, exposes 80 port
  otterscan:
    image: otterscan/otterscan:v1.29.0
    environment:
      ERIGON_URL: "http://localhost:8555"
    # TODO: we don't need actually to use a host network here
    # But for some reason when using a separate bridge network `otterscan` was unable to connect to `rpcdaemon:8555`
    network_mode: host
    # ports: ["80:${OTTERSCAN_PORT:-80}"]
    restart: unless-stopped

volumes:
  db-volume:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${BLOCKCHAIN_DB:-./db}