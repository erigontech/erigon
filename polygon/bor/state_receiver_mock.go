// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erigontech/erigon/polygon/bor (interfaces: StateReceiver)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./state_receiver_mock.go -package=bor . StateReceiver
//

// Package bor is a generated GoMock package.
package bor

import (
	reflect "reflect"

	consensus "github.com/erigontech/erigon/consensus"
	rlp "github.com/erigontech/erigon/rlp"
	gomock "go.uber.org/mock/gomock"
)

// MockStateReceiver is a mock of StateReceiver interface.
type MockStateReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockStateReceiverMockRecorder
}

// MockStateReceiverMockRecorder is the mock recorder for MockStateReceiver.
type MockStateReceiverMockRecorder struct {
	mock *MockStateReceiver
}

// NewMockStateReceiver creates a new mock instance.
func NewMockStateReceiver(ctrl *gomock.Controller) *MockStateReceiver {
	mock := &MockStateReceiver{ctrl: ctrl}
	mock.recorder = &MockStateReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateReceiver) EXPECT() *MockStateReceiverMockRecorder {
	return m.recorder
}

// CommitState mocks base method.
func (m *MockStateReceiver) CommitState(arg0 rlp.RawValue, arg1 consensus.SystemCall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitState indicates an expected call of CommitState.
func (mr *MockStateReceiverMockRecorder) CommitState(arg0, arg1 any) *MockStateReceiverCommitStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitState", reflect.TypeOf((*MockStateReceiver)(nil).CommitState), arg0, arg1)
	return &MockStateReceiverCommitStateCall{Call: call}
}

// MockStateReceiverCommitStateCall wrap *gomock.Call
type MockStateReceiverCommitStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateReceiverCommitStateCall) Return(arg0 error) *MockStateReceiverCommitStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateReceiverCommitStateCall) Do(f func(rlp.RawValue, consensus.SystemCall) error) *MockStateReceiverCommitStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateReceiverCommitStateCall) DoAndReturn(f func(rlp.RawValue, consensus.SystemCall) error) *MockStateReceiverCommitStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
