// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erigontech/erigon/polygon/bor (interfaces: bridgeReader)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./bridge_reader_mock.go -package=bor . bridgeReader
//

// Package bor is a generated GoMock package.
package bor

import (
	context "context"
	reflect "reflect"
	time "time"

	common "github.com/erigontech/erigon-lib/common"
	types "github.com/erigontech/erigon/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockbridgeReader is a mock of bridgeReader interface.
type MockbridgeReader struct {
	ctrl     *gomock.Controller
	recorder *MockbridgeReaderMockRecorder
	isgomock struct{}
}

// MockbridgeReaderMockRecorder is the mock recorder for MockbridgeReader.
type MockbridgeReaderMockRecorder struct {
	mock *MockbridgeReader
}

// NewMockbridgeReader creates a new mock instance.
func NewMockbridgeReader(ctrl *gomock.Controller) *MockbridgeReader {
	mock := &MockbridgeReader{ctrl: ctrl}
	mock.recorder = &MockbridgeReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbridgeReader) EXPECT() *MockbridgeReaderMockRecorder {
	return m.recorder
}

// EventTxnLookup mocks base method.
func (m *MockbridgeReader) EventTxnLookup(ctx context.Context, borTxHash common.Hash) (uint64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventTxnLookup", ctx, borTxHash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EventTxnLookup indicates an expected call of EventTxnLookup.
func (mr *MockbridgeReaderMockRecorder) EventTxnLookup(ctx, borTxHash any) *MockbridgeReaderEventTxnLookupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventTxnLookup", reflect.TypeOf((*MockbridgeReader)(nil).EventTxnLookup), ctx, borTxHash)
	return &MockbridgeReaderEventTxnLookupCall{Call: call}
}

// MockbridgeReaderEventTxnLookupCall wrap *gomock.Call
type MockbridgeReaderEventTxnLookupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockbridgeReaderEventTxnLookupCall) Return(arg0 uint64, arg1 bool, arg2 error) *MockbridgeReaderEventTxnLookupCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockbridgeReaderEventTxnLookupCall) Do(f func(context.Context, common.Hash) (uint64, bool, error)) *MockbridgeReaderEventTxnLookupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockbridgeReaderEventTxnLookupCall) DoAndReturn(f func(context.Context, common.Hash) (uint64, bool, error)) *MockbridgeReaderEventTxnLookupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Events mocks base method.
func (m *MockbridgeReader) Events(ctx context.Context, blockNum uint64) ([]*types.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", ctx, blockNum)
	ret0, _ := ret[0].([]*types.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Events indicates an expected call of Events.
func (mr *MockbridgeReaderMockRecorder) Events(ctx, blockNum any) *MockbridgeReaderEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockbridgeReader)(nil).Events), ctx, blockNum)
	return &MockbridgeReaderEventsCall{Call: call}
}

// MockbridgeReaderEventsCall wrap *gomock.Call
type MockbridgeReaderEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockbridgeReaderEventsCall) Return(arg0 []*types.Message, arg1 error) *MockbridgeReaderEventsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockbridgeReaderEventsCall) Do(f func(context.Context, uint64) ([]*types.Message, error)) *MockbridgeReaderEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockbridgeReaderEventsCall) DoAndReturn(f func(context.Context, uint64) ([]*types.Message, error)) *MockbridgeReaderEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EventsWithinTime mocks base method.
func (m *MockbridgeReader) EventsWithinTime(ctx context.Context, timeFrom, timeTo time.Time) ([]*types.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsWithinTime", ctx, timeFrom, timeTo)
	ret0, _ := ret[0].([]*types.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventsWithinTime indicates an expected call of EventsWithinTime.
func (mr *MockbridgeReaderMockRecorder) EventsWithinTime(ctx, timeFrom, timeTo any) *MockbridgeReaderEventsWithinTimeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsWithinTime", reflect.TypeOf((*MockbridgeReader)(nil).EventsWithinTime), ctx, timeFrom, timeTo)
	return &MockbridgeReaderEventsWithinTimeCall{Call: call}
}

// MockbridgeReaderEventsWithinTimeCall wrap *gomock.Call
type MockbridgeReaderEventsWithinTimeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockbridgeReaderEventsWithinTimeCall) Return(arg0 []*types.Message, arg1 error) *MockbridgeReaderEventsWithinTimeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockbridgeReaderEventsWithinTimeCall) Do(f func(context.Context, time.Time, time.Time) ([]*types.Message, error)) *MockbridgeReaderEventsWithinTimeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockbridgeReaderEventsWithinTimeCall) DoAndReturn(f func(context.Context, time.Time, time.Time) ([]*types.Message, error)) *MockbridgeReaderEventsWithinTimeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
