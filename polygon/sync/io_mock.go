// Code generated by MockGen. DO NOT EDIT.
// Source: io.go

// Package sync is a generated GoMock package.
package sync

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/ledgerwatch/erigon/core/types"
	heimdall "github.com/ledgerwatch/erigon/polygon/heimdall"
)

// MockHeaderIO is a mock of HeaderIO interface.
type MockHeaderIO struct {
	ctrl     *gomock.Controller
	recorder *MockHeaderIOMockRecorder
}

// MockHeaderIOMockRecorder is the mock recorder for MockHeaderIO.
type MockHeaderIOMockRecorder struct {
	mock *MockHeaderIO
}

// NewMockHeaderIO creates a new mock instance.
func NewMockHeaderIO(ctrl *gomock.Controller) *MockHeaderIO {
	mock := &MockHeaderIO{ctrl: ctrl}
	mock.recorder = &MockHeaderIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeaderIO) EXPECT() *MockHeaderIOMockRecorder {
	return m.recorder
}

// WriteHeaders mocks base method.
func (m *MockHeaderIO) WriteHeaders(headers []*types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteHeaders", headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteHeaders indicates an expected call of WriteHeaders.
func (mr *MockHeaderIOMockRecorder) WriteHeaders(headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeaders", reflect.TypeOf((*MockHeaderIO)(nil).WriteHeaders), headers)
}

// MockCheckpointIO is a mock of CheckpointIO interface.
type MockCheckpointIO struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointIOMockRecorder
}

// MockCheckpointIOMockRecorder is the mock recorder for MockCheckpointIO.
type MockCheckpointIOMockRecorder struct {
	mock *MockCheckpointIO
}

// NewMockCheckpointIO creates a new mock instance.
func NewMockCheckpointIO(ctrl *gomock.Controller) *MockCheckpointIO {
	mock := &MockCheckpointIO{ctrl: ctrl}
	mock.recorder = &MockCheckpointIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointIO) EXPECT() *MockCheckpointIOMockRecorder {
	return m.recorder
}

// LastCheckpointId mocks base method.
func (m *MockCheckpointIO) LastCheckpointId(ctx context.Context) (heimdall.CheckpointId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCheckpointId", ctx)
	ret0, _ := ret[0].(heimdall.CheckpointId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastCheckpointId indicates an expected call of LastCheckpointId.
func (mr *MockCheckpointIOMockRecorder) LastCheckpointId(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCheckpointId", reflect.TypeOf((*MockCheckpointIO)(nil).LastCheckpointId), ctx)
}

// ReadCheckpoint mocks base method.
func (m *MockCheckpointIO) ReadCheckpoint(ctx context.Context, checkpointId heimdall.CheckpointId) (*heimdall.Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCheckpoint", ctx, checkpointId)
	ret0, _ := ret[0].(*heimdall.Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCheckpoint indicates an expected call of ReadCheckpoint.
func (mr *MockCheckpointIOMockRecorder) ReadCheckpoint(ctx, checkpointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCheckpoint", reflect.TypeOf((*MockCheckpointIO)(nil).ReadCheckpoint), ctx, checkpointId)
}

// WriteCheckpoint mocks base method.
func (m *MockCheckpointIO) WriteCheckpoint(ctx context.Context, checkpoint *heimdall.Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCheckpoint", ctx, checkpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCheckpoint indicates an expected call of WriteCheckpoint.
func (mr *MockCheckpointIOMockRecorder) WriteCheckpoint(ctx, checkpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCheckpoint", reflect.TypeOf((*MockCheckpointIO)(nil).WriteCheckpoint), ctx, checkpoint)
}

// WriteHeaders mocks base method.
func (m *MockCheckpointIO) WriteHeaders(headers []*types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteHeaders", headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteHeaders indicates an expected call of WriteHeaders.
func (mr *MockCheckpointIOMockRecorder) WriteHeaders(headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeaders", reflect.TypeOf((*MockCheckpointIO)(nil).WriteHeaders), headers)
}

// MockMilestoneIO is a mock of MilestoneIO interface.
type MockMilestoneIO struct {
	ctrl     *gomock.Controller
	recorder *MockMilestoneIOMockRecorder
}

// MockMilestoneIOMockRecorder is the mock recorder for MockMilestoneIO.
type MockMilestoneIOMockRecorder struct {
	mock *MockMilestoneIO
}

// NewMockMilestoneIO creates a new mock instance.
func NewMockMilestoneIO(ctrl *gomock.Controller) *MockMilestoneIO {
	mock := &MockMilestoneIO{ctrl: ctrl}
	mock.recorder = &MockMilestoneIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMilestoneIO) EXPECT() *MockMilestoneIOMockRecorder {
	return m.recorder
}

// LastMilestoneId mocks base method.
func (m *MockMilestoneIO) LastMilestoneId(ctx context.Context) (heimdall.MilestoneId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastMilestoneId", ctx)
	ret0, _ := ret[0].(heimdall.MilestoneId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastMilestoneId indicates an expected call of LastMilestoneId.
func (mr *MockMilestoneIOMockRecorder) LastMilestoneId(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastMilestoneId", reflect.TypeOf((*MockMilestoneIO)(nil).LastMilestoneId), ctx)
}

// ReadMilestone mocks base method.
func (m *MockMilestoneIO) ReadMilestone(ctx context.Context, milestoneId heimdall.MilestoneId) (*heimdall.Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMilestone", ctx, milestoneId)
	ret0, _ := ret[0].(*heimdall.Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMilestone indicates an expected call of ReadMilestone.
func (mr *MockMilestoneIOMockRecorder) ReadMilestone(ctx, milestoneId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMilestone", reflect.TypeOf((*MockMilestoneIO)(nil).ReadMilestone), ctx, milestoneId)
}

// WriteHeaders mocks base method.
func (m *MockMilestoneIO) WriteHeaders(headers []*types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteHeaders", headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteHeaders indicates an expected call of WriteHeaders.
func (mr *MockMilestoneIOMockRecorder) WriteHeaders(headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeaders", reflect.TypeOf((*MockMilestoneIO)(nil).WriteHeaders), headers)
}

// WriteMilestone mocks base method.
func (m *MockMilestoneIO) WriteMilestone(ctx context.Context, milestone *heimdall.Milestone) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMilestone", ctx, milestone)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMilestone indicates an expected call of WriteMilestone.
func (mr *MockMilestoneIOMockRecorder) WriteMilestone(ctx, milestone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMilestone", reflect.TypeOf((*MockMilestoneIO)(nil).WriteMilestone), ctx, milestone)
}
