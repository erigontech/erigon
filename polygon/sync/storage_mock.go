// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage.go

// Package sync is a generated GoMock package.
package sync

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/ledgerwatch/erigon/core/types"
	heimdall "github.com/ledgerwatch/erigon/polygon/heimdall"
)

// MockHeaderStore is a mock of HeaderStore interface.
type MockHeaderStore struct {
	ctrl     *gomock.Controller
	recorder *MockHeaderStoreMockRecorder
}

// MockHeaderStoreMockRecorder is the mock recorder for MockHeaderStore.
type MockHeaderStoreMockRecorder struct {
	mock *MockHeaderStore
}

// NewMockHeaderStore creates a new mock instance.
func NewMockHeaderStore(ctrl *gomock.Controller) *MockHeaderStore {
	mock := &MockHeaderStore{ctrl: ctrl}
	mock.recorder = &MockHeaderStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeaderStore) EXPECT() *MockHeaderStoreMockRecorder {
	return m.recorder
}

// PutHeaders mocks base method.
func (m *MockHeaderStore) PutHeaders(headers []*types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutHeaders", headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutHeaders indicates an expected call of PutHeaders.
func (mr *MockHeaderStoreMockRecorder) PutHeaders(headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutHeaders", reflect.TypeOf((*MockHeaderStore)(nil).PutHeaders), headers)
}

// MockCheckpointStore is a mock of CheckpointStore interface.
type MockCheckpointStore struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointStoreMockRecorder
}

// MockCheckpointStoreMockRecorder is the mock recorder for MockCheckpointStore.
type MockCheckpointStoreMockRecorder struct {
	mock *MockCheckpointStore
}

// NewMockCheckpointStore creates a new mock instance.
func NewMockCheckpointStore(ctrl *gomock.Controller) *MockCheckpointStore {
	mock := &MockCheckpointStore{ctrl: ctrl}
	mock.recorder = &MockCheckpointStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointStore) EXPECT() *MockCheckpointStoreMockRecorder {
	return m.recorder
}

// GetCheckpoint mocks base method.
func (m *MockCheckpointStore) GetCheckpoint(ctx context.Context, checkpointId heimdall.CheckpointId) (*heimdall.Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckpoint", ctx, checkpointId)
	ret0, _ := ret[0].(*heimdall.Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckpoint indicates an expected call of GetCheckpoint.
func (mr *MockCheckpointStoreMockRecorder) GetCheckpoint(ctx, checkpointId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckpoint", reflect.TypeOf((*MockCheckpointStore)(nil).GetCheckpoint), ctx, checkpointId)
}

// LastCheckpointId mocks base method.
func (m *MockCheckpointStore) LastCheckpointId(ctx context.Context) (heimdall.CheckpointId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCheckpointId", ctx)
	ret0, _ := ret[0].(heimdall.CheckpointId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastCheckpointId indicates an expected call of LastCheckpointId.
func (mr *MockCheckpointStoreMockRecorder) LastCheckpointId(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCheckpointId", reflect.TypeOf((*MockCheckpointStore)(nil).LastCheckpointId), ctx)
}

// PutCheckpoint mocks base method.
func (m *MockCheckpointStore) PutCheckpoint(ctx context.Context, checkpointId heimdall.CheckpointId, checkpoint *heimdall.Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCheckpoint", ctx, checkpointId, checkpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCheckpoint indicates an expected call of PutCheckpoint.
func (mr *MockCheckpointStoreMockRecorder) PutCheckpoint(ctx, checkpointId, checkpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCheckpoint", reflect.TypeOf((*MockCheckpointStore)(nil).PutCheckpoint), ctx, checkpointId, checkpoint)
}

// PutHeaders mocks base method.
func (m *MockCheckpointStore) PutHeaders(headers []*types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutHeaders", headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutHeaders indicates an expected call of PutHeaders.
func (mr *MockCheckpointStoreMockRecorder) PutHeaders(headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutHeaders", reflect.TypeOf((*MockCheckpointStore)(nil).PutHeaders), headers)
}

// MockMilestoneStore is a mock of MilestoneStore interface.
type MockMilestoneStore struct {
	ctrl     *gomock.Controller
	recorder *MockMilestoneStoreMockRecorder
}

// MockMilestoneStoreMockRecorder is the mock recorder for MockMilestoneStore.
type MockMilestoneStoreMockRecorder struct {
	mock *MockMilestoneStore
}

// NewMockMilestoneStore creates a new mock instance.
func NewMockMilestoneStore(ctrl *gomock.Controller) *MockMilestoneStore {
	mock := &MockMilestoneStore{ctrl: ctrl}
	mock.recorder = &MockMilestoneStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMilestoneStore) EXPECT() *MockMilestoneStoreMockRecorder {
	return m.recorder
}

// GetMilestone mocks base method.
func (m *MockMilestoneStore) GetMilestone(ctx context.Context, milestoneId heimdall.MilestoneId) (*heimdall.Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMilestone", ctx, milestoneId)
	ret0, _ := ret[0].(*heimdall.Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMilestone indicates an expected call of GetMilestone.
func (mr *MockMilestoneStoreMockRecorder) GetMilestone(ctx, milestoneId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestone", reflect.TypeOf((*MockMilestoneStore)(nil).GetMilestone), ctx, milestoneId)
}

// LastMilestoneId mocks base method.
func (m *MockMilestoneStore) LastMilestoneId(ctx context.Context) (heimdall.MilestoneId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastMilestoneId", ctx)
	ret0, _ := ret[0].(heimdall.MilestoneId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastMilestoneId indicates an expected call of LastMilestoneId.
func (mr *MockMilestoneStoreMockRecorder) LastMilestoneId(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastMilestoneId", reflect.TypeOf((*MockMilestoneStore)(nil).LastMilestoneId), ctx)
}

// PutHeaders mocks base method.
func (m *MockMilestoneStore) PutHeaders(headers []*types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutHeaders", headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutHeaders indicates an expected call of PutHeaders.
func (mr *MockMilestoneStoreMockRecorder) PutHeaders(headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutHeaders", reflect.TypeOf((*MockMilestoneStore)(nil).PutHeaders), headers)
}

// PutMilestone mocks base method.
func (m *MockMilestoneStore) PutMilestone(ctx context.Context, milestoneId heimdall.MilestoneId, milestone *heimdall.Milestone) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMilestone", ctx, milestoneId, milestone)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMilestone indicates an expected call of PutMilestone.
func (mr *MockMilestoneStoreMockRecorder) PutMilestone(ctx, milestoneId, milestone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMilestone", reflect.TypeOf((*MockMilestoneStore)(nil).PutMilestone), ctx, milestoneId, milestone)
}
