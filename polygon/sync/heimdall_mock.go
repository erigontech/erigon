// Code generated by MockGen. DO NOT EDIT.
// Source: heimdall.go

// Package sync is a generated GoMock package.
package sync

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	heimdall "github.com/ledgerwatch/erigon/polygon/heimdall"
)

// MockHeimdall is a mock of Heimdall interface.
type MockHeimdall struct {
	ctrl     *gomock.Controller
	recorder *MockHeimdallMockRecorder
}

// MockHeimdallMockRecorder is the mock recorder for MockHeimdall.
type MockHeimdallMockRecorder struct {
	mock *MockHeimdall
}

// NewMockHeimdall creates a new mock instance.
func NewMockHeimdall(ctrl *gomock.Controller) *MockHeimdall {
	mock := &MockHeimdall{ctrl: ctrl}
	mock.recorder = &MockHeimdallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeimdall) EXPECT() *MockHeimdallMockRecorder {
	return m.recorder
}

// FetchCheckpoints mocks base method.
func (m *MockHeimdall) FetchCheckpoints(ctx context.Context, start uint64) (heimdall.HashAccumulators, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCheckpoints", ctx, start)
	ret0, _ := ret[0].(heimdall.HashAccumulators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCheckpoints indicates an expected call of FetchCheckpoints.
func (mr *MockHeimdallMockRecorder) FetchCheckpoints(ctx, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCheckpoints", reflect.TypeOf((*MockHeimdall)(nil).FetchCheckpoints), ctx, start)
}

// FetchMilestones mocks base method.
func (m *MockHeimdall) FetchMilestones(ctx context.Context, start uint64) (heimdall.HashAccumulators, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMilestones", ctx, start)
	ret0, _ := ret[0].(heimdall.HashAccumulators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMilestones indicates an expected call of FetchMilestones.
func (mr *MockHeimdallMockRecorder) FetchMilestones(ctx, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMilestones", reflect.TypeOf((*MockHeimdall)(nil).FetchMilestones), ctx, start)
}

// FetchSpans mocks base method.
func (m *MockHeimdall) FetchSpans(ctx context.Context, start uint64) ([]*heimdall.Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSpans", ctx, start)
	ret0, _ := ret[0].([]*heimdall.Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSpans indicates an expected call of FetchSpans.
func (mr *MockHeimdallMockRecorder) FetchSpans(ctx, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSpans", reflect.TypeOf((*MockHeimdall)(nil).FetchSpans), ctx, start)
}

// OnCheckpointEvent mocks base method.
func (m *MockHeimdall) OnCheckpointEvent(ctx context.Context, callback func(*heimdall.Checkpoint)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnCheckpointEvent", ctx, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnCheckpointEvent indicates an expected call of OnCheckpointEvent.
func (mr *MockHeimdallMockRecorder) OnCheckpointEvent(ctx, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnCheckpointEvent", reflect.TypeOf((*MockHeimdall)(nil).OnCheckpointEvent), ctx, callback)
}

// OnMilestoneEvent mocks base method.
func (m *MockHeimdall) OnMilestoneEvent(ctx context.Context, callback func(*heimdall.Milestone)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnMilestoneEvent", ctx, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnMilestoneEvent indicates an expected call of OnMilestoneEvent.
func (mr *MockHeimdallMockRecorder) OnMilestoneEvent(ctx, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMilestoneEvent", reflect.TypeOf((*MockHeimdall)(nil).OnMilestoneEvent), ctx, callback)
}

// OnSpanEvent mocks base method.
func (m *MockHeimdall) OnSpanEvent(ctx context.Context, callback func(*heimdall.Span)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSpanEvent", ctx, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnSpanEvent indicates an expected call of OnSpanEvent.
func (mr *MockHeimdallMockRecorder) OnSpanEvent(ctx, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSpanEvent", reflect.TypeOf((*MockHeimdall)(nil).OnSpanEvent), ctx, callback)
}
