// Code generated by MockGen. DO NOT EDIT.
// Source: ./heimdall_waypoints_fetcher.go
//
// Generated by this command:
//
//	mockgen -typed=true -source=./heimdall_waypoints_fetcher.go -destination=./heimdall_waypoints_fetcher_mock.go -package=sync
//

// Package sync is a generated GoMock package.
package sync

import (
	context "context"
	reflect "reflect"
	
	gomock "go.uber.org/mock/gomock"

	heimdall "github.com/erigontech/erigon/polygon/heimdall"
)

// MockheimdallWaypointsFetcher is a mock of heimdallWaypointsFetcher interface.
type MockheimdallWaypointsFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockheimdallWaypointsFetcherMockRecorder
}

// MockheimdallWaypointsFetcherMockRecorder is the mock recorder for MockheimdallWaypointsFetcher.
type MockheimdallWaypointsFetcherMockRecorder struct {
	mock *MockheimdallWaypointsFetcher
}

// NewMockheimdallWaypointsFetcher creates a new mock instance.
func NewMockheimdallWaypointsFetcher(ctrl *gomock.Controller) *MockheimdallWaypointsFetcher {
	mock := &MockheimdallWaypointsFetcher{ctrl: ctrl}
	mock.recorder = &MockheimdallWaypointsFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockheimdallWaypointsFetcher) EXPECT() *MockheimdallWaypointsFetcherMockRecorder {
	return m.recorder
}

// FetchCheckpointsFromBlock mocks base method.
func (m *MockheimdallWaypointsFetcher) FetchCheckpointsFromBlock(ctx context.Context, startBlock uint64) (heimdall.Waypoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCheckpointsFromBlock", ctx, startBlock)
	ret0, _ := ret[0].(heimdall.Waypoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCheckpointsFromBlock indicates an expected call of FetchCheckpointsFromBlock.
func (mr *MockheimdallWaypointsFetcherMockRecorder) FetchCheckpointsFromBlock(ctx, startBlock any) *MockheimdallWaypointsFetcherFetchCheckpointsFromBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCheckpointsFromBlock", reflect.TypeOf((*MockheimdallWaypointsFetcher)(nil).FetchCheckpointsFromBlock), ctx, startBlock)
	return &MockheimdallWaypointsFetcherFetchCheckpointsFromBlockCall{Call: call}
}

// MockheimdallWaypointsFetcherFetchCheckpointsFromBlockCall wrap *gomock.Call
type MockheimdallWaypointsFetcherFetchCheckpointsFromBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockheimdallWaypointsFetcherFetchCheckpointsFromBlockCall) Return(arg0 heimdall.Waypoints, arg1 error) *MockheimdallWaypointsFetcherFetchCheckpointsFromBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockheimdallWaypointsFetcherFetchCheckpointsFromBlockCall) Do(f func(context.Context, uint64) (heimdall.Waypoints, error)) *MockheimdallWaypointsFetcherFetchCheckpointsFromBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockheimdallWaypointsFetcherFetchCheckpointsFromBlockCall) DoAndReturn(f func(context.Context, uint64) (heimdall.Waypoints, error)) *MockheimdallWaypointsFetcherFetchCheckpointsFromBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchMilestonesFromBlock mocks base method.
func (m *MockheimdallWaypointsFetcher) FetchMilestonesFromBlock(ctx context.Context, startBlock uint64) (heimdall.Waypoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMilestonesFromBlock", ctx, startBlock)
	ret0, _ := ret[0].(heimdall.Waypoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMilestonesFromBlock indicates an expected call of FetchMilestonesFromBlock.
func (mr *MockheimdallWaypointsFetcherMockRecorder) FetchMilestonesFromBlock(ctx, startBlock any) *MockheimdallWaypointsFetcherFetchMilestonesFromBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMilestonesFromBlock", reflect.TypeOf((*MockheimdallWaypointsFetcher)(nil).FetchMilestonesFromBlock), ctx, startBlock)
	return &MockheimdallWaypointsFetcherFetchMilestonesFromBlockCall{Call: call}
}

// MockheimdallWaypointsFetcherFetchMilestonesFromBlockCall wrap *gomock.Call
type MockheimdallWaypointsFetcherFetchMilestonesFromBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockheimdallWaypointsFetcherFetchMilestonesFromBlockCall) Return(arg0 heimdall.Waypoints, arg1 error) *MockheimdallWaypointsFetcherFetchMilestonesFromBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockheimdallWaypointsFetcherFetchMilestonesFromBlockCall) Do(f func(context.Context, uint64) (heimdall.Waypoints, error)) *MockheimdallWaypointsFetcherFetchMilestonesFromBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockheimdallWaypointsFetcherFetchMilestonesFromBlockCall) DoAndReturn(f func(context.Context, uint64) (heimdall.Waypoints, error)) *MockheimdallWaypointsFetcherFetchMilestonesFromBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
