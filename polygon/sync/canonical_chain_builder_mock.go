// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ledgerwatch/erigon/polygon/sync (interfaces: CanonicalChainBuilder)
//
// Generated by this command:
//
//	mockgen -destination=./canonical_chain_builder_mock.go -package=sync . CanonicalChainBuilder
//

// Package sync is a generated GoMock package.
package sync

import (
	reflect "reflect"

	common "github.com/ledgerwatch/erigon-lib/common"
	types "github.com/ledgerwatch/erigon/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockCanonicalChainBuilder is a mock of CanonicalChainBuilder interface.
type MockCanonicalChainBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockCanonicalChainBuilderMockRecorder
}

// MockCanonicalChainBuilderMockRecorder is the mock recorder for MockCanonicalChainBuilder.
type MockCanonicalChainBuilderMockRecorder struct {
	mock *MockCanonicalChainBuilder
}

// NewMockCanonicalChainBuilder creates a new mock instance.
func NewMockCanonicalChainBuilder(ctrl *gomock.Controller) *MockCanonicalChainBuilder {
	mock := &MockCanonicalChainBuilder{ctrl: ctrl}
	mock.recorder = &MockCanonicalChainBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCanonicalChainBuilder) EXPECT() *MockCanonicalChainBuilderMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockCanonicalChainBuilder) Connect(arg0 []*types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockCanonicalChainBuilderMockRecorder) Connect(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockCanonicalChainBuilder)(nil).Connect), arg0)
}

// ContainsHash mocks base method.
func (m *MockCanonicalChainBuilder) ContainsHash(arg0 common.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsHash", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ContainsHash indicates an expected call of ContainsHash.
func (mr *MockCanonicalChainBuilderMockRecorder) ContainsHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsHash", reflect.TypeOf((*MockCanonicalChainBuilder)(nil).ContainsHash), arg0)
}

// HeadersInRange mocks base method.
func (m *MockCanonicalChainBuilder) HeadersInRange(arg0, arg1 uint64) []*types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadersInRange", arg0, arg1)
	ret0, _ := ret[0].([]*types.Header)
	return ret0
}

// HeadersInRange indicates an expected call of HeadersInRange.
func (mr *MockCanonicalChainBuilderMockRecorder) HeadersInRange(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadersInRange", reflect.TypeOf((*MockCanonicalChainBuilder)(nil).HeadersInRange), arg0, arg1)
}

// Prune mocks base method.
func (m *MockCanonicalChainBuilder) Prune(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prune", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prune indicates an expected call of Prune.
func (mr *MockCanonicalChainBuilderMockRecorder) Prune(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockCanonicalChainBuilder)(nil).Prune), arg0)
}

// Reset mocks base method.
func (m *MockCanonicalChainBuilder) Reset(arg0 *types.Header) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", arg0)
}

// Reset indicates an expected call of Reset.
func (mr *MockCanonicalChainBuilderMockRecorder) Reset(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockCanonicalChainBuilder)(nil).Reset), arg0)
}

// Root mocks base method.
func (m *MockCanonicalChainBuilder) Root() *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// Root indicates an expected call of Root.
func (mr *MockCanonicalChainBuilderMockRecorder) Root() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockCanonicalChainBuilder)(nil).Root))
}

// Tip mocks base method.
func (m *MockCanonicalChainBuilder) Tip() *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tip")
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// Tip indicates an expected call of Tip.
func (mr *MockCanonicalChainBuilderMockRecorder) Tip() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tip", reflect.TypeOf((*MockCanonicalChainBuilder)(nil).Tip))
}
