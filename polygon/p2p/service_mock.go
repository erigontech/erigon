// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -typed=true -source=./service.go -destination=./service_mock.go -package=p2p . Service
//

// Package p2p is a generated GoMock package.
package p2p

import (
	context "context"
	reflect "reflect"

	sentry "github.com/ledgerwatch/erigon-lib/gointerfaces/sentry"
	types "github.com/ledgerwatch/erigon/core/types"
	eth "github.com/ledgerwatch/erigon/eth/protocols/eth"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BlockNumMissing mocks base method.
func (m *MockService) BlockNumMissing(peerId *PeerId, blockNum uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BlockNumMissing", peerId, blockNum)
}

// BlockNumMissing indicates an expected call of BlockNumMissing.
func (mr *MockServiceMockRecorder) BlockNumMissing(peerId, blockNum any) *MockServiceBlockNumMissingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockNumMissing", reflect.TypeOf((*MockService)(nil).BlockNumMissing), peerId, blockNum)
	return &MockServiceBlockNumMissingCall{Call: call}
}

// MockServiceBlockNumMissingCall wrap *gomock.Call
type MockServiceBlockNumMissingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceBlockNumMissingCall) Return() *MockServiceBlockNumMissingCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceBlockNumMissingCall) Do(f func(*PeerId, uint64)) *MockServiceBlockNumMissingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceBlockNumMissingCall) DoAndReturn(f func(*PeerId, uint64)) *MockServiceBlockNumMissingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockNumPresent mocks base method.
func (m *MockService) BlockNumPresent(peerId *PeerId, blockNum uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BlockNumPresent", peerId, blockNum)
}

// BlockNumPresent indicates an expected call of BlockNumPresent.
func (mr *MockServiceMockRecorder) BlockNumPresent(peerId, blockNum any) *MockServiceBlockNumPresentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockNumPresent", reflect.TypeOf((*MockService)(nil).BlockNumPresent), peerId, blockNum)
	return &MockServiceBlockNumPresentCall{Call: call}
}

// MockServiceBlockNumPresentCall wrap *gomock.Call
type MockServiceBlockNumPresentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceBlockNumPresentCall) Return() *MockServiceBlockNumPresentCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceBlockNumPresentCall) Do(f func(*PeerId, uint64)) *MockServiceBlockNumPresentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceBlockNumPresentCall) DoAndReturn(f func(*PeerId, uint64)) *MockServiceBlockNumPresentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchBlocks mocks base method.
func (m *MockService) FetchBlocks(ctx context.Context, start, end uint64, peerId *PeerId) (FetcherResponse[[]*types.Block], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBlocks", ctx, start, end, peerId)
	ret0, _ := ret[0].(FetcherResponse[[]*types.Block])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBlocks indicates an expected call of FetchBlocks.
func (mr *MockServiceMockRecorder) FetchBlocks(ctx, start, end, peerId any) *MockServiceFetchBlocksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBlocks", reflect.TypeOf((*MockService)(nil).FetchBlocks), ctx, start, end, peerId)
	return &MockServiceFetchBlocksCall{Call: call}
}

// MockServiceFetchBlocksCall wrap *gomock.Call
type MockServiceFetchBlocksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFetchBlocksCall) Return(arg0 FetcherResponse[[]*types.Block], arg1 error) *MockServiceFetchBlocksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFetchBlocksCall) Do(f func(context.Context, uint64, uint64, *PeerId) (FetcherResponse[[]*types.Block], error)) *MockServiceFetchBlocksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFetchBlocksCall) DoAndReturn(f func(context.Context, uint64, uint64, *PeerId) (FetcherResponse[[]*types.Block], error)) *MockServiceFetchBlocksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchBodies mocks base method.
func (m *MockService) FetchBodies(ctx context.Context, headers []*types.Header, peerId *PeerId) (FetcherResponse[[]*types.Body], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBodies", ctx, headers, peerId)
	ret0, _ := ret[0].(FetcherResponse[[]*types.Body])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBodies indicates an expected call of FetchBodies.
func (mr *MockServiceMockRecorder) FetchBodies(ctx, headers, peerId any) *MockServiceFetchBodiesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBodies", reflect.TypeOf((*MockService)(nil).FetchBodies), ctx, headers, peerId)
	return &MockServiceFetchBodiesCall{Call: call}
}

// MockServiceFetchBodiesCall wrap *gomock.Call
type MockServiceFetchBodiesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFetchBodiesCall) Return(arg0 FetcherResponse[[]*types.Body], arg1 error) *MockServiceFetchBodiesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFetchBodiesCall) Do(f func(context.Context, []*types.Header, *PeerId) (FetcherResponse[[]*types.Body], error)) *MockServiceFetchBodiesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFetchBodiesCall) DoAndReturn(f func(context.Context, []*types.Header, *PeerId) (FetcherResponse[[]*types.Body], error)) *MockServiceFetchBodiesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchHeaders mocks base method.
func (m *MockService) FetchHeaders(ctx context.Context, start, end uint64, peerId *PeerId) (FetcherResponse[[]*types.Header], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHeaders", ctx, start, end, peerId)
	ret0, _ := ret[0].(FetcherResponse[[]*types.Header])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchHeaders indicates an expected call of FetchHeaders.
func (mr *MockServiceMockRecorder) FetchHeaders(ctx, start, end, peerId any) *MockServiceFetchHeadersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHeaders", reflect.TypeOf((*MockService)(nil).FetchHeaders), ctx, start, end, peerId)
	return &MockServiceFetchHeadersCall{Call: call}
}

// MockServiceFetchHeadersCall wrap *gomock.Call
type MockServiceFetchHeadersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFetchHeadersCall) Return(arg0 FetcherResponse[[]*types.Header], arg1 error) *MockServiceFetchHeadersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFetchHeadersCall) Do(f func(context.Context, uint64, uint64, *PeerId) (FetcherResponse[[]*types.Header], error)) *MockServiceFetchHeadersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFetchHeadersCall) DoAndReturn(f func(context.Context, uint64, uint64, *PeerId) (FetcherResponse[[]*types.Header], error)) *MockServiceFetchHeadersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPeersMayHaveBlockNum mocks base method.
func (m *MockService) ListPeersMayHaveBlockNum(blockNum uint64) []*PeerId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPeersMayHaveBlockNum", blockNum)
	ret0, _ := ret[0].([]*PeerId)
	return ret0
}

// ListPeersMayHaveBlockNum indicates an expected call of ListPeersMayHaveBlockNum.
func (mr *MockServiceMockRecorder) ListPeersMayHaveBlockNum(blockNum any) *MockServiceListPeersMayHaveBlockNumCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPeersMayHaveBlockNum", reflect.TypeOf((*MockService)(nil).ListPeersMayHaveBlockNum), blockNum)
	return &MockServiceListPeersMayHaveBlockNumCall{Call: call}
}

// MockServiceListPeersMayHaveBlockNumCall wrap *gomock.Call
type MockServiceListPeersMayHaveBlockNumCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListPeersMayHaveBlockNumCall) Return(arg0 []*PeerId) *MockServiceListPeersMayHaveBlockNumCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListPeersMayHaveBlockNumCall) Do(f func(uint64) []*PeerId) *MockServiceListPeersMayHaveBlockNumCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListPeersMayHaveBlockNumCall) DoAndReturn(f func(uint64) []*PeerId) *MockServiceListPeersMayHaveBlockNumCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MaxPeers mocks base method.
func (m *MockService) MaxPeers() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxPeers")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxPeers indicates an expected call of MaxPeers.
func (mr *MockServiceMockRecorder) MaxPeers() *MockServiceMaxPeersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxPeers", reflect.TypeOf((*MockService)(nil).MaxPeers))
	return &MockServiceMaxPeersCall{Call: call}
}

// MockServiceMaxPeersCall wrap *gomock.Call
type MockServiceMaxPeersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceMaxPeersCall) Return(arg0 int) *MockServiceMaxPeersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceMaxPeersCall) Do(f func() int) *MockServiceMaxPeersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceMaxPeersCall) DoAndReturn(f func() int) *MockServiceMaxPeersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PeerConnected mocks base method.
func (m *MockService) PeerConnected(peerId *PeerId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PeerConnected", peerId)
}

// PeerConnected indicates an expected call of PeerConnected.
func (mr *MockServiceMockRecorder) PeerConnected(peerId any) *MockServicePeerConnectedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerConnected", reflect.TypeOf((*MockService)(nil).PeerConnected), peerId)
	return &MockServicePeerConnectedCall{Call: call}
}

// MockServicePeerConnectedCall wrap *gomock.Call
type MockServicePeerConnectedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServicePeerConnectedCall) Return() *MockServicePeerConnectedCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServicePeerConnectedCall) Do(f func(*PeerId)) *MockServicePeerConnectedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServicePeerConnectedCall) DoAndReturn(f func(*PeerId)) *MockServicePeerConnectedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PeerDisconnected mocks base method.
func (m *MockService) PeerDisconnected(peerId *PeerId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PeerDisconnected", peerId)
}

// PeerDisconnected indicates an expected call of PeerDisconnected.
func (mr *MockServiceMockRecorder) PeerDisconnected(peerId any) *MockServicePeerDisconnectedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerDisconnected", reflect.TypeOf((*MockService)(nil).PeerDisconnected), peerId)
	return &MockServicePeerDisconnectedCall{Call: call}
}

// MockServicePeerDisconnectedCall wrap *gomock.Call
type MockServicePeerDisconnectedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServicePeerDisconnectedCall) Return() *MockServicePeerDisconnectedCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServicePeerDisconnectedCall) Do(f func(*PeerId)) *MockServicePeerDisconnectedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServicePeerDisconnectedCall) DoAndReturn(f func(*PeerId)) *MockServicePeerDisconnectedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Penalize mocks base method.
func (m *MockService) Penalize(ctx context.Context, peerId *PeerId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Penalize", ctx, peerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Penalize indicates an expected call of Penalize.
func (mr *MockServiceMockRecorder) Penalize(ctx, peerId any) *MockServicePenalizeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Penalize", reflect.TypeOf((*MockService)(nil).Penalize), ctx, peerId)
	return &MockServicePenalizeCall{Call: call}
}

// MockServicePenalizeCall wrap *gomock.Call
type MockServicePenalizeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServicePenalizeCall) Return(arg0 error) *MockServicePenalizeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServicePenalizeCall) Do(f func(context.Context, *PeerId) error) *MockServicePenalizeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServicePenalizeCall) DoAndReturn(f func(context.Context, *PeerId) error) *MockServicePenalizeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterBlockBodiesObserver mocks base method.
func (m *MockService) RegisterBlockBodiesObserver(observer MessageObserver[*DecodedInboundMessage[*eth.BlockBodiesPacket66]]) UnregisterFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBlockBodiesObserver", observer)
	ret0, _ := ret[0].(UnregisterFunc)
	return ret0
}

// RegisterBlockBodiesObserver indicates an expected call of RegisterBlockBodiesObserver.
func (mr *MockServiceMockRecorder) RegisterBlockBodiesObserver(observer any) *MockServiceRegisterBlockBodiesObserverCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBlockBodiesObserver", reflect.TypeOf((*MockService)(nil).RegisterBlockBodiesObserver), observer)
	return &MockServiceRegisterBlockBodiesObserverCall{Call: call}
}

// MockServiceRegisterBlockBodiesObserverCall wrap *gomock.Call
type MockServiceRegisterBlockBodiesObserverCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceRegisterBlockBodiesObserverCall) Return(arg0 UnregisterFunc) *MockServiceRegisterBlockBodiesObserverCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceRegisterBlockBodiesObserverCall) Do(f func(MessageObserver[*DecodedInboundMessage[*eth.BlockBodiesPacket66]]) UnregisterFunc) *MockServiceRegisterBlockBodiesObserverCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceRegisterBlockBodiesObserverCall) DoAndReturn(f func(MessageObserver[*DecodedInboundMessage[*eth.BlockBodiesPacket66]]) UnregisterFunc) *MockServiceRegisterBlockBodiesObserverCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterBlockHeadersObserver mocks base method.
func (m *MockService) RegisterBlockHeadersObserver(observer MessageObserver[*DecodedInboundMessage[*eth.BlockHeadersPacket66]]) UnregisterFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBlockHeadersObserver", observer)
	ret0, _ := ret[0].(UnregisterFunc)
	return ret0
}

// RegisterBlockHeadersObserver indicates an expected call of RegisterBlockHeadersObserver.
func (mr *MockServiceMockRecorder) RegisterBlockHeadersObserver(observer any) *MockServiceRegisterBlockHeadersObserverCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBlockHeadersObserver", reflect.TypeOf((*MockService)(nil).RegisterBlockHeadersObserver), observer)
	return &MockServiceRegisterBlockHeadersObserverCall{Call: call}
}

// MockServiceRegisterBlockHeadersObserverCall wrap *gomock.Call
type MockServiceRegisterBlockHeadersObserverCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceRegisterBlockHeadersObserverCall) Return(arg0 UnregisterFunc) *MockServiceRegisterBlockHeadersObserverCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceRegisterBlockHeadersObserverCall) Do(f func(MessageObserver[*DecodedInboundMessage[*eth.BlockHeadersPacket66]]) UnregisterFunc) *MockServiceRegisterBlockHeadersObserverCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceRegisterBlockHeadersObserverCall) DoAndReturn(f func(MessageObserver[*DecodedInboundMessage[*eth.BlockHeadersPacket66]]) UnregisterFunc) *MockServiceRegisterBlockHeadersObserverCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterNewBlockHashesObserver mocks base method.
func (m *MockService) RegisterNewBlockHashesObserver(observer MessageObserver[*DecodedInboundMessage[*eth.NewBlockHashesPacket]]) UnregisterFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNewBlockHashesObserver", observer)
	ret0, _ := ret[0].(UnregisterFunc)
	return ret0
}

// RegisterNewBlockHashesObserver indicates an expected call of RegisterNewBlockHashesObserver.
func (mr *MockServiceMockRecorder) RegisterNewBlockHashesObserver(observer any) *MockServiceRegisterNewBlockHashesObserverCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNewBlockHashesObserver", reflect.TypeOf((*MockService)(nil).RegisterNewBlockHashesObserver), observer)
	return &MockServiceRegisterNewBlockHashesObserverCall{Call: call}
}

// MockServiceRegisterNewBlockHashesObserverCall wrap *gomock.Call
type MockServiceRegisterNewBlockHashesObserverCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceRegisterNewBlockHashesObserverCall) Return(arg0 UnregisterFunc) *MockServiceRegisterNewBlockHashesObserverCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceRegisterNewBlockHashesObserverCall) Do(f func(MessageObserver[*DecodedInboundMessage[*eth.NewBlockHashesPacket]]) UnregisterFunc) *MockServiceRegisterNewBlockHashesObserverCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceRegisterNewBlockHashesObserverCall) DoAndReturn(f func(MessageObserver[*DecodedInboundMessage[*eth.NewBlockHashesPacket]]) UnregisterFunc) *MockServiceRegisterNewBlockHashesObserverCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterNewBlockObserver mocks base method.
func (m *MockService) RegisterNewBlockObserver(observer MessageObserver[*DecodedInboundMessage[*eth.NewBlockPacket]]) UnregisterFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNewBlockObserver", observer)
	ret0, _ := ret[0].(UnregisterFunc)
	return ret0
}

// RegisterNewBlockObserver indicates an expected call of RegisterNewBlockObserver.
func (mr *MockServiceMockRecorder) RegisterNewBlockObserver(observer any) *MockServiceRegisterNewBlockObserverCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNewBlockObserver", reflect.TypeOf((*MockService)(nil).RegisterNewBlockObserver), observer)
	return &MockServiceRegisterNewBlockObserverCall{Call: call}
}

// MockServiceRegisterNewBlockObserverCall wrap *gomock.Call
type MockServiceRegisterNewBlockObserverCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceRegisterNewBlockObserverCall) Return(arg0 UnregisterFunc) *MockServiceRegisterNewBlockObserverCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceRegisterNewBlockObserverCall) Do(f func(MessageObserver[*DecodedInboundMessage[*eth.NewBlockPacket]]) UnregisterFunc) *MockServiceRegisterNewBlockObserverCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceRegisterNewBlockObserverCall) DoAndReturn(f func(MessageObserver[*DecodedInboundMessage[*eth.NewBlockPacket]]) UnregisterFunc) *MockServiceRegisterNewBlockObserverCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterPeerEventObserver mocks base method.
func (m *MockService) RegisterPeerEventObserver(observer MessageObserver[*sentry.PeerEvent]) UnregisterFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPeerEventObserver", observer)
	ret0, _ := ret[0].(UnregisterFunc)
	return ret0
}

// RegisterPeerEventObserver indicates an expected call of RegisterPeerEventObserver.
func (mr *MockServiceMockRecorder) RegisterPeerEventObserver(observer any) *MockServiceRegisterPeerEventObserverCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPeerEventObserver", reflect.TypeOf((*MockService)(nil).RegisterPeerEventObserver), observer)
	return &MockServiceRegisterPeerEventObserverCall{Call: call}
}

// MockServiceRegisterPeerEventObserverCall wrap *gomock.Call
type MockServiceRegisterPeerEventObserverCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceRegisterPeerEventObserverCall) Return(arg0 UnregisterFunc) *MockServiceRegisterPeerEventObserverCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceRegisterPeerEventObserverCall) Do(f func(MessageObserver[*sentry.PeerEvent]) UnregisterFunc) *MockServiceRegisterPeerEventObserverCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceRegisterPeerEventObserverCall) DoAndReturn(f func(MessageObserver[*sentry.PeerEvent]) UnregisterFunc) *MockServiceRegisterPeerEventObserverCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Run mocks base method.
func (m *MockService) Run(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx)
}

// Run indicates an expected call of Run.
func (mr *MockServiceMockRecorder) Run(ctx any) *MockServiceRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockService)(nil).Run), ctx)
	return &MockServiceRunCall{Call: call}
}

// MockServiceRunCall wrap *gomock.Call
type MockServiceRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceRunCall) Return() *MockServiceRunCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceRunCall) Do(f func(context.Context)) *MockServiceRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceRunCall) DoAndReturn(f func(context.Context)) *MockServiceRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
