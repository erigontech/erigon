// Code generated by MockGen. DO NOT EDIT.
// Source: ./store.go
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./store_mock.go -package=heimdall -source=./store.go
//

// Package heimdall is a generated GoMock package.
package heimdall

import (
	context "context"
	reflect "reflect"

	common "github.com/ledgerwatch/erigon-lib/common"
	kv "github.com/ledgerwatch/erigon-lib/kv"
	rlp "github.com/ledgerwatch/erigon/rlp"
	gomock "go.uber.org/mock/gomock"
)

// MockSpanReader is a mock of SpanReader interface.
type MockSpanReader struct {
	ctrl     *gomock.Controller
	recorder *MockSpanReaderMockRecorder
}

// MockSpanReaderMockRecorder is the mock recorder for MockSpanReader.
type MockSpanReaderMockRecorder struct {
	mock *MockSpanReader
}

// NewMockSpanReader creates a new mock instance.
func NewMockSpanReader(ctrl *gomock.Controller) *MockSpanReader {
	mock := &MockSpanReader{ctrl: ctrl}
	mock.recorder = &MockSpanReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpanReader) EXPECT() *MockSpanReaderMockRecorder {
	return m.recorder
}

// GetSpan mocks base method.
func (m *MockSpanReader) GetSpan(ctx context.Context, spanId SpanId) (*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpan", ctx, spanId)
	ret0, _ := ret[0].(*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpan indicates an expected call of GetSpan.
func (mr *MockSpanReaderMockRecorder) GetSpan(ctx, spanId any) *MockSpanReaderGetSpanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpan", reflect.TypeOf((*MockSpanReader)(nil).GetSpan), ctx, spanId)
	return &MockSpanReaderGetSpanCall{Call: call}
}

// MockSpanReaderGetSpanCall wrap *gomock.Call
type MockSpanReaderGetSpanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSpanReaderGetSpanCall) Return(arg0 *Span, arg1 error) *MockSpanReaderGetSpanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSpanReaderGetSpanCall) Do(f func(context.Context, SpanId) (*Span, error)) *MockSpanReaderGetSpanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSpanReaderGetSpanCall) DoAndReturn(f func(context.Context, SpanId) (*Span, error)) *MockSpanReaderGetSpanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastSpanId mocks base method.
func (m *MockSpanReader) LastSpanId(ctx context.Context) (SpanId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSpanId", ctx)
	ret0, _ := ret[0].(SpanId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastSpanId indicates an expected call of LastSpanId.
func (mr *MockSpanReaderMockRecorder) LastSpanId(ctx any) *MockSpanReaderLastSpanIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSpanId", reflect.TypeOf((*MockSpanReader)(nil).LastSpanId), ctx)
	return &MockSpanReaderLastSpanIdCall{Call: call}
}

// MockSpanReaderLastSpanIdCall wrap *gomock.Call
type MockSpanReaderLastSpanIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSpanReaderLastSpanIdCall) Return(arg0 SpanId, arg1 bool, arg2 error) *MockSpanReaderLastSpanIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSpanReaderLastSpanIdCall) Do(f func(context.Context) (SpanId, bool, error)) *MockSpanReaderLastSpanIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSpanReaderLastSpanIdCall) DoAndReturn(f func(context.Context) (SpanId, bool, error)) *MockSpanReaderLastSpanIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSpanWriter is a mock of SpanWriter interface.
type MockSpanWriter struct {
	ctrl     *gomock.Controller
	recorder *MockSpanWriterMockRecorder
}

// MockSpanWriterMockRecorder is the mock recorder for MockSpanWriter.
type MockSpanWriterMockRecorder struct {
	mock *MockSpanWriter
}

// NewMockSpanWriter creates a new mock instance.
func NewMockSpanWriter(ctrl *gomock.Controller) *MockSpanWriter {
	mock := &MockSpanWriter{ctrl: ctrl}
	mock.recorder = &MockSpanWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpanWriter) EXPECT() *MockSpanWriterMockRecorder {
	return m.recorder
}

// PutSpan mocks base method.
func (m *MockSpanWriter) PutSpan(ctx context.Context, span *Span) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSpan", ctx, span)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSpan indicates an expected call of PutSpan.
func (mr *MockSpanWriterMockRecorder) PutSpan(ctx, span any) *MockSpanWriterPutSpanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSpan", reflect.TypeOf((*MockSpanWriter)(nil).PutSpan), ctx, span)
	return &MockSpanWriterPutSpanCall{Call: call}
}

// MockSpanWriterPutSpanCall wrap *gomock.Call
type MockSpanWriterPutSpanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSpanWriterPutSpanCall) Return(arg0 error) *MockSpanWriterPutSpanCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSpanWriterPutSpanCall) Do(f func(context.Context, *Span) error) *MockSpanWriterPutSpanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSpanWriterPutSpanCall) DoAndReturn(f func(context.Context, *Span) error) *MockSpanWriterPutSpanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSpanStore is a mock of SpanStore interface.
type MockSpanStore struct {
	ctrl     *gomock.Controller
	recorder *MockSpanStoreMockRecorder
}

// MockSpanStoreMockRecorder is the mock recorder for MockSpanStore.
type MockSpanStoreMockRecorder struct {
	mock *MockSpanStore
}

// NewMockSpanStore creates a new mock instance.
func NewMockSpanStore(ctrl *gomock.Controller) *MockSpanStore {
	mock := &MockSpanStore{ctrl: ctrl}
	mock.recorder = &MockSpanStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpanStore) EXPECT() *MockSpanStoreMockRecorder {
	return m.recorder
}

// GetSpan mocks base method.
func (m *MockSpanStore) GetSpan(ctx context.Context, spanId SpanId) (*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpan", ctx, spanId)
	ret0, _ := ret[0].(*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpan indicates an expected call of GetSpan.
func (mr *MockSpanStoreMockRecorder) GetSpan(ctx, spanId any) *MockSpanStoreGetSpanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpan", reflect.TypeOf((*MockSpanStore)(nil).GetSpan), ctx, spanId)
	return &MockSpanStoreGetSpanCall{Call: call}
}

// MockSpanStoreGetSpanCall wrap *gomock.Call
type MockSpanStoreGetSpanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSpanStoreGetSpanCall) Return(arg0 *Span, arg1 error) *MockSpanStoreGetSpanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSpanStoreGetSpanCall) Do(f func(context.Context, SpanId) (*Span, error)) *MockSpanStoreGetSpanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSpanStoreGetSpanCall) DoAndReturn(f func(context.Context, SpanId) (*Span, error)) *MockSpanStoreGetSpanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastSpanId mocks base method.
func (m *MockSpanStore) LastSpanId(ctx context.Context) (SpanId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSpanId", ctx)
	ret0, _ := ret[0].(SpanId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastSpanId indicates an expected call of LastSpanId.
func (mr *MockSpanStoreMockRecorder) LastSpanId(ctx any) *MockSpanStoreLastSpanIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSpanId", reflect.TypeOf((*MockSpanStore)(nil).LastSpanId), ctx)
	return &MockSpanStoreLastSpanIdCall{Call: call}
}

// MockSpanStoreLastSpanIdCall wrap *gomock.Call
type MockSpanStoreLastSpanIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSpanStoreLastSpanIdCall) Return(arg0 SpanId, arg1 bool, arg2 error) *MockSpanStoreLastSpanIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSpanStoreLastSpanIdCall) Do(f func(context.Context) (SpanId, bool, error)) *MockSpanStoreLastSpanIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSpanStoreLastSpanIdCall) DoAndReturn(f func(context.Context) (SpanId, bool, error)) *MockSpanStoreLastSpanIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutSpan mocks base method.
func (m *MockSpanStore) PutSpan(ctx context.Context, span *Span) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSpan", ctx, span)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSpan indicates an expected call of PutSpan.
func (mr *MockSpanStoreMockRecorder) PutSpan(ctx, span any) *MockSpanStorePutSpanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSpan", reflect.TypeOf((*MockSpanStore)(nil).PutSpan), ctx, span)
	return &MockSpanStorePutSpanCall{Call: call}
}

// MockSpanStorePutSpanCall wrap *gomock.Call
type MockSpanStorePutSpanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSpanStorePutSpanCall) Return(arg0 error) *MockSpanStorePutSpanCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSpanStorePutSpanCall) Do(f func(context.Context, *Span) error) *MockSpanStorePutSpanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSpanStorePutSpanCall) DoAndReturn(f func(context.Context, *Span) error) *MockSpanStorePutSpanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMilestoneReader is a mock of MilestoneReader interface.
type MockMilestoneReader struct {
	ctrl     *gomock.Controller
	recorder *MockMilestoneReaderMockRecorder
}

// MockMilestoneReaderMockRecorder is the mock recorder for MockMilestoneReader.
type MockMilestoneReaderMockRecorder struct {
	mock *MockMilestoneReader
}

// NewMockMilestoneReader creates a new mock instance.
func NewMockMilestoneReader(ctrl *gomock.Controller) *MockMilestoneReader {
	mock := &MockMilestoneReader{ctrl: ctrl}
	mock.recorder = &MockMilestoneReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMilestoneReader) EXPECT() *MockMilestoneReaderMockRecorder {
	return m.recorder
}

// GetMilestone mocks base method.
func (m *MockMilestoneReader) GetMilestone(ctx context.Context, milestoneId MilestoneId) (*Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMilestone", ctx, milestoneId)
	ret0, _ := ret[0].(*Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMilestone indicates an expected call of GetMilestone.
func (mr *MockMilestoneReaderMockRecorder) GetMilestone(ctx, milestoneId any) *MockMilestoneReaderGetMilestoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestone", reflect.TypeOf((*MockMilestoneReader)(nil).GetMilestone), ctx, milestoneId)
	return &MockMilestoneReaderGetMilestoneCall{Call: call}
}

// MockMilestoneReaderGetMilestoneCall wrap *gomock.Call
type MockMilestoneReaderGetMilestoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMilestoneReaderGetMilestoneCall) Return(arg0 *Milestone, arg1 error) *MockMilestoneReaderGetMilestoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMilestoneReaderGetMilestoneCall) Do(f func(context.Context, MilestoneId) (*Milestone, error)) *MockMilestoneReaderGetMilestoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMilestoneReaderGetMilestoneCall) DoAndReturn(f func(context.Context, MilestoneId) (*Milestone, error)) *MockMilestoneReaderGetMilestoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastMilestoneId mocks base method.
func (m *MockMilestoneReader) LastMilestoneId(ctx context.Context) (MilestoneId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastMilestoneId", ctx)
	ret0, _ := ret[0].(MilestoneId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastMilestoneId indicates an expected call of LastMilestoneId.
func (mr *MockMilestoneReaderMockRecorder) LastMilestoneId(ctx any) *MockMilestoneReaderLastMilestoneIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastMilestoneId", reflect.TypeOf((*MockMilestoneReader)(nil).LastMilestoneId), ctx)
	return &MockMilestoneReaderLastMilestoneIdCall{Call: call}
}

// MockMilestoneReaderLastMilestoneIdCall wrap *gomock.Call
type MockMilestoneReaderLastMilestoneIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMilestoneReaderLastMilestoneIdCall) Return(arg0 MilestoneId, arg1 bool, arg2 error) *MockMilestoneReaderLastMilestoneIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMilestoneReaderLastMilestoneIdCall) Do(f func(context.Context) (MilestoneId, bool, error)) *MockMilestoneReaderLastMilestoneIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMilestoneReaderLastMilestoneIdCall) DoAndReturn(f func(context.Context) (MilestoneId, bool, error)) *MockMilestoneReaderLastMilestoneIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMilestoneWriter is a mock of MilestoneWriter interface.
type MockMilestoneWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMilestoneWriterMockRecorder
}

// MockMilestoneWriterMockRecorder is the mock recorder for MockMilestoneWriter.
type MockMilestoneWriterMockRecorder struct {
	mock *MockMilestoneWriter
}

// NewMockMilestoneWriter creates a new mock instance.
func NewMockMilestoneWriter(ctrl *gomock.Controller) *MockMilestoneWriter {
	mock := &MockMilestoneWriter{ctrl: ctrl}
	mock.recorder = &MockMilestoneWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMilestoneWriter) EXPECT() *MockMilestoneWriterMockRecorder {
	return m.recorder
}

// PutMilestone mocks base method.
func (m *MockMilestoneWriter) PutMilestone(ctx context.Context, milestoneId MilestoneId, milestone *Milestone) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMilestone", ctx, milestoneId, milestone)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMilestone indicates an expected call of PutMilestone.
func (mr *MockMilestoneWriterMockRecorder) PutMilestone(ctx, milestoneId, milestone any) *MockMilestoneWriterPutMilestoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMilestone", reflect.TypeOf((*MockMilestoneWriter)(nil).PutMilestone), ctx, milestoneId, milestone)
	return &MockMilestoneWriterPutMilestoneCall{Call: call}
}

// MockMilestoneWriterPutMilestoneCall wrap *gomock.Call
type MockMilestoneWriterPutMilestoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMilestoneWriterPutMilestoneCall) Return(arg0 error) *MockMilestoneWriterPutMilestoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMilestoneWriterPutMilestoneCall) Do(f func(context.Context, MilestoneId, *Milestone) error) *MockMilestoneWriterPutMilestoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMilestoneWriterPutMilestoneCall) DoAndReturn(f func(context.Context, MilestoneId, *Milestone) error) *MockMilestoneWriterPutMilestoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMilestoneStore is a mock of MilestoneStore interface.
type MockMilestoneStore struct {
	ctrl     *gomock.Controller
	recorder *MockMilestoneStoreMockRecorder
}

// MockMilestoneStoreMockRecorder is the mock recorder for MockMilestoneStore.
type MockMilestoneStoreMockRecorder struct {
	mock *MockMilestoneStore
}

// NewMockMilestoneStore creates a new mock instance.
func NewMockMilestoneStore(ctrl *gomock.Controller) *MockMilestoneStore {
	mock := &MockMilestoneStore{ctrl: ctrl}
	mock.recorder = &MockMilestoneStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMilestoneStore) EXPECT() *MockMilestoneStoreMockRecorder {
	return m.recorder
}

// GetMilestone mocks base method.
func (m *MockMilestoneStore) GetMilestone(ctx context.Context, milestoneId MilestoneId) (*Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMilestone", ctx, milestoneId)
	ret0, _ := ret[0].(*Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMilestone indicates an expected call of GetMilestone.
func (mr *MockMilestoneStoreMockRecorder) GetMilestone(ctx, milestoneId any) *MockMilestoneStoreGetMilestoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestone", reflect.TypeOf((*MockMilestoneStore)(nil).GetMilestone), ctx, milestoneId)
	return &MockMilestoneStoreGetMilestoneCall{Call: call}
}

// MockMilestoneStoreGetMilestoneCall wrap *gomock.Call
type MockMilestoneStoreGetMilestoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMilestoneStoreGetMilestoneCall) Return(arg0 *Milestone, arg1 error) *MockMilestoneStoreGetMilestoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMilestoneStoreGetMilestoneCall) Do(f func(context.Context, MilestoneId) (*Milestone, error)) *MockMilestoneStoreGetMilestoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMilestoneStoreGetMilestoneCall) DoAndReturn(f func(context.Context, MilestoneId) (*Milestone, error)) *MockMilestoneStoreGetMilestoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastMilestoneId mocks base method.
func (m *MockMilestoneStore) LastMilestoneId(ctx context.Context) (MilestoneId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastMilestoneId", ctx)
	ret0, _ := ret[0].(MilestoneId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastMilestoneId indicates an expected call of LastMilestoneId.
func (mr *MockMilestoneStoreMockRecorder) LastMilestoneId(ctx any) *MockMilestoneStoreLastMilestoneIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastMilestoneId", reflect.TypeOf((*MockMilestoneStore)(nil).LastMilestoneId), ctx)
	return &MockMilestoneStoreLastMilestoneIdCall{Call: call}
}

// MockMilestoneStoreLastMilestoneIdCall wrap *gomock.Call
type MockMilestoneStoreLastMilestoneIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMilestoneStoreLastMilestoneIdCall) Return(arg0 MilestoneId, arg1 bool, arg2 error) *MockMilestoneStoreLastMilestoneIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMilestoneStoreLastMilestoneIdCall) Do(f func(context.Context) (MilestoneId, bool, error)) *MockMilestoneStoreLastMilestoneIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMilestoneStoreLastMilestoneIdCall) DoAndReturn(f func(context.Context) (MilestoneId, bool, error)) *MockMilestoneStoreLastMilestoneIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutMilestone mocks base method.
func (m *MockMilestoneStore) PutMilestone(ctx context.Context, milestoneId MilestoneId, milestone *Milestone) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMilestone", ctx, milestoneId, milestone)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMilestone indicates an expected call of PutMilestone.
func (mr *MockMilestoneStoreMockRecorder) PutMilestone(ctx, milestoneId, milestone any) *MockMilestoneStorePutMilestoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMilestone", reflect.TypeOf((*MockMilestoneStore)(nil).PutMilestone), ctx, milestoneId, milestone)
	return &MockMilestoneStorePutMilestoneCall{Call: call}
}

// MockMilestoneStorePutMilestoneCall wrap *gomock.Call
type MockMilestoneStorePutMilestoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMilestoneStorePutMilestoneCall) Return(arg0 error) *MockMilestoneStorePutMilestoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMilestoneStorePutMilestoneCall) Do(f func(context.Context, MilestoneId, *Milestone) error) *MockMilestoneStorePutMilestoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMilestoneStorePutMilestoneCall) DoAndReturn(f func(context.Context, MilestoneId, *Milestone) error) *MockMilestoneStorePutMilestoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCheckpointReader is a mock of CheckpointReader interface.
type MockCheckpointReader struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointReaderMockRecorder
}

// MockCheckpointReaderMockRecorder is the mock recorder for MockCheckpointReader.
type MockCheckpointReaderMockRecorder struct {
	mock *MockCheckpointReader
}

// NewMockCheckpointReader creates a new mock instance.
func NewMockCheckpointReader(ctrl *gomock.Controller) *MockCheckpointReader {
	mock := &MockCheckpointReader{ctrl: ctrl}
	mock.recorder = &MockCheckpointReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointReader) EXPECT() *MockCheckpointReaderMockRecorder {
	return m.recorder
}

// GetCheckpoint mocks base method.
func (m *MockCheckpointReader) GetCheckpoint(ctx context.Context, checkpointId CheckpointId) (*Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckpoint", ctx, checkpointId)
	ret0, _ := ret[0].(*Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckpoint indicates an expected call of GetCheckpoint.
func (mr *MockCheckpointReaderMockRecorder) GetCheckpoint(ctx, checkpointId any) *MockCheckpointReaderGetCheckpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckpoint", reflect.TypeOf((*MockCheckpointReader)(nil).GetCheckpoint), ctx, checkpointId)
	return &MockCheckpointReaderGetCheckpointCall{Call: call}
}

// MockCheckpointReaderGetCheckpointCall wrap *gomock.Call
type MockCheckpointReaderGetCheckpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCheckpointReaderGetCheckpointCall) Return(arg0 *Checkpoint, arg1 error) *MockCheckpointReaderGetCheckpointCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCheckpointReaderGetCheckpointCall) Do(f func(context.Context, CheckpointId) (*Checkpoint, error)) *MockCheckpointReaderGetCheckpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCheckpointReaderGetCheckpointCall) DoAndReturn(f func(context.Context, CheckpointId) (*Checkpoint, error)) *MockCheckpointReaderGetCheckpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastCheckpointId mocks base method.
func (m *MockCheckpointReader) LastCheckpointId(ctx context.Context) (CheckpointId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCheckpointId", ctx)
	ret0, _ := ret[0].(CheckpointId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastCheckpointId indicates an expected call of LastCheckpointId.
func (mr *MockCheckpointReaderMockRecorder) LastCheckpointId(ctx any) *MockCheckpointReaderLastCheckpointIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCheckpointId", reflect.TypeOf((*MockCheckpointReader)(nil).LastCheckpointId), ctx)
	return &MockCheckpointReaderLastCheckpointIdCall{Call: call}
}

// MockCheckpointReaderLastCheckpointIdCall wrap *gomock.Call
type MockCheckpointReaderLastCheckpointIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCheckpointReaderLastCheckpointIdCall) Return(arg0 CheckpointId, arg1 bool, arg2 error) *MockCheckpointReaderLastCheckpointIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCheckpointReaderLastCheckpointIdCall) Do(f func(context.Context) (CheckpointId, bool, error)) *MockCheckpointReaderLastCheckpointIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCheckpointReaderLastCheckpointIdCall) DoAndReturn(f func(context.Context) (CheckpointId, bool, error)) *MockCheckpointReaderLastCheckpointIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCheckpointWriter is a mock of CheckpointWriter interface.
type MockCheckpointWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointWriterMockRecorder
}

// MockCheckpointWriterMockRecorder is the mock recorder for MockCheckpointWriter.
type MockCheckpointWriterMockRecorder struct {
	mock *MockCheckpointWriter
}

// NewMockCheckpointWriter creates a new mock instance.
func NewMockCheckpointWriter(ctrl *gomock.Controller) *MockCheckpointWriter {
	mock := &MockCheckpointWriter{ctrl: ctrl}
	mock.recorder = &MockCheckpointWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointWriter) EXPECT() *MockCheckpointWriterMockRecorder {
	return m.recorder
}

// PutCheckpoint mocks base method.
func (m *MockCheckpointWriter) PutCheckpoint(ctx context.Context, checkpointId CheckpointId, checkpoint *Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCheckpoint", ctx, checkpointId, checkpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCheckpoint indicates an expected call of PutCheckpoint.
func (mr *MockCheckpointWriterMockRecorder) PutCheckpoint(ctx, checkpointId, checkpoint any) *MockCheckpointWriterPutCheckpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCheckpoint", reflect.TypeOf((*MockCheckpointWriter)(nil).PutCheckpoint), ctx, checkpointId, checkpoint)
	return &MockCheckpointWriterPutCheckpointCall{Call: call}
}

// MockCheckpointWriterPutCheckpointCall wrap *gomock.Call
type MockCheckpointWriterPutCheckpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCheckpointWriterPutCheckpointCall) Return(arg0 error) *MockCheckpointWriterPutCheckpointCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCheckpointWriterPutCheckpointCall) Do(f func(context.Context, CheckpointId, *Checkpoint) error) *MockCheckpointWriterPutCheckpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCheckpointWriterPutCheckpointCall) DoAndReturn(f func(context.Context, CheckpointId, *Checkpoint) error) *MockCheckpointWriterPutCheckpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCheckpointStore is a mock of CheckpointStore interface.
type MockCheckpointStore struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointStoreMockRecorder
}

// MockCheckpointStoreMockRecorder is the mock recorder for MockCheckpointStore.
type MockCheckpointStoreMockRecorder struct {
	mock *MockCheckpointStore
}

// NewMockCheckpointStore creates a new mock instance.
func NewMockCheckpointStore(ctrl *gomock.Controller) *MockCheckpointStore {
	mock := &MockCheckpointStore{ctrl: ctrl}
	mock.recorder = &MockCheckpointStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointStore) EXPECT() *MockCheckpointStoreMockRecorder {
	return m.recorder
}

// GetCheckpoint mocks base method.
func (m *MockCheckpointStore) GetCheckpoint(ctx context.Context, checkpointId CheckpointId) (*Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckpoint", ctx, checkpointId)
	ret0, _ := ret[0].(*Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckpoint indicates an expected call of GetCheckpoint.
func (mr *MockCheckpointStoreMockRecorder) GetCheckpoint(ctx, checkpointId any) *MockCheckpointStoreGetCheckpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckpoint", reflect.TypeOf((*MockCheckpointStore)(nil).GetCheckpoint), ctx, checkpointId)
	return &MockCheckpointStoreGetCheckpointCall{Call: call}
}

// MockCheckpointStoreGetCheckpointCall wrap *gomock.Call
type MockCheckpointStoreGetCheckpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCheckpointStoreGetCheckpointCall) Return(arg0 *Checkpoint, arg1 error) *MockCheckpointStoreGetCheckpointCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCheckpointStoreGetCheckpointCall) Do(f func(context.Context, CheckpointId) (*Checkpoint, error)) *MockCheckpointStoreGetCheckpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCheckpointStoreGetCheckpointCall) DoAndReturn(f func(context.Context, CheckpointId) (*Checkpoint, error)) *MockCheckpointStoreGetCheckpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastCheckpointId mocks base method.
func (m *MockCheckpointStore) LastCheckpointId(ctx context.Context) (CheckpointId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCheckpointId", ctx)
	ret0, _ := ret[0].(CheckpointId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastCheckpointId indicates an expected call of LastCheckpointId.
func (mr *MockCheckpointStoreMockRecorder) LastCheckpointId(ctx any) *MockCheckpointStoreLastCheckpointIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCheckpointId", reflect.TypeOf((*MockCheckpointStore)(nil).LastCheckpointId), ctx)
	return &MockCheckpointStoreLastCheckpointIdCall{Call: call}
}

// MockCheckpointStoreLastCheckpointIdCall wrap *gomock.Call
type MockCheckpointStoreLastCheckpointIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCheckpointStoreLastCheckpointIdCall) Return(arg0 CheckpointId, arg1 bool, arg2 error) *MockCheckpointStoreLastCheckpointIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCheckpointStoreLastCheckpointIdCall) Do(f func(context.Context) (CheckpointId, bool, error)) *MockCheckpointStoreLastCheckpointIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCheckpointStoreLastCheckpointIdCall) DoAndReturn(f func(context.Context) (CheckpointId, bool, error)) *MockCheckpointStoreLastCheckpointIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutCheckpoint mocks base method.
func (m *MockCheckpointStore) PutCheckpoint(ctx context.Context, checkpointId CheckpointId, checkpoint *Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCheckpoint", ctx, checkpointId, checkpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCheckpoint indicates an expected call of PutCheckpoint.
func (mr *MockCheckpointStoreMockRecorder) PutCheckpoint(ctx, checkpointId, checkpoint any) *MockCheckpointStorePutCheckpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCheckpoint", reflect.TypeOf((*MockCheckpointStore)(nil).PutCheckpoint), ctx, checkpointId, checkpoint)
	return &MockCheckpointStorePutCheckpointCall{Call: call}
}

// MockCheckpointStorePutCheckpointCall wrap *gomock.Call
type MockCheckpointStorePutCheckpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCheckpointStorePutCheckpointCall) Return(arg0 error) *MockCheckpointStorePutCheckpointCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCheckpointStorePutCheckpointCall) Do(f func(context.Context, CheckpointId, *Checkpoint) error) *MockCheckpointStorePutCheckpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCheckpointStorePutCheckpointCall) DoAndReturn(f func(context.Context, CheckpointId, *Checkpoint) error) *MockCheckpointStorePutCheckpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetCheckpoint mocks base method.
func (m *MockStore) GetCheckpoint(ctx context.Context, checkpointId CheckpointId) (*Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckpoint", ctx, checkpointId)
	ret0, _ := ret[0].(*Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckpoint indicates an expected call of GetCheckpoint.
func (mr *MockStoreMockRecorder) GetCheckpoint(ctx, checkpointId any) *MockStoreGetCheckpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckpoint", reflect.TypeOf((*MockStore)(nil).GetCheckpoint), ctx, checkpointId)
	return &MockStoreGetCheckpointCall{Call: call}
}

// MockStoreGetCheckpointCall wrap *gomock.Call
type MockStoreGetCheckpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreGetCheckpointCall) Return(arg0 *Checkpoint, arg1 error) *MockStoreGetCheckpointCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreGetCheckpointCall) Do(f func(context.Context, CheckpointId) (*Checkpoint, error)) *MockStoreGetCheckpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreGetCheckpointCall) DoAndReturn(f func(context.Context, CheckpointId) (*Checkpoint, error)) *MockStoreGetCheckpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMilestone mocks base method.
func (m *MockStore) GetMilestone(ctx context.Context, milestoneId MilestoneId) (*Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMilestone", ctx, milestoneId)
	ret0, _ := ret[0].(*Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMilestone indicates an expected call of GetMilestone.
func (mr *MockStoreMockRecorder) GetMilestone(ctx, milestoneId any) *MockStoreGetMilestoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestone", reflect.TypeOf((*MockStore)(nil).GetMilestone), ctx, milestoneId)
	return &MockStoreGetMilestoneCall{Call: call}
}

// MockStoreGetMilestoneCall wrap *gomock.Call
type MockStoreGetMilestoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreGetMilestoneCall) Return(arg0 *Milestone, arg1 error) *MockStoreGetMilestoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreGetMilestoneCall) Do(f func(context.Context, MilestoneId) (*Milestone, error)) *MockStoreGetMilestoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreGetMilestoneCall) DoAndReturn(f func(context.Context, MilestoneId) (*Milestone, error)) *MockStoreGetMilestoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSpan mocks base method.
func (m *MockStore) GetSpan(ctx context.Context, spanId SpanId) (*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpan", ctx, spanId)
	ret0, _ := ret[0].(*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpan indicates an expected call of GetSpan.
func (mr *MockStoreMockRecorder) GetSpan(ctx, spanId any) *MockStoreGetSpanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpan", reflect.TypeOf((*MockStore)(nil).GetSpan), ctx, spanId)
	return &MockStoreGetSpanCall{Call: call}
}

// MockStoreGetSpanCall wrap *gomock.Call
type MockStoreGetSpanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreGetSpanCall) Return(arg0 *Span, arg1 error) *MockStoreGetSpanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreGetSpanCall) Do(f func(context.Context, SpanId) (*Span, error)) *MockStoreGetSpanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreGetSpanCall) DoAndReturn(f func(context.Context, SpanId) (*Span, error)) *MockStoreGetSpanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastCheckpointId mocks base method.
func (m *MockStore) LastCheckpointId(ctx context.Context) (CheckpointId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCheckpointId", ctx)
	ret0, _ := ret[0].(CheckpointId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastCheckpointId indicates an expected call of LastCheckpointId.
func (mr *MockStoreMockRecorder) LastCheckpointId(ctx any) *MockStoreLastCheckpointIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCheckpointId", reflect.TypeOf((*MockStore)(nil).LastCheckpointId), ctx)
	return &MockStoreLastCheckpointIdCall{Call: call}
}

// MockStoreLastCheckpointIdCall wrap *gomock.Call
type MockStoreLastCheckpointIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreLastCheckpointIdCall) Return(arg0 CheckpointId, arg1 bool, arg2 error) *MockStoreLastCheckpointIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreLastCheckpointIdCall) Do(f func(context.Context) (CheckpointId, bool, error)) *MockStoreLastCheckpointIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreLastCheckpointIdCall) DoAndReturn(f func(context.Context) (CheckpointId, bool, error)) *MockStoreLastCheckpointIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastMilestoneId mocks base method.
func (m *MockStore) LastMilestoneId(ctx context.Context) (MilestoneId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastMilestoneId", ctx)
	ret0, _ := ret[0].(MilestoneId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastMilestoneId indicates an expected call of LastMilestoneId.
func (mr *MockStoreMockRecorder) LastMilestoneId(ctx any) *MockStoreLastMilestoneIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastMilestoneId", reflect.TypeOf((*MockStore)(nil).LastMilestoneId), ctx)
	return &MockStoreLastMilestoneIdCall{Call: call}
}

// MockStoreLastMilestoneIdCall wrap *gomock.Call
type MockStoreLastMilestoneIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreLastMilestoneIdCall) Return(arg0 MilestoneId, arg1 bool, arg2 error) *MockStoreLastMilestoneIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreLastMilestoneIdCall) Do(f func(context.Context) (MilestoneId, bool, error)) *MockStoreLastMilestoneIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreLastMilestoneIdCall) DoAndReturn(f func(context.Context) (MilestoneId, bool, error)) *MockStoreLastMilestoneIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastSpanId mocks base method.
func (m *MockStore) LastSpanId(ctx context.Context) (SpanId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSpanId", ctx)
	ret0, _ := ret[0].(SpanId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastSpanId indicates an expected call of LastSpanId.
func (mr *MockStoreMockRecorder) LastSpanId(ctx any) *MockStoreLastSpanIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSpanId", reflect.TypeOf((*MockStore)(nil).LastSpanId), ctx)
	return &MockStoreLastSpanIdCall{Call: call}
}

// MockStoreLastSpanIdCall wrap *gomock.Call
type MockStoreLastSpanIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreLastSpanIdCall) Return(arg0 SpanId, arg1 bool, arg2 error) *MockStoreLastSpanIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreLastSpanIdCall) Do(f func(context.Context) (SpanId, bool, error)) *MockStoreLastSpanIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreLastSpanIdCall) DoAndReturn(f func(context.Context) (SpanId, bool, error)) *MockStoreLastSpanIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutCheckpoint mocks base method.
func (m *MockStore) PutCheckpoint(ctx context.Context, checkpointId CheckpointId, checkpoint *Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCheckpoint", ctx, checkpointId, checkpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCheckpoint indicates an expected call of PutCheckpoint.
func (mr *MockStoreMockRecorder) PutCheckpoint(ctx, checkpointId, checkpoint any) *MockStorePutCheckpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCheckpoint", reflect.TypeOf((*MockStore)(nil).PutCheckpoint), ctx, checkpointId, checkpoint)
	return &MockStorePutCheckpointCall{Call: call}
}

// MockStorePutCheckpointCall wrap *gomock.Call
type MockStorePutCheckpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorePutCheckpointCall) Return(arg0 error) *MockStorePutCheckpointCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorePutCheckpointCall) Do(f func(context.Context, CheckpointId, *Checkpoint) error) *MockStorePutCheckpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorePutCheckpointCall) DoAndReturn(f func(context.Context, CheckpointId, *Checkpoint) error) *MockStorePutCheckpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutMilestone mocks base method.
func (m *MockStore) PutMilestone(ctx context.Context, milestoneId MilestoneId, milestone *Milestone) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMilestone", ctx, milestoneId, milestone)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMilestone indicates an expected call of PutMilestone.
func (mr *MockStoreMockRecorder) PutMilestone(ctx, milestoneId, milestone any) *MockStorePutMilestoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMilestone", reflect.TypeOf((*MockStore)(nil).PutMilestone), ctx, milestoneId, milestone)
	return &MockStorePutMilestoneCall{Call: call}
}

// MockStorePutMilestoneCall wrap *gomock.Call
type MockStorePutMilestoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorePutMilestoneCall) Return(arg0 error) *MockStorePutMilestoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorePutMilestoneCall) Do(f func(context.Context, MilestoneId, *Milestone) error) *MockStorePutMilestoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorePutMilestoneCall) DoAndReturn(f func(context.Context, MilestoneId, *Milestone) error) *MockStorePutMilestoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutSpan mocks base method.
func (m *MockStore) PutSpan(ctx context.Context, span *Span) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSpan", ctx, span)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSpan indicates an expected call of PutSpan.
func (mr *MockStoreMockRecorder) PutSpan(ctx, span any) *MockStorePutSpanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSpan", reflect.TypeOf((*MockStore)(nil).PutSpan), ctx, span)
	return &MockStorePutSpanCall{Call: call}
}

// MockStorePutSpanCall wrap *gomock.Call
type MockStorePutSpanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorePutSpanCall) Return(arg0 error) *MockStorePutSpanCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorePutSpanCall) Do(f func(context.Context, *Span) error) *MockStorePutSpanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorePutSpanCall) DoAndReturn(f func(context.Context, *Span) error) *MockStorePutSpanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRoStore is a mock of ReadStore interface.
type MockRoStore struct {
	ctrl     *gomock.Controller
	recorder *MockRoStoreMockRecorder
}

// MockRoStoreMockRecorder is the mock recorder for MockRoStore.
type MockRoStoreMockRecorder struct {
	mock *MockRoStore
}

// NewMockRoStore creates a new mock instance.
func NewMockRoStore(ctrl *gomock.Controller) *MockRoStore {
	mock := &MockRoStore{ctrl: ctrl}
	mock.recorder = &MockRoStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoStore) EXPECT() *MockRoStoreMockRecorder {
	return m.recorder
}

// GetCheckpoint mocks base method.
func (m *MockRoStore) GetCheckpoint(ctx context.Context, checkpointId CheckpointId) (*Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckpoint", ctx, checkpointId)
	ret0, _ := ret[0].(*Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckpoint indicates an expected call of GetCheckpoint.
func (mr *MockRoStoreMockRecorder) GetCheckpoint(ctx, checkpointId any) *MockRoStoreGetCheckpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckpoint", reflect.TypeOf((*MockRoStore)(nil).GetCheckpoint), ctx, checkpointId)
	return &MockRoStoreGetCheckpointCall{Call: call}
}

// MockRoStoreGetCheckpointCall wrap *gomock.Call
type MockRoStoreGetCheckpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoStoreGetCheckpointCall) Return(arg0 *Checkpoint, arg1 error) *MockRoStoreGetCheckpointCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoStoreGetCheckpointCall) Do(f func(context.Context, CheckpointId) (*Checkpoint, error)) *MockRoStoreGetCheckpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoStoreGetCheckpointCall) DoAndReturn(f func(context.Context, CheckpointId) (*Checkpoint, error)) *MockRoStoreGetCheckpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMilestone mocks base method.
func (m *MockRoStore) GetMilestone(ctx context.Context, milestoneId MilestoneId) (*Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMilestone", ctx, milestoneId)
	ret0, _ := ret[0].(*Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMilestone indicates an expected call of GetMilestone.
func (mr *MockRoStoreMockRecorder) GetMilestone(ctx, milestoneId any) *MockRoStoreGetMilestoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestone", reflect.TypeOf((*MockRoStore)(nil).GetMilestone), ctx, milestoneId)
	return &MockRoStoreGetMilestoneCall{Call: call}
}

// MockRoStoreGetMilestoneCall wrap *gomock.Call
type MockRoStoreGetMilestoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoStoreGetMilestoneCall) Return(arg0 *Milestone, arg1 error) *MockRoStoreGetMilestoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoStoreGetMilestoneCall) Do(f func(context.Context, MilestoneId) (*Milestone, error)) *MockRoStoreGetMilestoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoStoreGetMilestoneCall) DoAndReturn(f func(context.Context, MilestoneId) (*Milestone, error)) *MockRoStoreGetMilestoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSpan mocks base method.
func (m *MockRoStore) GetSpan(ctx context.Context, spanId SpanId) (*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpan", ctx, spanId)
	ret0, _ := ret[0].(*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpan indicates an expected call of GetSpan.
func (mr *MockRoStoreMockRecorder) GetSpan(ctx, spanId any) *MockRoStoreGetSpanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpan", reflect.TypeOf((*MockRoStore)(nil).GetSpan), ctx, spanId)
	return &MockRoStoreGetSpanCall{Call: call}
}

// MockRoStoreGetSpanCall wrap *gomock.Call
type MockRoStoreGetSpanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoStoreGetSpanCall) Return(arg0 *Span, arg1 error) *MockRoStoreGetSpanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoStoreGetSpanCall) Do(f func(context.Context, SpanId) (*Span, error)) *MockRoStoreGetSpanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoStoreGetSpanCall) DoAndReturn(f func(context.Context, SpanId) (*Span, error)) *MockRoStoreGetSpanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastCheckpointId mocks base method.
func (m *MockRoStore) LastCheckpointId(ctx context.Context) (CheckpointId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCheckpointId", ctx)
	ret0, _ := ret[0].(CheckpointId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastCheckpointId indicates an expected call of LastCheckpointId.
func (mr *MockRoStoreMockRecorder) LastCheckpointId(ctx any) *MockRoStoreLastCheckpointIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCheckpointId", reflect.TypeOf((*MockRoStore)(nil).LastCheckpointId), ctx)
	return &MockRoStoreLastCheckpointIdCall{Call: call}
}

// MockRoStoreLastCheckpointIdCall wrap *gomock.Call
type MockRoStoreLastCheckpointIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoStoreLastCheckpointIdCall) Return(arg0 CheckpointId, arg1 bool, arg2 error) *MockRoStoreLastCheckpointIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoStoreLastCheckpointIdCall) Do(f func(context.Context) (CheckpointId, bool, error)) *MockRoStoreLastCheckpointIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoStoreLastCheckpointIdCall) DoAndReturn(f func(context.Context) (CheckpointId, bool, error)) *MockRoStoreLastCheckpointIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastMilestoneId mocks base method.
func (m *MockRoStore) LastMilestoneId(ctx context.Context) (MilestoneId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastMilestoneId", ctx)
	ret0, _ := ret[0].(MilestoneId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastMilestoneId indicates an expected call of LastMilestoneId.
func (mr *MockRoStoreMockRecorder) LastMilestoneId(ctx any) *MockRoStoreLastMilestoneIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastMilestoneId", reflect.TypeOf((*MockRoStore)(nil).LastMilestoneId), ctx)
	return &MockRoStoreLastMilestoneIdCall{Call: call}
}

// MockRoStoreLastMilestoneIdCall wrap *gomock.Call
type MockRoStoreLastMilestoneIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoStoreLastMilestoneIdCall) Return(arg0 MilestoneId, arg1 bool, arg2 error) *MockRoStoreLastMilestoneIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoStoreLastMilestoneIdCall) Do(f func(context.Context) (MilestoneId, bool, error)) *MockRoStoreLastMilestoneIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoStoreLastMilestoneIdCall) DoAndReturn(f func(context.Context) (MilestoneId, bool, error)) *MockRoStoreLastMilestoneIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastSpanId mocks base method.
func (m *MockRoStore) LastSpanId(ctx context.Context) (SpanId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSpanId", ctx)
	ret0, _ := ret[0].(SpanId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastSpanId indicates an expected call of LastSpanId.
func (mr *MockRoStoreMockRecorder) LastSpanId(ctx any) *MockRoStoreLastSpanIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSpanId", reflect.TypeOf((*MockRoStore)(nil).LastSpanId), ctx)
	return &MockRoStoreLastSpanIdCall{Call: call}
}

// MockRoStoreLastSpanIdCall wrap *gomock.Call
type MockRoStoreLastSpanIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoStoreLastSpanIdCall) Return(arg0 SpanId, arg1 bool, arg2 error) *MockRoStoreLastSpanIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoStoreLastSpanIdCall) Do(f func(context.Context) (SpanId, bool, error)) *MockRoStoreLastSpanIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoStoreLastSpanIdCall) DoAndReturn(f func(context.Context) (SpanId, bool, error)) *MockRoStoreLastSpanIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Mockreader is a mock of reader interface.
type Mockreader struct {
	ctrl     *gomock.Controller
	recorder *MockreaderMockRecorder
}

// MockreaderMockRecorder is the mock recorder for Mockreader.
type MockreaderMockRecorder struct {
	mock *Mockreader
}

// NewMockreader creates a new mock instance.
func NewMockreader(ctrl *gomock.Controller) *Mockreader {
	mock := &Mockreader{ctrl: ctrl}
	mock.recorder = &MockreaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockreader) EXPECT() *MockreaderMockRecorder {
	return m.recorder
}

// BorStartEventID mocks base method.
func (m *Mockreader) BorStartEventID(ctx context.Context, tx kv.Tx, hash common.Hash, blockNum uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BorStartEventID", ctx, tx, hash, blockNum)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BorStartEventID indicates an expected call of BorStartEventID.
func (mr *MockreaderMockRecorder) BorStartEventID(ctx, tx, hash, blockNum any) *MockreaderBorStartEventIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BorStartEventID", reflect.TypeOf((*Mockreader)(nil).BorStartEventID), ctx, tx, hash, blockNum)
	return &MockreaderBorStartEventIDCall{Call: call}
}

// MockreaderBorStartEventIDCall wrap *gomock.Call
type MockreaderBorStartEventIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockreaderBorStartEventIDCall) Return(arg0 uint64, arg1 error) *MockreaderBorStartEventIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockreaderBorStartEventIDCall) Do(f func(context.Context, kv.Tx, common.Hash, uint64) (uint64, error)) *MockreaderBorStartEventIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockreaderBorStartEventIDCall) DoAndReturn(f func(context.Context, kv.Tx, common.Hash, uint64) (uint64, error)) *MockreaderBorStartEventIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Checkpoint mocks base method.
func (m *Mockreader) Checkpoint(ctx context.Context, tx kv.Getter, checkpointId uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkpoint", ctx, tx, checkpointId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkpoint indicates an expected call of Checkpoint.
func (mr *MockreaderMockRecorder) Checkpoint(ctx, tx, checkpointId any) *MockreaderCheckpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkpoint", reflect.TypeOf((*Mockreader)(nil).Checkpoint), ctx, tx, checkpointId)
	return &MockreaderCheckpointCall{Call: call}
}

// MockreaderCheckpointCall wrap *gomock.Call
type MockreaderCheckpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockreaderCheckpointCall) Return(arg0 []byte, arg1 error) *MockreaderCheckpointCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockreaderCheckpointCall) Do(f func(context.Context, kv.Getter, uint64) ([]byte, error)) *MockreaderCheckpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockreaderCheckpointCall) DoAndReturn(f func(context.Context, kv.Getter, uint64) ([]byte, error)) *MockreaderCheckpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EventLookup mocks base method.
func (m *Mockreader) EventLookup(ctx context.Context, tx kv.Getter, txnHash common.Hash) (uint64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventLookup", ctx, tx, txnHash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EventLookup indicates an expected call of EventLookup.
func (mr *MockreaderMockRecorder) EventLookup(ctx, tx, txnHash any) *MockreaderEventLookupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventLookup", reflect.TypeOf((*Mockreader)(nil).EventLookup), ctx, tx, txnHash)
	return &MockreaderEventLookupCall{Call: call}
}

// MockreaderEventLookupCall wrap *gomock.Call
type MockreaderEventLookupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockreaderEventLookupCall) Return(arg0 uint64, arg1 bool, arg2 error) *MockreaderEventLookupCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockreaderEventLookupCall) Do(f func(context.Context, kv.Getter, common.Hash) (uint64, bool, error)) *MockreaderEventLookupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockreaderEventLookupCall) DoAndReturn(f func(context.Context, kv.Getter, common.Hash) (uint64, bool, error)) *MockreaderEventLookupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EventsByBlock mocks base method.
func (m *Mockreader) EventsByBlock(ctx context.Context, tx kv.Tx, hash common.Hash, blockNum uint64) ([]rlp.RawValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsByBlock", ctx, tx, hash, blockNum)
	ret0, _ := ret[0].([]rlp.RawValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventsByBlock indicates an expected call of EventsByBlock.
func (mr *MockreaderMockRecorder) EventsByBlock(ctx, tx, hash, blockNum any) *MockreaderEventsByBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsByBlock", reflect.TypeOf((*Mockreader)(nil).EventsByBlock), ctx, tx, hash, blockNum)
	return &MockreaderEventsByBlockCall{Call: call}
}

// MockreaderEventsByBlockCall wrap *gomock.Call
type MockreaderEventsByBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockreaderEventsByBlockCall) Return(arg0 []rlp.RawValue, arg1 error) *MockreaderEventsByBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockreaderEventsByBlockCall) Do(f func(context.Context, kv.Tx, common.Hash, uint64) ([]rlp.RawValue, error)) *MockreaderEventsByBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockreaderEventsByBlockCall) DoAndReturn(f func(context.Context, kv.Tx, common.Hash, uint64) ([]rlp.RawValue, error)) *MockreaderEventsByBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastCheckpointId mocks base method.
func (m *Mockreader) LastCheckpointId(ctx context.Context, tx kv.Tx) (uint64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCheckpointId", ctx, tx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastCheckpointId indicates an expected call of LastCheckpointId.
func (mr *MockreaderMockRecorder) LastCheckpointId(ctx, tx any) *MockreaderLastCheckpointIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCheckpointId", reflect.TypeOf((*Mockreader)(nil).LastCheckpointId), ctx, tx)
	return &MockreaderLastCheckpointIdCall{Call: call}
}

// MockreaderLastCheckpointIdCall wrap *gomock.Call
type MockreaderLastCheckpointIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockreaderLastCheckpointIdCall) Return(arg0 uint64, arg1 bool, arg2 error) *MockreaderLastCheckpointIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockreaderLastCheckpointIdCall) Do(f func(context.Context, kv.Tx) (uint64, bool, error)) *MockreaderLastCheckpointIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockreaderLastCheckpointIdCall) DoAndReturn(f func(context.Context, kv.Tx) (uint64, bool, error)) *MockreaderLastCheckpointIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastEventId mocks base method.
func (m *Mockreader) LastEventId(ctx context.Context, tx kv.Tx) (uint64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastEventId", ctx, tx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastEventId indicates an expected call of LastEventId.
func (mr *MockreaderMockRecorder) LastEventId(ctx, tx any) *MockreaderLastEventIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastEventId", reflect.TypeOf((*Mockreader)(nil).LastEventId), ctx, tx)
	return &MockreaderLastEventIdCall{Call: call}
}

// MockreaderLastEventIdCall wrap *gomock.Call
type MockreaderLastEventIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockreaderLastEventIdCall) Return(arg0 uint64, arg1 bool, arg2 error) *MockreaderLastEventIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockreaderLastEventIdCall) Do(f func(context.Context, kv.Tx) (uint64, bool, error)) *MockreaderLastEventIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockreaderLastEventIdCall) DoAndReturn(f func(context.Context, kv.Tx) (uint64, bool, error)) *MockreaderLastEventIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastFrozenEventId mocks base method.
func (m *Mockreader) LastFrozenEventId() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastFrozenEventId")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// LastFrozenEventId indicates an expected call of LastFrozenEventId.
func (mr *MockreaderMockRecorder) LastFrozenEventId() *MockreaderLastFrozenEventIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastFrozenEventId", reflect.TypeOf((*Mockreader)(nil).LastFrozenEventId))
	return &MockreaderLastFrozenEventIdCall{Call: call}
}

// MockreaderLastFrozenEventIdCall wrap *gomock.Call
type MockreaderLastFrozenEventIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockreaderLastFrozenEventIdCall) Return(arg0 uint64) *MockreaderLastFrozenEventIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockreaderLastFrozenEventIdCall) Do(f func() uint64) *MockreaderLastFrozenEventIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockreaderLastFrozenEventIdCall) DoAndReturn(f func() uint64) *MockreaderLastFrozenEventIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastFrozenSpanId mocks base method.
func (m *Mockreader) LastFrozenSpanId() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastFrozenSpanId")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// LastFrozenSpanId indicates an expected call of LastFrozenSpanId.
func (mr *MockreaderMockRecorder) LastFrozenSpanId() *MockreaderLastFrozenSpanIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastFrozenSpanId", reflect.TypeOf((*Mockreader)(nil).LastFrozenSpanId))
	return &MockreaderLastFrozenSpanIdCall{Call: call}
}

// MockreaderLastFrozenSpanIdCall wrap *gomock.Call
type MockreaderLastFrozenSpanIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockreaderLastFrozenSpanIdCall) Return(arg0 uint64) *MockreaderLastFrozenSpanIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockreaderLastFrozenSpanIdCall) Do(f func() uint64) *MockreaderLastFrozenSpanIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockreaderLastFrozenSpanIdCall) DoAndReturn(f func() uint64) *MockreaderLastFrozenSpanIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastMilestoneId mocks base method.
func (m *Mockreader) LastMilestoneId(ctx context.Context, tx kv.Tx) (uint64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastMilestoneId", ctx, tx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastMilestoneId indicates an expected call of LastMilestoneId.
func (mr *MockreaderMockRecorder) LastMilestoneId(ctx, tx any) *MockreaderLastMilestoneIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastMilestoneId", reflect.TypeOf((*Mockreader)(nil).LastMilestoneId), ctx, tx)
	return &MockreaderLastMilestoneIdCall{Call: call}
}

// MockreaderLastMilestoneIdCall wrap *gomock.Call
type MockreaderLastMilestoneIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockreaderLastMilestoneIdCall) Return(arg0 uint64, arg1 bool, arg2 error) *MockreaderLastMilestoneIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockreaderLastMilestoneIdCall) Do(f func(context.Context, kv.Tx) (uint64, bool, error)) *MockreaderLastMilestoneIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockreaderLastMilestoneIdCall) DoAndReturn(f func(context.Context, kv.Tx) (uint64, bool, error)) *MockreaderLastMilestoneIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastSpanId mocks base method.
func (m *Mockreader) LastSpanId(ctx context.Context, tx kv.Tx) (uint64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSpanId", ctx, tx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastSpanId indicates an expected call of LastSpanId.
func (mr *MockreaderMockRecorder) LastSpanId(ctx, tx any) *MockreaderLastSpanIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSpanId", reflect.TypeOf((*Mockreader)(nil).LastSpanId), ctx, tx)
	return &MockreaderLastSpanIdCall{Call: call}
}

// MockreaderLastSpanIdCall wrap *gomock.Call
type MockreaderLastSpanIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockreaderLastSpanIdCall) Return(arg0 uint64, arg1 bool, arg2 error) *MockreaderLastSpanIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockreaderLastSpanIdCall) Do(f func(context.Context, kv.Tx) (uint64, bool, error)) *MockreaderLastSpanIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockreaderLastSpanIdCall) DoAndReturn(f func(context.Context, kv.Tx) (uint64, bool, error)) *MockreaderLastSpanIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Milestone mocks base method.
func (m *Mockreader) Milestone(ctx context.Context, tx kv.Getter, milestoneId uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Milestone", ctx, tx, milestoneId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Milestone indicates an expected call of Milestone.
func (mr *MockreaderMockRecorder) Milestone(ctx, tx, milestoneId any) *MockreaderMilestoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Milestone", reflect.TypeOf((*Mockreader)(nil).Milestone), ctx, tx, milestoneId)
	return &MockreaderMilestoneCall{Call: call}
}

// MockreaderMilestoneCall wrap *gomock.Call
type MockreaderMilestoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockreaderMilestoneCall) Return(arg0 []byte, arg1 error) *MockreaderMilestoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockreaderMilestoneCall) Do(f func(context.Context, kv.Getter, uint64) ([]byte, error)) *MockreaderMilestoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockreaderMilestoneCall) DoAndReturn(f func(context.Context, kv.Getter, uint64) ([]byte, error)) *MockreaderMilestoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Span mocks base method.
func (m *Mockreader) Span(ctx context.Context, tx kv.Getter, spanId uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Span", ctx, tx, spanId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Span indicates an expected call of Span.
func (mr *MockreaderMockRecorder) Span(ctx, tx, spanId any) *MockreaderSpanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Span", reflect.TypeOf((*Mockreader)(nil).Span), ctx, tx, spanId)
	return &MockreaderSpanCall{Call: call}
}

// MockreaderSpanCall wrap *gomock.Call
type MockreaderSpanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockreaderSpanCall) Return(arg0 []byte, arg1 error) *MockreaderSpanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockreaderSpanCall) Do(f func(context.Context, kv.Getter, uint64) ([]byte, error)) *MockreaderSpanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockreaderSpanCall) DoAndReturn(f func(context.Context, kv.Getter, uint64) ([]byte, error)) *MockreaderSpanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
