// Code generated by MockGen. DO NOT EDIT.
// Source: ./entity_fetcher.go
//
// Generated by this command:
//
//	mockgen -typed=true -source=./entity_fetcher.go -destination=./entity_fetcher_mock.go -package=heimdall
//

// Package heimdall is a generated GoMock package.
package heimdall

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockentityFetcher is a mock of entityFetcher interface.
type MockentityFetcher[TEntity Entity] struct {
	ctrl     *gomock.Controller
	recorder *MockentityFetcherMockRecorder[TEntity]
}

// MockentityFetcherMockRecorder is the mock recorder for MockentityFetcher.
type MockentityFetcherMockRecorder[TEntity Entity] struct {
	mock *MockentityFetcher[TEntity]
}

// NewMockentityFetcher creates a new mock instance.
func NewMockentityFetcher[TEntity Entity](ctrl *gomock.Controller) *MockentityFetcher[TEntity] {
	mock := &MockentityFetcher[TEntity]{ctrl: ctrl}
	mock.recorder = &MockentityFetcherMockRecorder[TEntity]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockentityFetcher[TEntity]) EXPECT() *MockentityFetcherMockRecorder[TEntity] {
	return m.recorder
}

// FetchAllEntities mocks base method.
func (m *MockentityFetcher[TEntity]) FetchAllEntities(ctx context.Context) ([]TEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllEntities", ctx)
	ret0, _ := ret[0].([]TEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllEntities indicates an expected call of FetchAllEntities.
func (mr *MockentityFetcherMockRecorder[TEntity]) FetchAllEntities(ctx any) *MockentityFetcherFetchAllEntitiesCall[TEntity] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllEntities", reflect.TypeOf((*MockentityFetcher[TEntity])(nil).FetchAllEntities), ctx)
	return &MockentityFetcherFetchAllEntitiesCall[TEntity]{Call: call}
}

// MockentityFetcherFetchAllEntitiesCall wrap *gomock.Call
type MockentityFetcherFetchAllEntitiesCall[TEntity Entity] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockentityFetcherFetchAllEntitiesCall[TEntity]) Return(arg0 []TEntity, arg1 error) *MockentityFetcherFetchAllEntitiesCall[TEntity] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockentityFetcherFetchAllEntitiesCall[TEntity]) Do(f func(context.Context) ([]TEntity, error)) *MockentityFetcherFetchAllEntitiesCall[TEntity] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockentityFetcherFetchAllEntitiesCall[TEntity]) DoAndReturn(f func(context.Context) ([]TEntity, error)) *MockentityFetcherFetchAllEntitiesCall[TEntity] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchEntitiesRange mocks base method.
func (m *MockentityFetcher[TEntity]) FetchEntitiesRange(ctx context.Context, idRange ClosedRange) ([]TEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchEntitiesRange", ctx, idRange)
	ret0, _ := ret[0].([]TEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchEntitiesRange indicates an expected call of FetchEntitiesRange.
func (mr *MockentityFetcherMockRecorder[TEntity]) FetchEntitiesRange(ctx, idRange any) *MockentityFetcherFetchEntitiesRangeCall[TEntity] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEntitiesRange", reflect.TypeOf((*MockentityFetcher[TEntity])(nil).FetchEntitiesRange), ctx, idRange)
	return &MockentityFetcherFetchEntitiesRangeCall[TEntity]{Call: call}
}

// MockentityFetcherFetchEntitiesRangeCall wrap *gomock.Call
type MockentityFetcherFetchEntitiesRangeCall[TEntity Entity] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockentityFetcherFetchEntitiesRangeCall[TEntity]) Return(arg0 []TEntity, arg1 error) *MockentityFetcherFetchEntitiesRangeCall[TEntity] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockentityFetcherFetchEntitiesRangeCall[TEntity]) Do(f func(context.Context, ClosedRange) ([]TEntity, error)) *MockentityFetcherFetchEntitiesRangeCall[TEntity] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockentityFetcherFetchEntitiesRangeCall[TEntity]) DoAndReturn(f func(context.Context, ClosedRange) ([]TEntity, error)) *MockentityFetcherFetchEntitiesRangeCall[TEntity] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchEntityIdRange mocks base method.
func (m *MockentityFetcher[TEntity]) FetchEntityIdRange(ctx context.Context) (ClosedRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchEntityIdRange", ctx)
	ret0, _ := ret[0].(ClosedRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchEntityIdRange indicates an expected call of FetchEntityIdRange.
func (mr *MockentityFetcherMockRecorder[TEntity]) FetchEntityIdRange(ctx any) *MockentityFetcherFetchEntityIdRangeCall[TEntity] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEntityIdRange", reflect.TypeOf((*MockentityFetcher[TEntity])(nil).FetchEntityIdRange), ctx)
	return &MockentityFetcherFetchEntityIdRangeCall[TEntity]{Call: call}
}

// MockentityFetcherFetchEntityIdRangeCall wrap *gomock.Call
type MockentityFetcherFetchEntityIdRangeCall[TEntity Entity] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockentityFetcherFetchEntityIdRangeCall[TEntity]) Return(arg0 ClosedRange, arg1 error) *MockentityFetcherFetchEntityIdRangeCall[TEntity] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockentityFetcherFetchEntityIdRangeCall[TEntity]) Do(f func(context.Context) (ClosedRange, error)) *MockentityFetcherFetchEntityIdRangeCall[TEntity] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockentityFetcherFetchEntityIdRangeCall[TEntity]) DoAndReturn(f func(context.Context) (ClosedRange, error)) *MockentityFetcherFetchEntityIdRangeCall[TEntity] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
