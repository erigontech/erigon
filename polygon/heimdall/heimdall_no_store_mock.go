// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ledgerwatch/erigon/polygon/heimdall (interfaces: HeimdallNoStore)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./heimdall_no_store_mock.go -package=heimdall . HeimdallNoStore
//

// Package heimdall is a generated GoMock package.
package heimdall

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHeimdallNoStore is a mock of HeimdallNoStore interface.
type MockHeimdallNoStore struct {
	ctrl     *gomock.Controller
	recorder *MockHeimdallNoStoreMockRecorder
}

// MockHeimdallNoStoreMockRecorder is the mock recorder for MockHeimdallNoStore.
type MockHeimdallNoStoreMockRecorder struct {
	mock *MockHeimdallNoStore
}

// NewMockHeimdallNoStore creates a new mock instance.
func NewMockHeimdallNoStore(ctrl *gomock.Controller) *MockHeimdallNoStore {
	mock := &MockHeimdallNoStore{ctrl: ctrl}
	mock.recorder = &MockHeimdallNoStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeimdallNoStore) EXPECT() *MockHeimdallNoStoreMockRecorder {
	return m.recorder
}

// FetchCheckpoints mocks base method.
func (m *MockHeimdallNoStore) FetchCheckpoints(arg0 context.Context, arg1, arg2 CheckpointId) ([]*Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCheckpoints", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCheckpoints indicates an expected call of FetchCheckpoints.
func (mr *MockHeimdallNoStoreMockRecorder) FetchCheckpoints(arg0, arg1, arg2 any) *MockHeimdallNoStoreFetchCheckpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCheckpoints", reflect.TypeOf((*MockHeimdallNoStore)(nil).FetchCheckpoints), arg0, arg1, arg2)
	return &MockHeimdallNoStoreFetchCheckpointsCall{Call: call}
}

// MockHeimdallNoStoreFetchCheckpointsCall wrap *gomock.Call
type MockHeimdallNoStoreFetchCheckpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallNoStoreFetchCheckpointsCall) Return(arg0 []*Checkpoint, arg1 error) *MockHeimdallNoStoreFetchCheckpointsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallNoStoreFetchCheckpointsCall) Do(f func(context.Context, CheckpointId, CheckpointId) ([]*Checkpoint, error)) *MockHeimdallNoStoreFetchCheckpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallNoStoreFetchCheckpointsCall) DoAndReturn(f func(context.Context, CheckpointId, CheckpointId) ([]*Checkpoint, error)) *MockHeimdallNoStoreFetchCheckpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchCheckpointsFromBlock mocks base method.
func (m *MockHeimdallNoStore) FetchCheckpointsFromBlock(arg0 context.Context, arg1 uint64) (Waypoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCheckpointsFromBlock", arg0, arg1)
	ret0, _ := ret[0].(Waypoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCheckpointsFromBlock indicates an expected call of FetchCheckpointsFromBlock.
func (mr *MockHeimdallNoStoreMockRecorder) FetchCheckpointsFromBlock(arg0, arg1 any) *MockHeimdallNoStoreFetchCheckpointsFromBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCheckpointsFromBlock", reflect.TypeOf((*MockHeimdallNoStore)(nil).FetchCheckpointsFromBlock), arg0, arg1)
	return &MockHeimdallNoStoreFetchCheckpointsFromBlockCall{Call: call}
}

// MockHeimdallNoStoreFetchCheckpointsFromBlockCall wrap *gomock.Call
type MockHeimdallNoStoreFetchCheckpointsFromBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallNoStoreFetchCheckpointsFromBlockCall) Return(arg0 Waypoints, arg1 error) *MockHeimdallNoStoreFetchCheckpointsFromBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallNoStoreFetchCheckpointsFromBlockCall) Do(f func(context.Context, uint64) (Waypoints, error)) *MockHeimdallNoStoreFetchCheckpointsFromBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallNoStoreFetchCheckpointsFromBlockCall) DoAndReturn(f func(context.Context, uint64) (Waypoints, error)) *MockHeimdallNoStoreFetchCheckpointsFromBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchLatestSpan mocks base method.
func (m *MockHeimdallNoStore) FetchLatestSpan(arg0 context.Context) (*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLatestSpan", arg0)
	ret0, _ := ret[0].(*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLatestSpan indicates an expected call of FetchLatestSpan.
func (mr *MockHeimdallNoStoreMockRecorder) FetchLatestSpan(arg0 any) *MockHeimdallNoStoreFetchLatestSpanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLatestSpan", reflect.TypeOf((*MockHeimdallNoStore)(nil).FetchLatestSpan), arg0)
	return &MockHeimdallNoStoreFetchLatestSpanCall{Call: call}
}

// MockHeimdallNoStoreFetchLatestSpanCall wrap *gomock.Call
type MockHeimdallNoStoreFetchLatestSpanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallNoStoreFetchLatestSpanCall) Return(arg0 *Span, arg1 error) *MockHeimdallNoStoreFetchLatestSpanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallNoStoreFetchLatestSpanCall) Do(f func(context.Context) (*Span, error)) *MockHeimdallNoStoreFetchLatestSpanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallNoStoreFetchLatestSpanCall) DoAndReturn(f func(context.Context) (*Span, error)) *MockHeimdallNoStoreFetchLatestSpanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchMilestones mocks base method.
func (m *MockHeimdallNoStore) FetchMilestones(arg0 context.Context, arg1, arg2 MilestoneId) ([]*Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMilestones", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMilestones indicates an expected call of FetchMilestones.
func (mr *MockHeimdallNoStoreMockRecorder) FetchMilestones(arg0, arg1, arg2 any) *MockHeimdallNoStoreFetchMilestonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMilestones", reflect.TypeOf((*MockHeimdallNoStore)(nil).FetchMilestones), arg0, arg1, arg2)
	return &MockHeimdallNoStoreFetchMilestonesCall{Call: call}
}

// MockHeimdallNoStoreFetchMilestonesCall wrap *gomock.Call
type MockHeimdallNoStoreFetchMilestonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallNoStoreFetchMilestonesCall) Return(arg0 []*Milestone, arg1 error) *MockHeimdallNoStoreFetchMilestonesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallNoStoreFetchMilestonesCall) Do(f func(context.Context, MilestoneId, MilestoneId) ([]*Milestone, error)) *MockHeimdallNoStoreFetchMilestonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallNoStoreFetchMilestonesCall) DoAndReturn(f func(context.Context, MilestoneId, MilestoneId) ([]*Milestone, error)) *MockHeimdallNoStoreFetchMilestonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchMilestonesFromBlock mocks base method.
func (m *MockHeimdallNoStore) FetchMilestonesFromBlock(arg0 context.Context, arg1 uint64) (Waypoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMilestonesFromBlock", arg0, arg1)
	ret0, _ := ret[0].(Waypoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMilestonesFromBlock indicates an expected call of FetchMilestonesFromBlock.
func (mr *MockHeimdallNoStoreMockRecorder) FetchMilestonesFromBlock(arg0, arg1 any) *MockHeimdallNoStoreFetchMilestonesFromBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMilestonesFromBlock", reflect.TypeOf((*MockHeimdallNoStore)(nil).FetchMilestonesFromBlock), arg0, arg1)
	return &MockHeimdallNoStoreFetchMilestonesFromBlockCall{Call: call}
}

// MockHeimdallNoStoreFetchMilestonesFromBlockCall wrap *gomock.Call
type MockHeimdallNoStoreFetchMilestonesFromBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallNoStoreFetchMilestonesFromBlockCall) Return(arg0 Waypoints, arg1 error) *MockHeimdallNoStoreFetchMilestonesFromBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallNoStoreFetchMilestonesFromBlockCall) Do(f func(context.Context, uint64) (Waypoints, error)) *MockHeimdallNoStoreFetchMilestonesFromBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallNoStoreFetchMilestonesFromBlockCall) DoAndReturn(f func(context.Context, uint64) (Waypoints, error)) *MockHeimdallNoStoreFetchMilestonesFromBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchSpans mocks base method.
func (m *MockHeimdallNoStore) FetchSpans(arg0 context.Context, arg1, arg2 SpanId) ([]*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSpans", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSpans indicates an expected call of FetchSpans.
func (mr *MockHeimdallNoStoreMockRecorder) FetchSpans(arg0, arg1, arg2 any) *MockHeimdallNoStoreFetchSpansCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSpans", reflect.TypeOf((*MockHeimdallNoStore)(nil).FetchSpans), arg0, arg1, arg2)
	return &MockHeimdallNoStoreFetchSpansCall{Call: call}
}

// MockHeimdallNoStoreFetchSpansCall wrap *gomock.Call
type MockHeimdallNoStoreFetchSpansCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallNoStoreFetchSpansCall) Return(arg0 []*Span, arg1 error) *MockHeimdallNoStoreFetchSpansCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallNoStoreFetchSpansCall) Do(f func(context.Context, SpanId, SpanId) ([]*Span, error)) *MockHeimdallNoStoreFetchSpansCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallNoStoreFetchSpansCall) DoAndReturn(f func(context.Context, SpanId, SpanId) ([]*Span, error)) *MockHeimdallNoStoreFetchSpansCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchSpansFromBlock mocks base method.
func (m *MockHeimdallNoStore) FetchSpansFromBlock(arg0 context.Context, arg1 uint64) ([]*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSpansFromBlock", arg0, arg1)
	ret0, _ := ret[0].([]*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSpansFromBlock indicates an expected call of FetchSpansFromBlock.
func (mr *MockHeimdallNoStoreMockRecorder) FetchSpansFromBlock(arg0, arg1 any) *MockHeimdallNoStoreFetchSpansFromBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSpansFromBlock", reflect.TypeOf((*MockHeimdallNoStore)(nil).FetchSpansFromBlock), arg0, arg1)
	return &MockHeimdallNoStoreFetchSpansFromBlockCall{Call: call}
}

// MockHeimdallNoStoreFetchSpansFromBlockCall wrap *gomock.Call
type MockHeimdallNoStoreFetchSpansFromBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallNoStoreFetchSpansFromBlockCall) Return(arg0 []*Span, arg1 error) *MockHeimdallNoStoreFetchSpansFromBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallNoStoreFetchSpansFromBlockCall) Do(f func(context.Context, uint64) ([]*Span, error)) *MockHeimdallNoStoreFetchSpansFromBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallNoStoreFetchSpansFromBlockCall) DoAndReturn(f func(context.Context, uint64) ([]*Span, error)) *MockHeimdallNoStoreFetchSpansFromBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastCheckpointId mocks base method.
func (m *MockHeimdallNoStore) LastCheckpointId(arg0 context.Context) (CheckpointId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCheckpointId", arg0)
	ret0, _ := ret[0].(CheckpointId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastCheckpointId indicates an expected call of LastCheckpointId.
func (mr *MockHeimdallNoStoreMockRecorder) LastCheckpointId(arg0 any) *MockHeimdallNoStoreLastCheckpointIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCheckpointId", reflect.TypeOf((*MockHeimdallNoStore)(nil).LastCheckpointId), arg0)
	return &MockHeimdallNoStoreLastCheckpointIdCall{Call: call}
}

// MockHeimdallNoStoreLastCheckpointIdCall wrap *gomock.Call
type MockHeimdallNoStoreLastCheckpointIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallNoStoreLastCheckpointIdCall) Return(arg0 CheckpointId, arg1 bool, arg2 error) *MockHeimdallNoStoreLastCheckpointIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallNoStoreLastCheckpointIdCall) Do(f func(context.Context) (CheckpointId, bool, error)) *MockHeimdallNoStoreLastCheckpointIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallNoStoreLastCheckpointIdCall) DoAndReturn(f func(context.Context) (CheckpointId, bool, error)) *MockHeimdallNoStoreLastCheckpointIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastMilestoneId mocks base method.
func (m *MockHeimdallNoStore) LastMilestoneId(arg0 context.Context) (MilestoneId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastMilestoneId", arg0)
	ret0, _ := ret[0].(MilestoneId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastMilestoneId indicates an expected call of LastMilestoneId.
func (mr *MockHeimdallNoStoreMockRecorder) LastMilestoneId(arg0 any) *MockHeimdallNoStoreLastMilestoneIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastMilestoneId", reflect.TypeOf((*MockHeimdallNoStore)(nil).LastMilestoneId), arg0)
	return &MockHeimdallNoStoreLastMilestoneIdCall{Call: call}
}

// MockHeimdallNoStoreLastMilestoneIdCall wrap *gomock.Call
type MockHeimdallNoStoreLastMilestoneIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallNoStoreLastMilestoneIdCall) Return(arg0 MilestoneId, arg1 bool, arg2 error) *MockHeimdallNoStoreLastMilestoneIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallNoStoreLastMilestoneIdCall) Do(f func(context.Context) (MilestoneId, bool, error)) *MockHeimdallNoStoreLastMilestoneIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallNoStoreLastMilestoneIdCall) DoAndReturn(f func(context.Context) (MilestoneId, bool, error)) *MockHeimdallNoStoreLastMilestoneIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastSpanId mocks base method.
func (m *MockHeimdallNoStore) LastSpanId(arg0 context.Context) (SpanId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSpanId", arg0)
	ret0, _ := ret[0].(SpanId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastSpanId indicates an expected call of LastSpanId.
func (mr *MockHeimdallNoStoreMockRecorder) LastSpanId(arg0 any) *MockHeimdallNoStoreLastSpanIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSpanId", reflect.TypeOf((*MockHeimdallNoStore)(nil).LastSpanId), arg0)
	return &MockHeimdallNoStoreLastSpanIdCall{Call: call}
}

// MockHeimdallNoStoreLastSpanIdCall wrap *gomock.Call
type MockHeimdallNoStoreLastSpanIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallNoStoreLastSpanIdCall) Return(arg0 SpanId, arg1 bool, arg2 error) *MockHeimdallNoStoreLastSpanIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallNoStoreLastSpanIdCall) Do(f func(context.Context) (SpanId, bool, error)) *MockHeimdallNoStoreLastSpanIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallNoStoreLastSpanIdCall) DoAndReturn(f func(context.Context) (SpanId, bool, error)) *MockHeimdallNoStoreLastSpanIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OnCheckpointEvent mocks base method.
func (m *MockHeimdallNoStore) OnCheckpointEvent(arg0 context.Context, arg1 func(*Checkpoint)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnCheckpointEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnCheckpointEvent indicates an expected call of OnCheckpointEvent.
func (mr *MockHeimdallNoStoreMockRecorder) OnCheckpointEvent(arg0, arg1 any) *MockHeimdallNoStoreOnCheckpointEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnCheckpointEvent", reflect.TypeOf((*MockHeimdallNoStore)(nil).OnCheckpointEvent), arg0, arg1)
	return &MockHeimdallNoStoreOnCheckpointEventCall{Call: call}
}

// MockHeimdallNoStoreOnCheckpointEventCall wrap *gomock.Call
type MockHeimdallNoStoreOnCheckpointEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallNoStoreOnCheckpointEventCall) Return(arg0 error) *MockHeimdallNoStoreOnCheckpointEventCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallNoStoreOnCheckpointEventCall) Do(f func(context.Context, func(*Checkpoint)) error) *MockHeimdallNoStoreOnCheckpointEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallNoStoreOnCheckpointEventCall) DoAndReturn(f func(context.Context, func(*Checkpoint)) error) *MockHeimdallNoStoreOnCheckpointEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OnMilestoneEvent mocks base method.
func (m *MockHeimdallNoStore) OnMilestoneEvent(arg0 context.Context, arg1 func(*Milestone)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnMilestoneEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnMilestoneEvent indicates an expected call of OnMilestoneEvent.
func (mr *MockHeimdallNoStoreMockRecorder) OnMilestoneEvent(arg0, arg1 any) *MockHeimdallNoStoreOnMilestoneEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMilestoneEvent", reflect.TypeOf((*MockHeimdallNoStore)(nil).OnMilestoneEvent), arg0, arg1)
	return &MockHeimdallNoStoreOnMilestoneEventCall{Call: call}
}

// MockHeimdallNoStoreOnMilestoneEventCall wrap *gomock.Call
type MockHeimdallNoStoreOnMilestoneEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallNoStoreOnMilestoneEventCall) Return(arg0 error) *MockHeimdallNoStoreOnMilestoneEventCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallNoStoreOnMilestoneEventCall) Do(f func(context.Context, func(*Milestone)) error) *MockHeimdallNoStoreOnMilestoneEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallNoStoreOnMilestoneEventCall) DoAndReturn(f func(context.Context, func(*Milestone)) error) *MockHeimdallNoStoreOnMilestoneEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OnSpanEvent mocks base method.
func (m *MockHeimdallNoStore) OnSpanEvent(arg0 context.Context, arg1 func(*Span)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSpanEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnSpanEvent indicates an expected call of OnSpanEvent.
func (mr *MockHeimdallNoStoreMockRecorder) OnSpanEvent(arg0, arg1 any) *MockHeimdallNoStoreOnSpanEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSpanEvent", reflect.TypeOf((*MockHeimdallNoStore)(nil).OnSpanEvent), arg0, arg1)
	return &MockHeimdallNoStoreOnSpanEventCall{Call: call}
}

// MockHeimdallNoStoreOnSpanEventCall wrap *gomock.Call
type MockHeimdallNoStoreOnSpanEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallNoStoreOnSpanEventCall) Return(arg0 error) *MockHeimdallNoStoreOnSpanEventCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallNoStoreOnSpanEventCall) Do(f func(context.Context, func(*Span)) error) *MockHeimdallNoStoreOnSpanEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallNoStoreOnSpanEventCall) DoAndReturn(f func(context.Context, func(*Span)) error) *MockHeimdallNoStoreOnSpanEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
