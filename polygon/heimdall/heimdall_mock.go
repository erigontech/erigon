// Code generated by MockGen. DO NOT EDIT.
// Source: heimdall.go

// Package heimdall is a generated GoMock package.
package heimdall

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHeimdall is a mock of Heimdall interface.
type MockHeimdall struct {
	ctrl     *gomock.Controller
	recorder *MockHeimdallMockRecorder
}

// MockHeimdallMockRecorder is the mock recorder for MockHeimdall.
type MockHeimdallMockRecorder struct {
	mock *MockHeimdall
}

// NewMockHeimdall creates a new mock instance.
func NewMockHeimdall(ctrl *gomock.Controller) *MockHeimdall {
	mock := &MockHeimdall{ctrl: ctrl}
	mock.recorder = &MockHeimdallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeimdall) EXPECT() *MockHeimdallMockRecorder {
	return m.recorder
}

// FetchCheckpoints mocks base method.
func (m *MockHeimdall) FetchCheckpoints(ctx context.Context, io CheckpointIO, start, end CheckpointId) (Waypoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCheckpoints", ctx, io, start, end)
	ret0, _ := ret[0].(Waypoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCheckpoints indicates an expected call of FetchCheckpoints.
func (mr *MockHeimdallMockRecorder) FetchCheckpoints(ctx, io, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCheckpoints", reflect.TypeOf((*MockHeimdall)(nil).FetchCheckpoints), ctx, io, start, end)
}

// FetchCheckpointsFromBlock mocks base method.
func (m *MockHeimdall) FetchCheckpointsFromBlock(ctx context.Context, io CheckpointIO, startBlock uint64) (Waypoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCheckpointsFromBlock", ctx, io, startBlock)
	ret0, _ := ret[0].(Waypoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCheckpointsFromBlock indicates an expected call of FetchCheckpointsFromBlock.
func (mr *MockHeimdallMockRecorder) FetchCheckpointsFromBlock(ctx, io, startBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCheckpointsFromBlock", reflect.TypeOf((*MockHeimdall)(nil).FetchCheckpointsFromBlock), ctx, io, startBlock)
}

// FetchMilestones mocks base method.
func (m *MockHeimdall) FetchMilestones(ctx context.Context, io MilestoneIO, start, end MilestoneId) (Waypoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMilestones", ctx, io, start, end)
	ret0, _ := ret[0].(Waypoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMilestones indicates an expected call of FetchMilestones.
func (mr *MockHeimdallMockRecorder) FetchMilestones(ctx, io, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMilestones", reflect.TypeOf((*MockHeimdall)(nil).FetchMilestones), ctx, io, start, end)
}

// FetchMilestonesFromBlock mocks base method.
func (m *MockHeimdall) FetchMilestonesFromBlock(ctx context.Context, io MilestoneIO, startBlock uint64) (Waypoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMilestonesFromBlock", ctx, io, startBlock)
	ret0, _ := ret[0].(Waypoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMilestonesFromBlock indicates an expected call of FetchMilestonesFromBlock.
func (mr *MockHeimdallMockRecorder) FetchMilestonesFromBlock(ctx, io, startBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMilestonesFromBlock", reflect.TypeOf((*MockHeimdall)(nil).FetchMilestonesFromBlock), ctx, io, startBlock)
}

// FetchSpans mocks base method.
func (m *MockHeimdall) FetchSpans(ctx context.Context, io SpanIO, start, end SpanId) ([]*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSpans", ctx, io, start, end)
	ret0, _ := ret[0].([]*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSpans indicates an expected call of FetchSpans.
func (mr *MockHeimdallMockRecorder) FetchSpans(ctx, io, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSpans", reflect.TypeOf((*MockHeimdall)(nil).FetchSpans), ctx, io, start, end)
}

// FetchSpansFromBlock mocks base method.
func (m *MockHeimdall) FetchSpansFromBlock(ctx context.Context, io SpanIO, startBlock uint64) ([]*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSpansFromBlock", ctx, io, startBlock)
	ret0, _ := ret[0].([]*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSpansFromBlock indicates an expected call of FetchSpansFromBlock.
func (mr *MockHeimdallMockRecorder) FetchSpansFromBlock(ctx, io, startBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSpansFromBlock", reflect.TypeOf((*MockHeimdall)(nil).FetchSpansFromBlock), ctx, io, startBlock)
}

// LastCheckpointId mocks base method.
func (m *MockHeimdall) LastCheckpointId(ctx context.Context, io CheckpointIO) (CheckpointId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCheckpointId", ctx, io)
	ret0, _ := ret[0].(CheckpointId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastCheckpointId indicates an expected call of LastCheckpointId.
func (mr *MockHeimdallMockRecorder) LastCheckpointId(ctx, io interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCheckpointId", reflect.TypeOf((*MockHeimdall)(nil).LastCheckpointId), ctx, io)
}

// LastMilestoneId mocks base method.
func (m *MockHeimdall) LastMilestoneId(ctx context.Context, io MilestoneIO) (MilestoneId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastMilestoneId", ctx, io)
	ret0, _ := ret[0].(MilestoneId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastMilestoneId indicates an expected call of LastMilestoneId.
func (mr *MockHeimdallMockRecorder) LastMilestoneId(ctx, io interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastMilestoneId", reflect.TypeOf((*MockHeimdall)(nil).LastMilestoneId), ctx, io)
}

// LastSpanId mocks base method.
func (m *MockHeimdall) LastSpanId(ctx context.Context, io SpanIO) (SpanId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSpanId", ctx, io)
	ret0, _ := ret[0].(SpanId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastSpanId indicates an expected call of LastSpanId.
func (mr *MockHeimdallMockRecorder) LastSpanId(ctx, io interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSpanId", reflect.TypeOf((*MockHeimdall)(nil).LastSpanId), ctx, io)
}

// OnCheckpointEvent mocks base method.
func (m *MockHeimdall) OnCheckpointEvent(ctx context.Context, io CheckpointIO, callback func(*Checkpoint)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnCheckpointEvent", ctx, io, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnCheckpointEvent indicates an expected call of OnCheckpointEvent.
func (mr *MockHeimdallMockRecorder) OnCheckpointEvent(ctx, io, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnCheckpointEvent", reflect.TypeOf((*MockHeimdall)(nil).OnCheckpointEvent), ctx, io, callback)
}

// OnMilestoneEvent mocks base method.
func (m *MockHeimdall) OnMilestoneEvent(ctx context.Context, io MilestoneIO, callback func(*Milestone)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnMilestoneEvent", ctx, io, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnMilestoneEvent indicates an expected call of OnMilestoneEvent.
func (mr *MockHeimdallMockRecorder) OnMilestoneEvent(ctx, io, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMilestoneEvent", reflect.TypeOf((*MockHeimdall)(nil).OnMilestoneEvent), ctx, io, callback)
}

// OnSpanEvent mocks base method.
func (m *MockHeimdall) OnSpanEvent(ctx context.Context, io SpanIO, callback func(*Span)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSpanEvent", ctx, io, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnSpanEvent indicates an expected call of OnSpanEvent.
func (mr *MockHeimdallMockRecorder) OnSpanEvent(ctx, io, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSpanEvent", reflect.TypeOf((*MockHeimdall)(nil).OnSpanEvent), ctx, io, callback)
}
