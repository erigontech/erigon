// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ledgerwatch/erigon/polygon/heimdall (interfaces: Heimdall)

// Package heimdall is a generated GoMock package.
package heimdall

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHeimdall is a mock of Heimdall interface.
type MockHeimdall struct {
	ctrl     *gomock.Controller
	recorder *MockHeimdallMockRecorder
}

// MockHeimdallMockRecorder is the mock recorder for MockHeimdall.
type MockHeimdallMockRecorder struct {
	mock *MockHeimdall
}

// NewMockHeimdall creates a new mock instance.
func NewMockHeimdall(ctrl *gomock.Controller) *MockHeimdall {
	mock := &MockHeimdall{ctrl: ctrl}
	mock.recorder = &MockHeimdallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeimdall) EXPECT() *MockHeimdallMockRecorder {
	return m.recorder
}

// FetchCheckpoints mocks base method.
func (m *MockHeimdall) FetchCheckpoints(arg0 context.Context, arg1 CheckpointStore, arg2, arg3 CheckpointId) ([]*Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCheckpoints", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCheckpoints indicates an expected call of FetchCheckpoints.
func (mr *MockHeimdallMockRecorder) FetchCheckpoints(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCheckpoints", reflect.TypeOf((*MockHeimdall)(nil).FetchCheckpoints), arg0, arg1, arg2, arg3)
}

// FetchCheckpointsFromBlock mocks base method.
func (m *MockHeimdall) FetchCheckpointsFromBlock(arg0 context.Context, arg1 CheckpointStore, arg2 uint64) (Waypoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCheckpointsFromBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(Waypoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCheckpointsFromBlock indicates an expected call of FetchCheckpointsFromBlock.
func (mr *MockHeimdallMockRecorder) FetchCheckpointsFromBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCheckpointsFromBlock", reflect.TypeOf((*MockHeimdall)(nil).FetchCheckpointsFromBlock), arg0, arg1, arg2)
}

// FetchLatestSpan mocks base method.
func (m *MockHeimdall) FetchLatestSpan(arg0 context.Context, arg1 SpanStore) (*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLatestSpan", arg0, arg1)
	ret0, _ := ret[0].(*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLatestSpan indicates an expected call of FetchLatestSpan.
func (mr *MockHeimdallMockRecorder) FetchLatestSpan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLatestSpan", reflect.TypeOf((*MockHeimdall)(nil).FetchLatestSpan), arg0, arg1)
}

// FetchMilestones mocks base method.
func (m *MockHeimdall) FetchMilestones(arg0 context.Context, arg1 MilestoneStore, arg2, arg3 MilestoneId) ([]*Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMilestones", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMilestones indicates an expected call of FetchMilestones.
func (mr *MockHeimdallMockRecorder) FetchMilestones(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMilestones", reflect.TypeOf((*MockHeimdall)(nil).FetchMilestones), arg0, arg1, arg2, arg3)
}

// FetchMilestonesFromBlock mocks base method.
func (m *MockHeimdall) FetchMilestonesFromBlock(arg0 context.Context, arg1 MilestoneStore, arg2 uint64) (Waypoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMilestonesFromBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(Waypoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMilestonesFromBlock indicates an expected call of FetchMilestonesFromBlock.
func (mr *MockHeimdallMockRecorder) FetchMilestonesFromBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMilestonesFromBlock", reflect.TypeOf((*MockHeimdall)(nil).FetchMilestonesFromBlock), arg0, arg1, arg2)
}

// FetchSpans mocks base method.
func (m *MockHeimdall) FetchSpans(arg0 context.Context, arg1 SpanStore, arg2, arg3 SpanId) ([]*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSpans", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSpans indicates an expected call of FetchSpans.
func (mr *MockHeimdallMockRecorder) FetchSpans(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSpans", reflect.TypeOf((*MockHeimdall)(nil).FetchSpans), arg0, arg1, arg2, arg3)
}

// FetchSpansFromBlock mocks base method.
func (m *MockHeimdall) FetchSpansFromBlock(arg0 context.Context, arg1 SpanStore, arg2 uint64) ([]*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSpansFromBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSpansFromBlock indicates an expected call of FetchSpansFromBlock.
func (mr *MockHeimdallMockRecorder) FetchSpansFromBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSpansFromBlock", reflect.TypeOf((*MockHeimdall)(nil).FetchSpansFromBlock), arg0, arg1, arg2)
}

// LastCheckpointId mocks base method.
func (m *MockHeimdall) LastCheckpointId(arg0 context.Context, arg1 CheckpointStore) (CheckpointId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCheckpointId", arg0, arg1)
	ret0, _ := ret[0].(CheckpointId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastCheckpointId indicates an expected call of LastCheckpointId.
func (mr *MockHeimdallMockRecorder) LastCheckpointId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCheckpointId", reflect.TypeOf((*MockHeimdall)(nil).LastCheckpointId), arg0, arg1)
}

// LastMilestoneId mocks base method.
func (m *MockHeimdall) LastMilestoneId(arg0 context.Context, arg1 MilestoneStore) (MilestoneId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastMilestoneId", arg0, arg1)
	ret0, _ := ret[0].(MilestoneId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastMilestoneId indicates an expected call of LastMilestoneId.
func (mr *MockHeimdallMockRecorder) LastMilestoneId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastMilestoneId", reflect.TypeOf((*MockHeimdall)(nil).LastMilestoneId), arg0, arg1)
}

// LastSpanId mocks base method.
func (m *MockHeimdall) LastSpanId(arg0 context.Context, arg1 SpanStore) (SpanId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSpanId", arg0, arg1)
	ret0, _ := ret[0].(SpanId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastSpanId indicates an expected call of LastSpanId.
func (mr *MockHeimdallMockRecorder) LastSpanId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSpanId", reflect.TypeOf((*MockHeimdall)(nil).LastSpanId), arg0, arg1)
}

// OnCheckpointEvent mocks base method.
func (m *MockHeimdall) OnCheckpointEvent(arg0 context.Context, arg1 CheckpointStore, arg2 func(*Checkpoint)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnCheckpointEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnCheckpointEvent indicates an expected call of OnCheckpointEvent.
func (mr *MockHeimdallMockRecorder) OnCheckpointEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnCheckpointEvent", reflect.TypeOf((*MockHeimdall)(nil).OnCheckpointEvent), arg0, arg1, arg2)
}

// OnMilestoneEvent mocks base method.
func (m *MockHeimdall) OnMilestoneEvent(arg0 context.Context, arg1 MilestoneStore, arg2 func(*Milestone)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnMilestoneEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnMilestoneEvent indicates an expected call of OnMilestoneEvent.
func (mr *MockHeimdallMockRecorder) OnMilestoneEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMilestoneEvent", reflect.TypeOf((*MockHeimdall)(nil).OnMilestoneEvent), arg0, arg1, arg2)
}

// OnSpanEvent mocks base method.
func (m *MockHeimdall) OnSpanEvent(arg0 context.Context, arg1 SpanStore, arg2 func(*Span)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSpanEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnSpanEvent indicates an expected call of OnSpanEvent.
func (mr *MockHeimdallMockRecorder) OnSpanEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSpanEvent", reflect.TypeOf((*MockHeimdall)(nil).OnSpanEvent), arg0, arg1, arg2)
}
