// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ledgerwatch/erigon/polygon/heimdall (interfaces: Heimdall)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./heimdall_mock.go -package=heimdall . Heimdall
//

// Package heimdall is a generated GoMock package.
package heimdall

import (
	context "context"
	reflect "reflect"

	polygoncommon "github.com/ledgerwatch/erigon/polygon/polygoncommon"
	gomock "go.uber.org/mock/gomock"
)

// MockHeimdall is a mock of Heimdall interface.
type MockHeimdall struct {
	ctrl     *gomock.Controller
	recorder *MockHeimdallMockRecorder
}

// MockHeimdallMockRecorder is the mock recorder for MockHeimdall.
type MockHeimdallMockRecorder struct {
	mock *MockHeimdall
}

// NewMockHeimdall creates a new mock instance.
func NewMockHeimdall(ctrl *gomock.Controller) *MockHeimdall {
	mock := &MockHeimdall{ctrl: ctrl}
	mock.recorder = &MockHeimdallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeimdall) EXPECT() *MockHeimdallMockRecorder {
	return m.recorder
}

// FetchCheckpointsFromBlock mocks base method.
func (m *MockHeimdall) FetchCheckpointsFromBlock(arg0 context.Context, arg1 uint64) (Waypoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCheckpointsFromBlock", arg0, arg1)
	ret0, _ := ret[0].(Waypoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCheckpointsFromBlock indicates an expected call of FetchCheckpointsFromBlock.
func (mr *MockHeimdallMockRecorder) FetchCheckpointsFromBlock(arg0, arg1 any) *MockHeimdallFetchCheckpointsFromBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCheckpointsFromBlock", reflect.TypeOf((*MockHeimdall)(nil).FetchCheckpointsFromBlock), arg0, arg1)
	return &MockHeimdallFetchCheckpointsFromBlockCall{Call: call}
}

// MockHeimdallFetchCheckpointsFromBlockCall wrap *gomock.Call
type MockHeimdallFetchCheckpointsFromBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallFetchCheckpointsFromBlockCall) Return(arg0 Waypoints, arg1 error) *MockHeimdallFetchCheckpointsFromBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallFetchCheckpointsFromBlockCall) Do(f func(context.Context, uint64) (Waypoints, error)) *MockHeimdallFetchCheckpointsFromBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallFetchCheckpointsFromBlockCall) DoAndReturn(f func(context.Context, uint64) (Waypoints, error)) *MockHeimdallFetchCheckpointsFromBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchLatestSpans mocks base method.
func (m *MockHeimdall) FetchLatestSpans(arg0 context.Context, arg1 uint) ([]*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLatestSpans", arg0, arg1)
	ret0, _ := ret[0].([]*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLatestSpans indicates an expected call of FetchLatestSpans.
func (mr *MockHeimdallMockRecorder) FetchLatestSpans(arg0, arg1 any) *MockHeimdallFetchLatestSpansCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLatestSpans", reflect.TypeOf((*MockHeimdall)(nil).FetchLatestSpans), arg0, arg1)
	return &MockHeimdallFetchLatestSpansCall{Call: call}
}

// MockHeimdallFetchLatestSpansCall wrap *gomock.Call
type MockHeimdallFetchLatestSpansCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallFetchLatestSpansCall) Return(arg0 []*Span, arg1 error) *MockHeimdallFetchLatestSpansCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallFetchLatestSpansCall) Do(f func(context.Context, uint) ([]*Span, error)) *MockHeimdallFetchLatestSpansCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallFetchLatestSpansCall) DoAndReturn(f func(context.Context, uint) ([]*Span, error)) *MockHeimdallFetchLatestSpansCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchMilestonesFromBlock mocks base method.
func (m *MockHeimdall) FetchMilestonesFromBlock(arg0 context.Context, arg1 uint64) (Waypoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMilestonesFromBlock", arg0, arg1)
	ret0, _ := ret[0].(Waypoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMilestonesFromBlock indicates an expected call of FetchMilestonesFromBlock.
func (mr *MockHeimdallMockRecorder) FetchMilestonesFromBlock(arg0, arg1 any) *MockHeimdallFetchMilestonesFromBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMilestonesFromBlock", reflect.TypeOf((*MockHeimdall)(nil).FetchMilestonesFromBlock), arg0, arg1)
	return &MockHeimdallFetchMilestonesFromBlockCall{Call: call}
}

// MockHeimdallFetchMilestonesFromBlockCall wrap *gomock.Call
type MockHeimdallFetchMilestonesFromBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallFetchMilestonesFromBlockCall) Return(arg0 Waypoints, arg1 error) *MockHeimdallFetchMilestonesFromBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallFetchMilestonesFromBlockCall) Do(f func(context.Context, uint64) (Waypoints, error)) *MockHeimdallFetchMilestonesFromBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallFetchMilestonesFromBlockCall) DoAndReturn(f func(context.Context, uint64) (Waypoints, error)) *MockHeimdallFetchMilestonesFromBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterMilestoneObserver mocks base method.
func (m *MockHeimdall) RegisterMilestoneObserver(arg0 func(*Milestone)) polygoncommon.UnregisterFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMilestoneObserver", arg0)
	ret0, _ := ret[0].(polygoncommon.UnregisterFunc)
	return ret0
}

// RegisterMilestoneObserver indicates an expected call of RegisterMilestoneObserver.
func (mr *MockHeimdallMockRecorder) RegisterMilestoneObserver(arg0 any) *MockHeimdallRegisterMilestoneObserverCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMilestoneObserver", reflect.TypeOf((*MockHeimdall)(nil).RegisterMilestoneObserver), arg0)
	return &MockHeimdallRegisterMilestoneObserverCall{Call: call}
}

// MockHeimdallRegisterMilestoneObserverCall wrap *gomock.Call
type MockHeimdallRegisterMilestoneObserverCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallRegisterMilestoneObserverCall) Return(arg0 polygoncommon.UnregisterFunc) *MockHeimdallRegisterMilestoneObserverCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallRegisterMilestoneObserverCall) Do(f func(func(*Milestone)) polygoncommon.UnregisterFunc) *MockHeimdallRegisterMilestoneObserverCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallRegisterMilestoneObserverCall) DoAndReturn(f func(func(*Milestone)) polygoncommon.UnregisterFunc) *MockHeimdallRegisterMilestoneObserverCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterSpanObserver mocks base method.
func (m *MockHeimdall) RegisterSpanObserver(arg0 func(*Span)) polygoncommon.UnregisterFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSpanObserver", arg0)
	ret0, _ := ret[0].(polygoncommon.UnregisterFunc)
	return ret0
}

// RegisterSpanObserver indicates an expected call of RegisterSpanObserver.
func (mr *MockHeimdallMockRecorder) RegisterSpanObserver(arg0 any) *MockHeimdallRegisterSpanObserverCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSpanObserver", reflect.TypeOf((*MockHeimdall)(nil).RegisterSpanObserver), arg0)
	return &MockHeimdallRegisterSpanObserverCall{Call: call}
}

// MockHeimdallRegisterSpanObserverCall wrap *gomock.Call
type MockHeimdallRegisterSpanObserverCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallRegisterSpanObserverCall) Return(arg0 polygoncommon.UnregisterFunc) *MockHeimdallRegisterSpanObserverCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallRegisterSpanObserverCall) Do(f func(func(*Span)) polygoncommon.UnregisterFunc) *MockHeimdallRegisterSpanObserverCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallRegisterSpanObserverCall) DoAndReturn(f func(func(*Span)) polygoncommon.UnregisterFunc) *MockHeimdallRegisterSpanObserverCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
