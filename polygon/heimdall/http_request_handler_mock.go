// Code generated by MockGen. DO NOT EDIT.
// Source: ./http_request_handler.go
//
// Generated by this command:
//
//	mockgen -typed=true -source=./http_request_handler.go -destination=./http_request_handler_mock.go -package=heimdall httpRequestHandler
//

// Package heimdall is a generated GoMock package.
package heimdall

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockhttpRequestHandler is a mock of httpRequestHandler interface.
type MockhttpRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockhttpRequestHandlerMockRecorder
	isgomock struct{}
}

// MockhttpRequestHandlerMockRecorder is the mock recorder for MockhttpRequestHandler.
type MockhttpRequestHandlerMockRecorder struct {
	mock *MockhttpRequestHandler
}

// NewMockhttpRequestHandler creates a new mock instance.
func NewMockhttpRequestHandler(ctrl *gomock.Controller) *MockhttpRequestHandler {
	mock := &MockhttpRequestHandler{ctrl: ctrl}
	mock.recorder = &MockhttpRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhttpRequestHandler) EXPECT() *MockhttpRequestHandlerMockRecorder {
	return m.recorder
}

// CloseIdleConnections mocks base method.
func (m *MockhttpRequestHandler) CloseIdleConnections() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseIdleConnections")
}

// CloseIdleConnections indicates an expected call of CloseIdleConnections.
func (mr *MockhttpRequestHandlerMockRecorder) CloseIdleConnections() *MockhttpRequestHandlerCloseIdleConnectionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIdleConnections", reflect.TypeOf((*MockhttpRequestHandler)(nil).CloseIdleConnections))
	return &MockhttpRequestHandlerCloseIdleConnectionsCall{Call: call}
}

// MockhttpRequestHandlerCloseIdleConnectionsCall wrap *gomock.Call
type MockhttpRequestHandlerCloseIdleConnectionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockhttpRequestHandlerCloseIdleConnectionsCall) Return() *MockhttpRequestHandlerCloseIdleConnectionsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockhttpRequestHandlerCloseIdleConnectionsCall) Do(f func()) *MockhttpRequestHandlerCloseIdleConnectionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockhttpRequestHandlerCloseIdleConnectionsCall) DoAndReturn(f func()) *MockhttpRequestHandlerCloseIdleConnectionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Do mocks base method.
func (m *MockhttpRequestHandler) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockhttpRequestHandlerMockRecorder) Do(req any) *MockhttpRequestHandlerDoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockhttpRequestHandler)(nil).Do), req)
	return &MockhttpRequestHandlerDoCall{Call: call}
}

// MockhttpRequestHandlerDoCall wrap *gomock.Call
type MockhttpRequestHandlerDoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockhttpRequestHandlerDoCall) Return(arg0 *http.Response, arg1 error) *MockhttpRequestHandlerDoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockhttpRequestHandlerDoCall) Do(f func(*http.Request) (*http.Response, error)) *MockhttpRequestHandlerDoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockhttpRequestHandlerDoCall) DoAndReturn(f func(*http.Request) (*http.Response, error)) *MockhttpRequestHandlerDoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
