// Code generated by MockGen. DO NOT EDIT.
// Source: pool.go
//
// Generated by this command:
//
//	mockgen -source=pool.go -destination=pool_mock.go -package=txpool -imports gomock=go.uber.org/mock/gomock
//

// Package txpool is a generated GoMock package.
package txpool

import (
	context "context"
	reflect "reflect"

	chain "github.com/erigontech/erigon-lib/chain"
	common "github.com/erigontech/erigon-lib/common"
	remote "github.com/erigontech/erigon-lib/gointerfaces/remote"
	kv "github.com/erigontech/erigon-lib/kv"
	types "github.com/erigontech/erigon-lib/types"
	gomock "go.uber.org/mock/gomock"
)

// MockPolicyValidator is a mock of PolicyValidator interface.
type MockPolicyValidator struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyValidatorMockRecorder
	isgomock struct{}
}

// MockPolicyValidatorMockRecorder is the mock recorder for MockPolicyValidator.
type MockPolicyValidatorMockRecorder struct {
	mock *MockPolicyValidator
}

// NewMockPolicyValidator creates a new mock instance.
func NewMockPolicyValidator(ctrl *gomock.Controller) *MockPolicyValidator {
	mock := &MockPolicyValidator{ctrl: ctrl}
	mock.recorder = &MockPolicyValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyValidator) EXPECT() *MockPolicyValidatorMockRecorder {
	return m.recorder
}

// IsActionAllowed mocks base method.
func (m *MockPolicyValidator) IsActionAllowed(ctx context.Context, addr common.Address, policy byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActionAllowed", ctx, addr, policy)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsActionAllowed indicates an expected call of IsActionAllowed.
func (mr *MockPolicyValidatorMockRecorder) IsActionAllowed(ctx, addr, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActionAllowed", reflect.TypeOf((*MockPolicyValidator)(nil).IsActionAllowed), ctx, addr, policy)
}

// MockPool is a mock of Pool interface.
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
	isgomock struct{}
}

// MockPoolMockRecorder is the mock recorder for MockPool.
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance.
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPool) EXPECT() *MockPoolMockRecorder {
	return m.recorder
}

// AddLocalTxs mocks base method.
func (m *MockPool) AddLocalTxs(ctx context.Context, newTxs types.TxSlots, tx kv.Tx) ([]DiscardReason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocalTxs", ctx, newTxs, tx)
	ret0, _ := ret[0].([]DiscardReason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocalTxs indicates an expected call of AddLocalTxs.
func (mr *MockPoolMockRecorder) AddLocalTxs(ctx, newTxs, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocalTxs", reflect.TypeOf((*MockPool)(nil).AddLocalTxs), ctx, newTxs, tx)
}

// AddNewGoodPeer mocks base method.
func (m *MockPool) AddNewGoodPeer(peerID types.PeerID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNewGoodPeer", peerID)
}

// AddNewGoodPeer indicates an expected call of AddNewGoodPeer.
func (mr *MockPoolMockRecorder) AddNewGoodPeer(peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewGoodPeer", reflect.TypeOf((*MockPool)(nil).AddNewGoodPeer), peerID)
}

// AddRemoteTxs mocks base method.
func (m *MockPool) AddRemoteTxs(ctx context.Context, newTxs types.TxSlots) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRemoteTxs", ctx, newTxs)
}

// AddRemoteTxs indicates an expected call of AddRemoteTxs.
func (mr *MockPoolMockRecorder) AddRemoteTxs(ctx, newTxs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteTxs", reflect.TypeOf((*MockPool)(nil).AddRemoteTxs), ctx, newTxs)
}

// GetRlp mocks base method.
func (m *MockPool) GetRlp(tx kv.Tx, hash []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRlp", tx, hash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRlp indicates an expected call of GetRlp.
func (mr *MockPoolMockRecorder) GetRlp(tx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRlp", reflect.TypeOf((*MockPool)(nil).GetRlp), tx, hash)
}

// IdHashKnown mocks base method.
func (m *MockPool) IdHashKnown(tx kv.Tx, hash []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdHashKnown", tx, hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdHashKnown indicates an expected call of IdHashKnown.
func (mr *MockPoolMockRecorder) IdHashKnown(tx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdHashKnown", reflect.TypeOf((*MockPool)(nil).IdHashKnown), tx, hash)
}

// MarkForDiscardFromPendingBest mocks base method.
func (m *MockPool) MarkForDiscardFromPendingBest(hash common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkForDiscardFromPendingBest", hash)
}

// MarkForDiscardFromPendingBest indicates an expected call of MarkForDiscardFromPendingBest.
func (mr *MockPoolMockRecorder) MarkForDiscardFromPendingBest(hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkForDiscardFromPendingBest", reflect.TypeOf((*MockPool)(nil).MarkForDiscardFromPendingBest), hash)
}

// OnNewBlock mocks base method.
func (m *MockPool) OnNewBlock(ctx context.Context, stateChanges *remote.StateChangeBatch, unwindTxs, minedTxs types.TxSlots, tx kv.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnNewBlock", ctx, stateChanges, unwindTxs, minedTxs, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnNewBlock indicates an expected call of OnNewBlock.
func (mr *MockPoolMockRecorder) OnNewBlock(ctx, stateChanges, unwindTxs, minedTxs, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewBlock", reflect.TypeOf((*MockPool)(nil).OnNewBlock), ctx, stateChanges, unwindTxs, minedTxs, tx)
}

// PostYield mocks base method.
func (m *MockPool) PostYield() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostYield")
}

// PostYield indicates an expected call of PostYield.
func (mr *MockPoolMockRecorder) PostYield() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostYield", reflect.TypeOf((*MockPool)(nil).PostYield))
}

// PreYield mocks base method.
func (m *MockPool) PreYield() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PreYield")
}

// PreYield indicates an expected call of PreYield.
func (mr *MockPoolMockRecorder) PreYield() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreYield", reflect.TypeOf((*MockPool)(nil).PreYield))
}

// RequeueBest mocks base method.
func (m *MockPool) RequeueBest(hash common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequeueBest", hash)
}

// RequeueBest indicates an expected call of RequeueBest.
func (mr *MockPoolMockRecorder) RequeueBest(hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequeueBest", reflect.TypeOf((*MockPool)(nil).RequeueBest), hash)
}

// Started mocks base method.
func (m *MockPool) Started() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Started")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Started indicates an expected call of Started.
func (mr *MockPoolMockRecorder) Started() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Started", reflect.TypeOf((*MockPool)(nil).Started))
}

// ValidateSerializedTxn mocks base method.
func (m *MockPool) ValidateSerializedTxn(serializedTxn []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSerializedTxn", serializedTxn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateSerializedTxn indicates an expected call of ValidateSerializedTxn.
func (mr *MockPoolMockRecorder) ValidateSerializedTxn(serializedTxn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSerializedTxn", reflect.TypeOf((*MockPool)(nil).ValidateSerializedTxn), serializedTxn)
}

// YieldBest mocks base method.
func (m *MockPool) YieldBest(n uint16, txs *types.TxsRlp, tx kv.Tx, onTopOf, availableGas, availableBlobGas uint64) (bool, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "YieldBest", n, txs, tx, onTopOf, availableGas, availableBlobGas)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// YieldBest indicates an expected call of YieldBest.
func (mr *MockPoolMockRecorder) YieldBest(n, txs, tx, onTopOf, availableGas, availableBlobGas any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YieldBest", reflect.TypeOf((*MockPool)(nil).YieldBest), n, txs, tx, onTopOf, availableGas, availableBlobGas)
}

// MockFeeCalculator is a mock of FeeCalculator interface.
type MockFeeCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockFeeCalculatorMockRecorder
	isgomock struct{}
}

// MockFeeCalculatorMockRecorder is the mock recorder for MockFeeCalculator.
type MockFeeCalculatorMockRecorder struct {
	mock *MockFeeCalculator
}

// NewMockFeeCalculator creates a new mock instance.
func NewMockFeeCalculator(ctrl *gomock.Controller) *MockFeeCalculator {
	mock := &MockFeeCalculator{ctrl: ctrl}
	mock.recorder = &MockFeeCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeeCalculator) EXPECT() *MockFeeCalculatorMockRecorder {
	return m.recorder
}

// CurrentFees mocks base method.
func (m *MockFeeCalculator) CurrentFees(chainConfig *chain.Config, db kv.Getter) (uint64, uint64, uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentFees", chainConfig, db)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(uint64)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// CurrentFees indicates an expected call of CurrentFees.
func (mr *MockFeeCalculatorMockRecorder) CurrentFees(chainConfig, db any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentFees", reflect.TypeOf((*MockFeeCalculator)(nil).CurrentFees), chainConfig, db)
}
