// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erigontech/erigon/zk/datastream/server (interfaces: DataStreamServer)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=../mocks/data_stream_server_mock.go -package=mocks . DataStreamServer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "github.com/erigontech/erigon-lib/common"
	kv "github.com/erigontech/erigon-lib/kv"
	types "github.com/erigontech/erigon/core/types"
	server "github.com/erigontech/erigon/zk/datastream/server"
	types0 "github.com/erigontech/erigon/zk/datastream/types"
	hermez_db "github.com/erigontech/erigon/zk/hermez_db"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStreamServer is a mock of DataStreamServer interface.
type MockDataStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockDataStreamServerMockRecorder
	isgomock struct{}
}

// MockDataStreamServerMockRecorder is the mock recorder for MockDataStreamServer.
type MockDataStreamServerMockRecorder struct {
	mock *MockDataStreamServer
}

// NewMockDataStreamServer creates a new mock instance.
func NewMockDataStreamServer(ctrl *gomock.Controller) *MockDataStreamServer {
	mock := &MockDataStreamServer{ctrl: ctrl}
	mock.recorder = &MockDataStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStreamServer) EXPECT() *MockDataStreamServerMockRecorder {
	return m.recorder
}

// GetChainId mocks base method.
func (m *MockDataStreamServer) GetChainId() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainId")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetChainId indicates an expected call of GetChainId.
func (mr *MockDataStreamServerMockRecorder) GetChainId() *MockDataStreamServerGetChainIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainId", reflect.TypeOf((*MockDataStreamServer)(nil).GetChainId))
	return &MockDataStreamServerGetChainIdCall{Call: call}
}

// MockDataStreamServerGetChainIdCall wrap *gomock.Call
type MockDataStreamServerGetChainIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerGetChainIdCall) Return(arg0 uint64) *MockDataStreamServerGetChainIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerGetChainIdCall) Do(f func() uint64) *MockDataStreamServerGetChainIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerGetChainIdCall) DoAndReturn(f func() uint64) *MockDataStreamServerGetChainIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHighestBatchNumber mocks base method.
func (m *MockDataStreamServer) GetHighestBatchNumber() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighestBatchNumber")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighestBatchNumber indicates an expected call of GetHighestBatchNumber.
func (mr *MockDataStreamServerMockRecorder) GetHighestBatchNumber() *MockDataStreamServerGetHighestBatchNumberCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighestBatchNumber", reflect.TypeOf((*MockDataStreamServer)(nil).GetHighestBatchNumber))
	return &MockDataStreamServerGetHighestBatchNumberCall{Call: call}
}

// MockDataStreamServerGetHighestBatchNumberCall wrap *gomock.Call
type MockDataStreamServerGetHighestBatchNumberCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerGetHighestBatchNumberCall) Return(arg0 uint64, arg1 error) *MockDataStreamServerGetHighestBatchNumberCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerGetHighestBatchNumberCall) Do(f func() (uint64, error)) *MockDataStreamServerGetHighestBatchNumberCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerGetHighestBatchNumberCall) DoAndReturn(f func() (uint64, error)) *MockDataStreamServerGetHighestBatchNumberCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHighestBlockNumber mocks base method.
func (m *MockDataStreamServer) GetHighestBlockNumber() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighestBlockNumber")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighestBlockNumber indicates an expected call of GetHighestBlockNumber.
func (mr *MockDataStreamServerMockRecorder) GetHighestBlockNumber() *MockDataStreamServerGetHighestBlockNumberCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighestBlockNumber", reflect.TypeOf((*MockDataStreamServer)(nil).GetHighestBlockNumber))
	return &MockDataStreamServerGetHighestBlockNumberCall{Call: call}
}

// MockDataStreamServerGetHighestBlockNumberCall wrap *gomock.Call
type MockDataStreamServerGetHighestBlockNumberCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerGetHighestBlockNumberCall) Return(arg0 uint64, arg1 error) *MockDataStreamServerGetHighestBlockNumberCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerGetHighestBlockNumberCall) Do(f func() (uint64, error)) *MockDataStreamServerGetHighestBlockNumberCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerGetHighestBlockNumberCall) DoAndReturn(f func() (uint64, error)) *MockDataStreamServerGetHighestBlockNumberCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHighestClosedBatch mocks base method.
func (m *MockDataStreamServer) GetHighestClosedBatch() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighestClosedBatch")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighestClosedBatch indicates an expected call of GetHighestClosedBatch.
func (mr *MockDataStreamServerMockRecorder) GetHighestClosedBatch() *MockDataStreamServerGetHighestClosedBatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighestClosedBatch", reflect.TypeOf((*MockDataStreamServer)(nil).GetHighestClosedBatch))
	return &MockDataStreamServerGetHighestClosedBatchCall{Call: call}
}

// MockDataStreamServerGetHighestClosedBatchCall wrap *gomock.Call
type MockDataStreamServerGetHighestClosedBatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerGetHighestClosedBatchCall) Return(arg0 uint64, arg1 error) *MockDataStreamServerGetHighestClosedBatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerGetHighestClosedBatchCall) Do(f func() (uint64, error)) *MockDataStreamServerGetHighestClosedBatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerGetHighestClosedBatchCall) DoAndReturn(f func() (uint64, error)) *MockDataStreamServerGetHighestClosedBatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHighestClosedBatchNoCache mocks base method.
func (m *MockDataStreamServer) GetHighestClosedBatchNoCache() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighestClosedBatchNoCache")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighestClosedBatchNoCache indicates an expected call of GetHighestClosedBatchNoCache.
func (mr *MockDataStreamServerMockRecorder) GetHighestClosedBatchNoCache() *MockDataStreamServerGetHighestClosedBatchNoCacheCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighestClosedBatchNoCache", reflect.TypeOf((*MockDataStreamServer)(nil).GetHighestClosedBatchNoCache))
	return &MockDataStreamServerGetHighestClosedBatchNoCacheCall{Call: call}
}

// MockDataStreamServerGetHighestClosedBatchNoCacheCall wrap *gomock.Call
type MockDataStreamServerGetHighestClosedBatchNoCacheCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerGetHighestClosedBatchNoCacheCall) Return(arg0 uint64, arg1 error) *MockDataStreamServerGetHighestClosedBatchNoCacheCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerGetHighestClosedBatchNoCacheCall) Do(f func() (uint64, error)) *MockDataStreamServerGetHighestClosedBatchNoCacheCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerGetHighestClosedBatchNoCacheCall) DoAndReturn(f func() (uint64, error)) *MockDataStreamServerGetHighestClosedBatchNoCacheCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStreamServer mocks base method.
func (m *MockDataStreamServer) GetStreamServer() server.StreamServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamServer")
	ret0, _ := ret[0].(server.StreamServer)
	return ret0
}

// GetStreamServer indicates an expected call of GetStreamServer.
func (mr *MockDataStreamServerMockRecorder) GetStreamServer() *MockDataStreamServerGetStreamServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamServer", reflect.TypeOf((*MockDataStreamServer)(nil).GetStreamServer))
	return &MockDataStreamServerGetStreamServerCall{Call: call}
}

// MockDataStreamServerGetStreamServerCall wrap *gomock.Call
type MockDataStreamServerGetStreamServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerGetStreamServerCall) Return(arg0 server.StreamServer) *MockDataStreamServerGetStreamServerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerGetStreamServerCall) Do(f func() server.StreamServer) *MockDataStreamServerGetStreamServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerGetStreamServerCall) DoAndReturn(f func() server.StreamServer) *MockDataStreamServerGetStreamServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsLastEntryBatchEnd mocks base method.
func (m *MockDataStreamServer) IsLastEntryBatchEnd() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLastEntryBatchEnd")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLastEntryBatchEnd indicates an expected call of IsLastEntryBatchEnd.
func (mr *MockDataStreamServerMockRecorder) IsLastEntryBatchEnd() *MockDataStreamServerIsLastEntryBatchEndCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLastEntryBatchEnd", reflect.TypeOf((*MockDataStreamServer)(nil).IsLastEntryBatchEnd))
	return &MockDataStreamServerIsLastEntryBatchEndCall{Call: call}
}

// MockDataStreamServerIsLastEntryBatchEndCall wrap *gomock.Call
type MockDataStreamServerIsLastEntryBatchEndCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerIsLastEntryBatchEndCall) Return(isBatchEnd bool, err error) *MockDataStreamServerIsLastEntryBatchEndCall {
	c.Call = c.Call.Return(isBatchEnd, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerIsLastEntryBatchEndCall) Do(f func() (bool, error)) *MockDataStreamServerIsLastEntryBatchEndCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerIsLastEntryBatchEndCall) DoAndReturn(f func() (bool, error)) *MockDataStreamServerIsLastEntryBatchEndCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadBatches mocks base method.
func (m *MockDataStreamServer) ReadBatches(start, end uint64) ([][]*types0.FullL2Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBatches", start, end)
	ret0, _ := ret[0].([][]*types0.FullL2Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBatches indicates an expected call of ReadBatches.
func (mr *MockDataStreamServerMockRecorder) ReadBatches(start, end any) *MockDataStreamServerReadBatchesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBatches", reflect.TypeOf((*MockDataStreamServer)(nil).ReadBatches), start, end)
	return &MockDataStreamServerReadBatchesCall{Call: call}
}

// MockDataStreamServerReadBatchesCall wrap *gomock.Call
type MockDataStreamServerReadBatchesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerReadBatchesCall) Return(arg0 [][]*types0.FullL2Block, arg1 error) *MockDataStreamServerReadBatchesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerReadBatchesCall) Do(f func(uint64, uint64) ([][]*types0.FullL2Block, error)) *MockDataStreamServerReadBatchesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerReadBatchesCall) DoAndReturn(f func(uint64, uint64) ([][]*types0.FullL2Block, error)) *MockDataStreamServerReadBatchesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadBatchesWithConcurrency mocks base method.
func (m *MockDataStreamServer) ReadBatchesWithConcurrency(start, end uint64) ([][]*types0.FullL2Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBatchesWithConcurrency", start, end)
	ret0, _ := ret[0].([][]*types0.FullL2Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBatchesWithConcurrency indicates an expected call of ReadBatchesWithConcurrency.
func (mr *MockDataStreamServerMockRecorder) ReadBatchesWithConcurrency(start, end any) *MockDataStreamServerReadBatchesWithConcurrencyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBatchesWithConcurrency", reflect.TypeOf((*MockDataStreamServer)(nil).ReadBatchesWithConcurrency), start, end)
	return &MockDataStreamServerReadBatchesWithConcurrencyCall{Call: call}
}

// MockDataStreamServerReadBatchesWithConcurrencyCall wrap *gomock.Call
type MockDataStreamServerReadBatchesWithConcurrencyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerReadBatchesWithConcurrencyCall) Return(arg0 [][]*types0.FullL2Block, arg1 error) *MockDataStreamServerReadBatchesWithConcurrencyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerReadBatchesWithConcurrencyCall) Do(f func(uint64, uint64) ([][]*types0.FullL2Block, error)) *MockDataStreamServerReadBatchesWithConcurrencyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerReadBatchesWithConcurrencyCall) DoAndReturn(f func(uint64, uint64) ([][]*types0.FullL2Block, error)) *MockDataStreamServerReadBatchesWithConcurrencyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnwindIfNecessary mocks base method.
func (m *MockDataStreamServer) UnwindIfNecessary(logPrefix string, reader server.DbReader, blockNum, prevBlockBatchNum, batchNum uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnwindIfNecessary", logPrefix, reader, blockNum, prevBlockBatchNum, batchNum)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnwindIfNecessary indicates an expected call of UnwindIfNecessary.
func (mr *MockDataStreamServerMockRecorder) UnwindIfNecessary(logPrefix, reader, blockNum, prevBlockBatchNum, batchNum any) *MockDataStreamServerUnwindIfNecessaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnwindIfNecessary", reflect.TypeOf((*MockDataStreamServer)(nil).UnwindIfNecessary), logPrefix, reader, blockNum, prevBlockBatchNum, batchNum)
	return &MockDataStreamServerUnwindIfNecessaryCall{Call: call}
}

// MockDataStreamServerUnwindIfNecessaryCall wrap *gomock.Call
type MockDataStreamServerUnwindIfNecessaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerUnwindIfNecessaryCall) Return(arg0 error) *MockDataStreamServerUnwindIfNecessaryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerUnwindIfNecessaryCall) Do(f func(string, server.DbReader, uint64, uint64, uint64) error) *MockDataStreamServerUnwindIfNecessaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerUnwindIfNecessaryCall) DoAndReturn(f func(string, server.DbReader, uint64, uint64, uint64) error) *MockDataStreamServerUnwindIfNecessaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnwindToBatchStart mocks base method.
func (m *MockDataStreamServer) UnwindToBatchStart(batchNumber uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnwindToBatchStart", batchNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnwindToBatchStart indicates an expected call of UnwindToBatchStart.
func (mr *MockDataStreamServerMockRecorder) UnwindToBatchStart(batchNumber any) *MockDataStreamServerUnwindToBatchStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnwindToBatchStart", reflect.TypeOf((*MockDataStreamServer)(nil).UnwindToBatchStart), batchNumber)
	return &MockDataStreamServerUnwindToBatchStartCall{Call: call}
}

// MockDataStreamServerUnwindToBatchStartCall wrap *gomock.Call
type MockDataStreamServerUnwindToBatchStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerUnwindToBatchStartCall) Return(arg0 error) *MockDataStreamServerUnwindToBatchStartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerUnwindToBatchStartCall) Do(f func(uint64) error) *MockDataStreamServerUnwindToBatchStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerUnwindToBatchStartCall) DoAndReturn(f func(uint64) error) *MockDataStreamServerUnwindToBatchStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnwindToBlock mocks base method.
func (m *MockDataStreamServer) UnwindToBlock(blockNumber uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnwindToBlock", blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnwindToBlock indicates an expected call of UnwindToBlock.
func (mr *MockDataStreamServerMockRecorder) UnwindToBlock(blockNumber any) *MockDataStreamServerUnwindToBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnwindToBlock", reflect.TypeOf((*MockDataStreamServer)(nil).UnwindToBlock), blockNumber)
	return &MockDataStreamServerUnwindToBlockCall{Call: call}
}

// MockDataStreamServerUnwindToBlockCall wrap *gomock.Call
type MockDataStreamServerUnwindToBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerUnwindToBlockCall) Return(arg0 error) *MockDataStreamServerUnwindToBlockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerUnwindToBlockCall) Do(f func(uint64) error) *MockDataStreamServerUnwindToBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerUnwindToBlockCall) DoAndReturn(f func(uint64) error) *MockDataStreamServerUnwindToBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteBatchEnd mocks base method.
func (m *MockDataStreamServer) WriteBatchEnd(reader server.DbReader, batchNumber uint64, stateRoot, localExitRoot *common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBatchEnd", reader, batchNumber, stateRoot, localExitRoot)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBatchEnd indicates an expected call of WriteBatchEnd.
func (mr *MockDataStreamServerMockRecorder) WriteBatchEnd(reader, batchNumber, stateRoot, localExitRoot any) *MockDataStreamServerWriteBatchEndCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBatchEnd", reflect.TypeOf((*MockDataStreamServer)(nil).WriteBatchEnd), reader, batchNumber, stateRoot, localExitRoot)
	return &MockDataStreamServerWriteBatchEndCall{Call: call}
}

// MockDataStreamServerWriteBatchEndCall wrap *gomock.Call
type MockDataStreamServerWriteBatchEndCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerWriteBatchEndCall) Return(err error) *MockDataStreamServerWriteBatchEndCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerWriteBatchEndCall) Do(f func(server.DbReader, uint64, *common.Hash, *common.Hash) error) *MockDataStreamServerWriteBatchEndCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerWriteBatchEndCall) DoAndReturn(f func(server.DbReader, uint64, *common.Hash, *common.Hash) error) *MockDataStreamServerWriteBatchEndCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteBlockWithBatchStartToStream mocks base method.
func (m *MockDataStreamServer) WriteBlockWithBatchStartToStream(logPrefix string, tx kv.Tx, reader server.DbReader, forkId, batchNum, prevBlockBatchNum uint64, prevBlock, block types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBlockWithBatchStartToStream", logPrefix, tx, reader, forkId, batchNum, prevBlockBatchNum, prevBlock, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBlockWithBatchStartToStream indicates an expected call of WriteBlockWithBatchStartToStream.
func (mr *MockDataStreamServerMockRecorder) WriteBlockWithBatchStartToStream(logPrefix, tx, reader, forkId, batchNum, prevBlockBatchNum, prevBlock, block any) *MockDataStreamServerWriteBlockWithBatchStartToStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBlockWithBatchStartToStream", reflect.TypeOf((*MockDataStreamServer)(nil).WriteBlockWithBatchStartToStream), logPrefix, tx, reader, forkId, batchNum, prevBlockBatchNum, prevBlock, block)
	return &MockDataStreamServerWriteBlockWithBatchStartToStreamCall{Call: call}
}

// MockDataStreamServerWriteBlockWithBatchStartToStreamCall wrap *gomock.Call
type MockDataStreamServerWriteBlockWithBatchStartToStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerWriteBlockWithBatchStartToStreamCall) Return(err error) *MockDataStreamServerWriteBlockWithBatchStartToStreamCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerWriteBlockWithBatchStartToStreamCall) Do(f func(string, kv.Tx, server.DbReader, uint64, uint64, uint64, types.Block, types.Block) error) *MockDataStreamServerWriteBlockWithBatchStartToStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerWriteBlockWithBatchStartToStreamCall) DoAndReturn(f func(string, kv.Tx, server.DbReader, uint64, uint64, uint64, types.Block, types.Block) error) *MockDataStreamServerWriteBlockWithBatchStartToStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteBlocksToStreamConsecutively mocks base method.
func (m *MockDataStreamServer) WriteBlocksToStreamConsecutively(ctx context.Context, logPrefix string, tx kv.Tx, reader server.DbReader, from, to uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBlocksToStreamConsecutively", ctx, logPrefix, tx, reader, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBlocksToStreamConsecutively indicates an expected call of WriteBlocksToStreamConsecutively.
func (mr *MockDataStreamServerMockRecorder) WriteBlocksToStreamConsecutively(ctx, logPrefix, tx, reader, from, to any) *MockDataStreamServerWriteBlocksToStreamConsecutivelyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBlocksToStreamConsecutively", reflect.TypeOf((*MockDataStreamServer)(nil).WriteBlocksToStreamConsecutively), ctx, logPrefix, tx, reader, from, to)
	return &MockDataStreamServerWriteBlocksToStreamConsecutivelyCall{Call: call}
}

// MockDataStreamServerWriteBlocksToStreamConsecutivelyCall wrap *gomock.Call
type MockDataStreamServerWriteBlocksToStreamConsecutivelyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerWriteBlocksToStreamConsecutivelyCall) Return(arg0 error) *MockDataStreamServerWriteBlocksToStreamConsecutivelyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerWriteBlocksToStreamConsecutivelyCall) Do(f func(context.Context, string, kv.Tx, server.DbReader, uint64, uint64) error) *MockDataStreamServerWriteBlocksToStreamConsecutivelyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerWriteBlocksToStreamConsecutivelyCall) DoAndReturn(f func(context.Context, string, kv.Tx, server.DbReader, uint64, uint64) error) *MockDataStreamServerWriteBlocksToStreamConsecutivelyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteGenesisToStream mocks base method.
func (m *MockDataStreamServer) WriteGenesisToStream(genesis *types.Block, reader *hermez_db.HermezDbReader, tx kv.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGenesisToStream", genesis, reader, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGenesisToStream indicates an expected call of WriteGenesisToStream.
func (mr *MockDataStreamServerMockRecorder) WriteGenesisToStream(genesis, reader, tx any) *MockDataStreamServerWriteGenesisToStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGenesisToStream", reflect.TypeOf((*MockDataStreamServer)(nil).WriteGenesisToStream), genesis, reader, tx)
	return &MockDataStreamServerWriteGenesisToStreamCall{Call: call}
}

// MockDataStreamServerWriteGenesisToStreamCall wrap *gomock.Call
type MockDataStreamServerWriteGenesisToStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerWriteGenesisToStreamCall) Return(arg0 error) *MockDataStreamServerWriteGenesisToStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerWriteGenesisToStreamCall) Do(f func(*types.Block, *hermez_db.HermezDbReader, kv.Tx) error) *MockDataStreamServerWriteGenesisToStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerWriteGenesisToStreamCall) DoAndReturn(f func(*types.Block, *hermez_db.HermezDbReader, kv.Tx) error) *MockDataStreamServerWriteGenesisToStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteWholeBatchToStream mocks base method.
func (m *MockDataStreamServer) WriteWholeBatchToStream(logPrefix string, tx kv.Tx, reader server.DbReader, prevBatchNum, batchNum uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteWholeBatchToStream", logPrefix, tx, reader, prevBatchNum, batchNum)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteWholeBatchToStream indicates an expected call of WriteWholeBatchToStream.
func (mr *MockDataStreamServerMockRecorder) WriteWholeBatchToStream(logPrefix, tx, reader, prevBatchNum, batchNum any) *MockDataStreamServerWriteWholeBatchToStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteWholeBatchToStream", reflect.TypeOf((*MockDataStreamServer)(nil).WriteWholeBatchToStream), logPrefix, tx, reader, prevBatchNum, batchNum)
	return &MockDataStreamServerWriteWholeBatchToStreamCall{Call: call}
}

// MockDataStreamServerWriteWholeBatchToStreamCall wrap *gomock.Call
type MockDataStreamServerWriteWholeBatchToStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataStreamServerWriteWholeBatchToStreamCall) Return(arg0 error) *MockDataStreamServerWriteWholeBatchToStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataStreamServerWriteWholeBatchToStreamCall) Do(f func(string, kv.Tx, server.DbReader, uint64, uint64) error) *MockDataStreamServerWriteWholeBatchToStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataStreamServerWriteWholeBatchToStreamCall) DoAndReturn(f func(string, kv.Tx, server.DbReader, uint64, uint64) error) *MockDataStreamServerWriteWholeBatchToStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
