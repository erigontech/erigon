// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erigontech/erigon/txnprovider/shutter/internal/testhelpers (interfaces: EonTracker)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./eon_tracker_mock.go -package=testhelpers . EonTracker
//

// Package testhelpers is a generated GoMock package.
package testhelpers

import (
	context "context"
	reflect "reflect"

	shutter "github.com/erigontech/erigon/txnprovider/shutter"
	gomock "go.uber.org/mock/gomock"
)

// MockEonTracker is a mock of EonTracker interface.
type MockEonTracker struct {
	ctrl     *gomock.Controller
	recorder *MockEonTrackerMockRecorder
}

// MockEonTrackerMockRecorder is the mock recorder for MockEonTracker.
type MockEonTrackerMockRecorder struct {
	mock *MockEonTracker
}

// NewMockEonTracker creates a new mock instance.
func NewMockEonTracker(ctrl *gomock.Controller) *MockEonTracker {
	mock := &MockEonTracker{ctrl: ctrl}
	mock.recorder = &MockEonTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEonTracker) EXPECT() *MockEonTrackerMockRecorder {
	return m.recorder
}

// CurrentEon mocks base method.
func (m *MockEonTracker) CurrentEon() (shutter.Eon, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentEon")
	ret0, _ := ret[0].(shutter.Eon)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CurrentEon indicates an expected call of CurrentEon.
func (mr *MockEonTrackerMockRecorder) CurrentEon() *MockEonTrackerCurrentEonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentEon", reflect.TypeOf((*MockEonTracker)(nil).CurrentEon))
	return &MockEonTrackerCurrentEonCall{Call: call}
}

// MockEonTrackerCurrentEonCall wrap *gomock.Call
type MockEonTrackerCurrentEonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEonTrackerCurrentEonCall) Return(arg0 shutter.Eon, arg1 bool) *MockEonTrackerCurrentEonCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEonTrackerCurrentEonCall) Do(f func() (shutter.Eon, bool)) *MockEonTrackerCurrentEonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEonTrackerCurrentEonCall) DoAndReturn(f func() (shutter.Eon, bool)) *MockEonTrackerCurrentEonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Eon mocks base method.
func (m *MockEonTracker) Eon(arg0 shutter.EonIndex) (shutter.Eon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eon", arg0)
	ret0, _ := ret[0].(shutter.Eon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Eon indicates an expected call of Eon.
func (mr *MockEonTrackerMockRecorder) Eon(arg0 any) *MockEonTrackerEonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eon", reflect.TypeOf((*MockEonTracker)(nil).Eon), arg0)
	return &MockEonTrackerEonCall{Call: call}
}

// MockEonTrackerEonCall wrap *gomock.Call
type MockEonTrackerEonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEonTrackerEonCall) Return(arg0 shutter.Eon, arg1 error) *MockEonTrackerEonCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEonTrackerEonCall) Do(f func(shutter.EonIndex) (shutter.Eon, error)) *MockEonTrackerEonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEonTrackerEonCall) DoAndReturn(f func(shutter.EonIndex) (shutter.Eon, error)) *MockEonTrackerEonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Run mocks base method.
func (m *MockEonTracker) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockEonTrackerMockRecorder) Run(arg0 any) *MockEonTrackerRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockEonTracker)(nil).Run), arg0)
	return &MockEonTrackerRunCall{Call: call}
}

// MockEonTrackerRunCall wrap *gomock.Call
type MockEonTrackerRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEonTrackerRunCall) Return(arg0 error) *MockEonTrackerRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEonTrackerRunCall) Do(f func(context.Context) error) *MockEonTrackerRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEonTrackerRunCall) DoAndReturn(f func(context.Context) error) *MockEonTrackerRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
